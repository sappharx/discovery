
registers:	file format elf32-littlearm


Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	#0xed8
;     while sbss < ebss {
 800019c:      	movw	r0, #0x4
 80001a0:      	movw	r1, #0x0
 80001a4:      	movt	r0, #0x2000
 80001a8:      	movt	r1, #0x2000
 80001ac:      	cmp	r1, r0
 80001ae:      	bhs	#0x26 <Reset+0x44>
 80001b0:      	movw	r1, #0x0
 80001b4:      	movs	r2, #0x0
 80001b6:      	movt	r1, #0x2000
 80001ba:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001be:      	cmp	r1, r0
 80001c0:      	itttt	lo
 80001c2:      	strlo	r2, [r1], #4
;     while sbss < ebss {
 80001c6:      	cmplo	r1, r0
 80001c8:      	strlo	r2, [r1], #4
;     while sbss < ebss {
 80001cc:      	cmplo	r1, r0
 80001ce:      	bhs	#0x6 <Reset+0x44>
 80001d0:      	str	r2, [r1], #4
;     while sbss < ebss {
 80001d4:      	cmp	r1, r0
 80001d6:      	blo	#-0x20 <Reset+0x26>
;     while sdata < edata {
 80001d8:      	movw	r1, #0x0
 80001dc:      	movw	r0, #0x0
 80001e0:      	movt	r1, #0x2000
 80001e4:      	movt	r0, #0x2000
 80001e8:      	cmp	r0, r1
 80001ea:      	bhs	#0x1c <Reset+0x76>
 80001ec:      	adds	r2, r0, #0x4
 80001ee:      	cmp	r2, r1
 80001f0:      	it	lo
 80001f2:      	movlo	r2, r1
 80001f4:      	mvns	r1, r0
 80001f6:      	add	r1, r2
 80001f8:      	bic	r1, r1, #0x3
 80001fc:      	adds	r2, r1, #0x4
 80001fe:      	movw	r1, #0x1568
 8000202:      	movt	r1, #0x800
 8000206:      	bl	#0x108e
 800020a:      	movw	r0, #0xed88
 800020e:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 8000212:      	ldr	r1, [r0]
 8000214:      	orr	r1, r1, #0xf00000
 8000218:      	str	r1, [r0]
;             trampoline()
 800021a:      	bl	#0xe4a
 800021e:      	trap

08000220 <main>:
; #[entry]
 8000220:      	push	{r7, lr}
 8000222:      	mov	r7, sp
 8000224:      	bl	#0x2
 8000228:      	trap

0800022a <registers::__cortex_m_rt_main::h947877f7b0e16f18>:
; fn main() -> ! {
 800022a:      	push	{r7, lr}
 800022c:      	mov	r7, sp
;     let gpioe = aux7::init().1;
 800022e:      	bl	#0x22
 8000232:      	movw	r0, #0x1018
 8000236:      	mov.w	r1, #0x200
 800023a:      	movt	r0, #0x4800
 800023e:      	str	r1, [r0]
 8000240:      	mov.w	r1, #0x800
 8000244:      	str	r1, [r0]
 8000246:      	mov.w	r1, #0x2000000
 800024a:      	str	r1, [r0]
 800024c:      	mov.w	r1, #0x8000000
 8000250:      	str	r1, [r0]
 8000252:      	b	#-0x4 <registers::__cortex_m_rt_main::h947877f7b0e16f18+0x28>

08000254 <aux7::init::hb3fcb629215cde12>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 8000254:      	push	{r4, r5, r6, r7, lr}
 8000256:      	add	r7, sp, #0xc
 8000258:      	push.w	{r8, r9, r11}
;     let r: u32 = call_asm!(__primask_r() -> u32);
 800025c:      	bl	#0x102e
 8000260:      	mov	r4, r0
;     call_asm!(__cpsid());
 8000262:      	bl	#0x1020
;             if unsafe { DEVICE_PERIPHERALS } {
 8000266:      	movw	r8, #0x0
;     if r & (1 << 0) == (1 << 0) {
 800026a:      	and	r0, r4, #0x1
;             if unsafe { DEVICE_PERIPHERALS } {
 800026e:      	movt	r8, #0x2000
 8000272:      	ldrb.w	r5, [r8]
 8000276:      	cmp	r5, #0x0
 8000278:      	itt	eq
 800027a:      	moveq	r1, #0x1
;         DEVICE_PERIPHERALS = true;
 800027c:      	strbeq.w	r1, [r8]
;     if primask.is_active() {
 8000280:      	cmp	r0, #0x0
;     call_asm!(__cpsie());
 8000282:      	it	eq
 8000284:      	bleq	#0x1002
 8000288:      	cmp	r5, #0x0
 800028a:      	bne.w	#0x138 <aux7::init::hb3fcb629215cde12+0x172>
 800028e:      	movw	r0, #0x1028
 8000292:      	movs	r6, #0x1
 8000294:      	movt	r0, #0x4002
 8000298:      	ldr	r1, [r0, #-20]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 800029c:      	orr	r1, r1, #0x200000
 80002a0:      	str	r1, [r0, #-20]
 80002a4:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80002a6:      	orr	r1, r1, #0x200000
 80002aa:      	str	r1, [r0]
 80002ac:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80002ae:      	bic	r1, r1, #0x200000
 80002b2:      	str	r1, [r0]
 80002b4:      	movw	r0, #0x1000
 80002b8:      	movt	r0, #0x4800
 80002bc:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 80002be:      	bfi	r1, r6, #18, #2
 80002c2:      	str	r1, [r0]
 80002c4:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 80002c6:      	bic	r1, r1, #0x200
 80002ca:      	str	r1, [r0, #0x4]
 80002cc:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80002ce:      	bfi	r1, r6, #16, #2
 80002d2:      	str	r1, [r0]
 80002d4:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80002d6:      	bic	r1, r1, #0x100
 80002da:      	str	r1, [r0, #0x4]
 80002dc:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 80002de:      	bfi	r1, r6, #20, #2
 80002e2:      	str	r1, [r0]
 80002e4:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 80002e6:      	bic	r1, r1, #0x400
 80002ea:      	str	r1, [r0, #0x4]
 80002ec:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 80002ee:      	bfi	r1, r6, #30, #2
 80002f2:      	str	r1, [r0]
 80002f4:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 80002f6:      	bic	r1, r1, #0x8000
 80002fa:      	str	r1, [r0, #0x4]
 80002fc:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 80002fe:      	bfi	r1, r6, #22, #2
 8000302:      	str	r1, [r0]
 8000304:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000306:      	bic	r1, r1, #0x800
 800030a:      	str	r1, [r0, #0x4]
 800030c:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 800030e:      	bfi	r1, r6, #28, #2
 8000312:      	str	r1, [r0]
 8000314:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000316:      	bic	r1, r1, #0x4000
 800031a:      	str	r1, [r0, #0x4]
 800031c:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 800031e:      	bfi	r1, r6, #24, #2
 8000322:      	str	r1, [r0]
 8000324:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000326:      	bic	r1, r1, #0x1000
 800032a:      	str	r1, [r0, #0x4]
 800032c:      	ldr	r1, [r0]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 800032e:      	bfi	r1, r6, #26, #2
 8000332:      	str	r1, [r0]
 8000334:      	ldr	r1, [r0, #0x4]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000336:      	bic	r1, r1, #0x2000
 800033a:      	str	r1, [r0, #0x4]
 800033c:      	mov.w	r1, #0x2000000
 8000340:      	str	r1, [r0, #0x18]
 8000342:      	mov.w	r1, #0x1000000
 8000346:      	str	r1, [r0, #0x18]
 8000348:      	mov.w	r1, #0x4000000
 800034c:      	str	r1, [r0, #0x18]
 800034e:      	mov.w	r1, #0x80000000
 8000352:      	str	r1, [r0, #0x18]
 8000354:      	mov.w	r1, #0x8000000
 8000358:      	str	r1, [r0, #0x18]
 800035a:      	mov.w	r1, #0x40000000
 800035e:      	str	r1, [r0, #0x18]
 8000360:      	mov.w	r1, #0x10000000
 8000364:      	str	r1, [r0, #0x18]
 8000366:      	mov.w	r1, #0x20000000
 800036a:      	str	r1, [r0, #0x18]
;     let r: u32 = call_asm!(__primask_r() -> u32);
 800036c:      	bl	#0xf1e
 8000370:      	mov	r9, r0
;     call_asm!(__cpsid());
 8000372:      	bl	#0xf10
;     let r: u32 = call_asm!(__primask_r() -> u32);
 8000376:      	bl	#0xf14
 800037a:      	mov	r5, r0
;     call_asm!(__cpsid());
 800037c:      	bl	#0xf06
;             if unsafe { TAKEN } {
 8000380:      	ldrb.w	r4, [r8, #0x1]
;     if r & (1 << 0) == (1 << 0) {
 8000384:      	and	r0, r5, #0x1
;             if unsafe { TAKEN } {
 8000388:      	cmp	r4, #0x0
;         TAKEN = true;
 800038a:      	it	eq
 800038c:      	strbeq.w	r6, [r8, #0x1]
;     if primask.is_active() {
 8000390:      	cmp	r0, #0x0
;     call_asm!(__cpsie());
 8000392:      	it	eq
 8000394:      	bleq	#0xef2
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8000398:      	cmp	r4, #0x0
 800039a:      	and	r0, r9, #0x1
 800039e:      	itt	eq
 80003a0:      	moveq	r1, #0x1
;         TAKEN = true;
 80003a2:      	strbeq.w	r1, [r8, #0x1]
;     if primask.is_active() {
 80003a6:      	cmp	r0, #0x0
;     call_asm!(__cpsie());
 80003a8:      	it	eq
 80003aa:      	bleq	#0xedc
 80003ae:      	cmp	r4, #0x0
; }
 80003b0:      	itt	eq
 80003b2:      	popeq.w	{r8, r9, r11}
 80003b6:      	popeq	{r4, r5, r6, r7, pc}
 80003b8:      	movw	r0, #0x13f0
 80003bc:      	movt	r0, #0x800
 80003c0:      	bl	#0x984
 80003c4:      	trap
 80003c6:      	movw	r0, #0x13e0
 80003ca:      	movt	r0, #0x800
 80003ce:      	bl	#0x976
 80003d2:      	trap

080003d4 <core::ops::function::FnOnce::call_once::hcb8f9ded1330be71>:
 80003d4:      	ldr	r0, [r0]
 80003d6:      	b	#-0x4 <core::ops::function::FnOnce::call_once::hcb8f9ded1330be71+0x2>

080003d8 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05>:
 80003d8:      	push	{r4, r5, r6, r7, lr}
 80003da:      	add	r7, sp, #0xc
 80003dc:      	push.w	{r8, r9, r10, r11}
 80003e0:      	sub	sp, #0x3c
 80003e2:      	ldr	r5, [r0]
 80003e4:      	movw	r0, #0x2710
 80003e8:      	movw	lr, #0x851f
 80003ec:      	mov	r11, r1
 80003ee:      	cmp	r5, r0
 80003f0:      	movw	r0, #0x1438
 80003f4:      	movw	r3, #0xff9c
 80003f8:      	movt	lr, #0x51eb
 80003fc:      	movt	r0, #0x800
 8000400:      	blo	#0x7c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0xa8>
 8000402:      	movw	r8, #0x1759
 8000406:      	movw	r9, #0xd8f0
 800040a:      	movw	r12, #0xe0ff
 800040e:      	add.w	r10, sp, #0x14
 8000412:      	movs	r6, #0x0
 8000414:      	movt	r8, #0xd1b7
 8000418:      	movt	r9, #0xffff
 800041c:      	movt	r12, #0x5f5
 8000420:      	str.w	r11, [sp, #0x10]
 8000424:      	umull	r2, r4, r5, r8
 8000428:      	cmp	r5, r12
 800042a:      	lsr.w	r2, r4, #0xd
 800042e:      	mla	r4, r2, r9, r5
 8000432:      	mov	r5, r2
 8000434:      	uxth	r1, r4
 8000436:      	umull	r1, r11, r1, lr
 800043a:      	lsr.w	r1, r11, #0x5
 800043e:      	mla	r4, r1, r3, r4
 8000442:      	add.w	r3, r10, r6
 8000446:      	ldrh.w	r1, [r0, r1, lsl #1]
 800044a:      	sub.w	r6, r6, #0x4
 800044e:      	strh.w	r1, [r3, #0x23]
 8000452:      	uxth	r4, r4
 8000454:      	ldrh.w	r4, [r0, r4, lsl #1]
 8000458:      	strh.w	r4, [r3, #0x25]
 800045c:      	movw	r3, #0xff9c
 8000460:      	bhi	#-0x40 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x4c>
 8000462:      	ldr.w	r11, [sp, #0x10]
 8000466:      	adds	r6, #0x27
 8000468:      	mov	r5, r2
 800046a:      	cmp	r5, #0x63
 800046c:      	bgt	#0x16 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0xae>
 800046e:      	mov	r1, r5
 8000470:      	cmp	r1, #0xa
 8000472:      	blt	#0x2c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0xca>
 8000474:      	ldrh.w	r0, [r0, r1, lsl #1]
 8000478:      	subs	r6, #0x2
 800047a:      	add	r1, sp, #0x14
 800047c:      	strh	r0, [r1, r6]
 800047e:      	b	#0x2a <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0xd4>
 8000480:      	movs	r6, #0x27
 8000482:      	cmp	r5, #0x63
 8000484:      	ble	#-0x1a <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x96>
 8000486:      	uxth	r1, r5
 8000488:      	subs	r6, #0x2
 800048a:      	umull	r1, r2, r1, lr
 800048e:      	lsrs	r1, r2, #0x5
 8000490:      	mla	r2, r1, r3, r5
 8000494:      	add	r3, sp, #0x14
 8000496:      	uxth	r2, r2
 8000498:      	ldrh.w	r2, [r0, r2, lsl #1]
 800049c:      	strh	r2, [r3, r6]
 800049e:      	cmp	r1, #0xa
 80004a0:      	bge	#-0x30 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x9c>
 80004a2:      	subs	r6, #0x1
 80004a4:      	add.w	r0, r1, #0x30
 80004a8:      	add	r1, sp, #0x14
 80004aa:      	strb	r0, [r1, r6]
 80004ac:      	ldr.w	r0, [r11]
 80004b0:      	add	r1, sp, #0x14
 80004b2:      	movw	r3, #0x153c
 80004b6:      	add.w	r9, r1, r6
 80004ba:      	ldr.w	r5, [r11, #0x8]
 80004be:      	ands	r8, r0, #0x1
 80004c2:      	lsl.w	r1, r0, #0x1d
 80004c6:      	mov.w	r10, #0x2b
 80004ca:      	movt	r3, #0x800
 80004ce:      	and.w	r2, r3, r1, asr #31
 80004d2:      	rsb.w	r4, r6, #0x27
 80004d6:      	it	eq
 80004d8:      	moveq.w	r10, #0x110000
 80004dc:      	cmp	r5, #0x1
 80004de:      	bne	#0x32 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x13c>
 80004e0:      	mov	r5, r9
 80004e2:      	ldr.w	r9, [r11, #0xc]
 80004e6:      	add.w	r1, r4, r8
 80004ea:      	strd	r4, r2, [sp, #12]
 80004ee:      	cmp	r9, r1
 80004f0:      	bls	#0x2e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x14a>
 80004f2:      	lsls	r0, r0, #0x1c
 80004f4:      	str	r5, [sp, #0x8]
 80004f6:      	bmi	#0x5a <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x17c>
 80004f8:      	ldrb.w	r2, [r11, #0x20]
 80004fc:      	sub.w	r0, r9, r1
 8000500:      	cmp	r2, #0x3
 8000502:      	it	eq
 8000504:      	moveq	r2, #0x1
 8000506:      	lsls	r1, r2, #0x1e
 8000508:      	beq	#0x9c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x1d0>
 800050a:      	cmp	r2, #0x1
 800050c:      	bne	#0x9e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x1d6>
 800050e:      	movs	r5, #0x0
 8000510:      	mov	r1, r0
 8000512:      	b	#0x9e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x1dc>
 8000514:      	mov	r0, r11
 8000516:      	mov	r1, r10
 8000518:      	bl	#0x176
 800051c:      	cbz	r0, #0x1c
 800051e:      	movs	r4, #0x1
 8000520:      	b	#0x52 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x19e>
 8000522:      	ldr	r2, [sp, #0x10]
 8000524:      	mov	r0, r11
 8000526:      	mov	r1, r10
 8000528:      	bl	#0x166
 800052c:      	cmp	r0, #0x0
 800052e:      	bne	#0xee <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x248>
 8000530:      	ldrd	r0, r1, [r11, #24]
 8000534:      	ldr	r3, [r1, #0xc]
 8000536:      	mov	r1, r5
 8000538:      	ldr	r2, [sp, #0xc]
 800053a:      	b	#0x8 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x16e>
 800053c:      	ldrd	r0, r1, [r11, #24]
 8000540:      	mov	r2, r4
 8000542:      	ldr	r3, [r1, #0xc]
 8000544:      	mov	r1, r9
 8000546:      	blx	r3
 8000548:      	mov	r4, r0
 800054a:      	mov	r0, r4
 800054c:      	add	sp, #0x3c
 800054e:      	pop.w	{r8, r9, r10, r11}
 8000552:      	pop	{r4, r5, r6, r7, pc}
 8000554:      	ldr	r2, [sp, #0x10]
 8000556:      	movs	r0, #0x30
 8000558:      	ldrb.w	r1, [r11, #0x20]
 800055c:      	movs	r4, #0x1
 800055e:      	ldr.w	r5, [r11, #0x4]
 8000562:      	str	r1, [sp, #0x4]
 8000564:      	mov	r1, r10
 8000566:      	str.w	r0, [r11, #0x4]
 800056a:      	mov	r0, r11
 800056c:      	strb.w	r4, [r11, #0x20]
 8000570:      	bl	#0x11e
 8000574:      	cbz	r0, #0x8
 8000576:      	mov	r0, r4
 8000578:      	add	sp, #0x3c
 800057a:      	pop.w	{r8, r9, r10, r11}
 800057e:      	pop	{r4, r5, r6, r7, pc}
 8000580:      	add.w	r0, r6, r9
 8000584:      	mov	r10, r5
 8000586:      	sub.w	r0, r0, r8
 800058a:      	ldrd	r4, r5, [r11, #24]
 800058e:      	ldr.w	r8, [sp, #0xc]
 8000592:      	sub.w	r6, r0, #0x26
 8000596:      	subs	r6, #0x1
 8000598:      	beq	#0x78 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x23c>
 800059a:      	ldr	r2, [r5, #0x10]
 800059c:      	mov	r0, r4
 800059e:      	movs	r1, #0x30
 80005a0:      	blx	r2
 80005a2:      	cmp	r0, #0x0
 80005a4:      	beq	#-0x12 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x1be>
 80005a6:      	b	#0x76 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x248>
 80005a8:      	movs	r1, #0x0
 80005aa:      	mov	r5, r0
 80005ac:      	b	#0x4 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x1dc>
 80005ae:      	lsrs	r1, r0, #0x1
 80005b0:      	adds	r0, #0x1
 80005b2:      	lsrs	r5, r0, #0x1
 80005b4:      	ldr.w	r6, [r11, #0x4]
 80005b8:      	adds	r4, r1, #0x1
 80005ba:      	ldrd	r9, r8, [r11, #24]
 80005be:      	subs	r4, #0x1
 80005c0:      	beq	#0xe <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x1fa>
 80005c2:      	ldr.w	r2, [r8, #0x10]
 80005c6:      	mov	r0, r9
 80005c8:      	mov	r1, r6
 80005ca:      	blx	r2
 80005cc:      	cmp	r0, #0x0
 80005ce:      	beq	#-0x14 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x1e6>
 80005d0:      	b	#0x4c <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x248>
 80005d2:      	subs.w	r4, r6, #0x110000
 80005d6:      	it	ne
 80005d8:      	movne	r4, r5
 80005da:      	cmp.w	r6, #0x110000
 80005de:      	beq	#0x3e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x248>
 80005e0:      	ldr	r2, [sp, #0x10]
 80005e2:      	mov	r0, r11
 80005e4:      	mov	r1, r10
 80005e6:      	bl	#0xa8
 80005ea:      	cbnz	r0, #0x32
 80005ec:      	ldr.w	r3, [r8, #0xc]
 80005f0:      	mov	r0, r9
 80005f2:      	ldrd	r1, r2, [sp, #8]
 80005f6:      	blx	r3
 80005f8:      	cbnz	r0, #0x24
 80005fa:      	movs	r5, #0x0
 80005fc:      	cmp	r4, r5
 80005fe:      	beq	#0x40 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x26a>
 8000600:      	ldr.w	r2, [r8, #0x10]
 8000604:      	mov	r0, r9
 8000606:      	mov	r1, r6
 8000608:      	blx	r2
 800060a:      	adds	r5, #0x1
 800060c:      	cmp	r0, #0x0
 800060e:      	beq	#-0x16 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x224>
 8000610:      	subs	r0, r5, #0x1
 8000612:      	b	#0x2e <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt::h50b8d029a91e8e05+0x26c>
 8000614:      	ldr	r3, [r5, #0xc]
 8000616:      	mov	r0, r4
 8000618:      	ldr	r1, [sp, #0x8]
 800061a:      	mov	r2, r8
 800061c:      	blx	r3
 800061e:      	cbz	r0, #0xa
 8000620:      	movs	r4, #0x1
 8000622:      	mov	r0, r4
 8000624:      	add	sp, #0x3c
 8000626:      	pop.w	{r8, r9, r10, r11}
 800062a:      	pop	{r4, r5, r6, r7, pc}
 800062c:      	ldr	r0, [sp, #0x4]
 800062e:      	movs	r4, #0x0
 8000630:      	strb.w	r0, [r11, #0x20]
 8000634:      	str.w	r10, [r11, #0x4]
 8000638:      	mov	r0, r4
 800063a:      	add	sp, #0x3c
 800063c:      	pop.w	{r8, r9, r10, r11}
 8000640:      	pop	{r4, r5, r6, r7, pc}
 8000642:      	mov	r0, r4
 8000644:      	mov	r1, r4
 8000646:      	movs	r4, #0x0
 8000648:      	cmp	r0, r1
 800064a:      	it	lo
 800064c:      	movlo	r4, #0x1
 800064e:      	mov	r0, r4
 8000650:      	add	sp, #0x3c
 8000652:      	pop.w	{r8, r9, r10, r11}
 8000656:      	pop	{r4, r5, r6, r7, pc}

08000658 <core::panicking::panic_fmt::h9d5f60b12161669a>:
 8000658:      	push	{r7, lr}
 800065a:      	mov	r7, sp
 800065c:      	sub	sp, #0x10
 800065e:      	strd	r0, r1, [sp, #8]
 8000662:      	movw	r0, #0x1428
 8000666:      	movt	r0, #0x800
 800066a:      	str	r0, [sp, #0x4]
 800066c:      	movw	r0, #0x153c
 8000670:      	movt	r0, #0x800
 8000674:      	str	r0, [sp]
 8000676:      	mov	r0, sp
 8000678:      	bl	#0x9fa
 800067c:      	trap

0800067e <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::hf652eaa4c4ddcf6f>:
 800067e:      	bx	lr

08000680 <<T as core::any::Any>::type_id::h415768cc42a8f1e6>:
 8000680:      	movw	r0, #0x57f3
 8000684:      	movw	r1, #0x8917
 8000688:      	movt	r0, #0x59a6
 800068c:      	movt	r1, #0x68bc
 8000690:      	bx	lr

08000692 <core::fmt::Formatter::pad_integral::write_prefix::h68123beb31973f81>:
 8000692:      	push	{r4, r5, r7, lr}
 8000694:      	add	r7, sp, #0x8
 8000696:      	mov	r4, r2
 8000698:      	mov	r5, r0
 800069a:      	cmp.w	r1, #0x110000
 800069e:      	beq	#0xc <core::fmt::Formatter::pad_integral::write_prefix::h68123beb31973f81+0x1c>
 80006a0:      	ldrd	r0, r2, [r5, #24]
 80006a4:      	ldr	r2, [r2, #0x10]
 80006a6:      	blx	r2
 80006a8:      	cbz	r0, #0x2
 80006aa:      	movs	r0, #0x1
 80006ac:      	pop	{r4, r5, r7, pc}
 80006ae:      	cbz	r4, #0xe
 80006b0:      	ldrd	r0, r1, [r5, #24]
 80006b4:      	movs	r2, #0x0
 80006b6:      	ldr	r3, [r1, #0xc]
 80006b8:      	mov	r1, r4
 80006ba:      	pop.w	{r4, r5, r7, lr}
 80006be:      	bx	r3
 80006c0:      	movs	r0, #0x0
 80006c2:      	pop	{r4, r5, r7, pc}

080006c4 <core::fmt::Formatter::pad::h5f277c03c05ffc94>:
 80006c4:      	push	{r4, r5, r6, r7, lr}
 80006c6:      	add	r7, sp, #0xc
 80006c8:      	push.w	{r8, r9, r10, r11}
 80006cc:      	sub	sp, #0xc
 80006ce:      	mov	r8, r1
 80006d0:      	ldr.w	lr, [r0, #0x8]
 80006d4:      	ldr	r1, [r0, #0x10]
 80006d6:      	mov	r9, r2
 80006d8:      	cmp.w	lr, #0x1
 80006dc:      	bne	#0x1e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x3a>
 80006de:      	cmp	r1, #0x1
 80006e0:      	beq	#0x20 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x40>
 80006e2:      	cmp.w	r9, #0x0
 80006e6:      	beq.w	#0x538 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x55e>
 80006ea:      	sub.w	r10, r9, #0x1
 80006ee:      	and	lr, r9, #0x3
 80006f2:      	cmp.w	r10, #0x3
 80006f6:      	bhs	#0xe0 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x116>
 80006f8:      	movs	r6, #0x0
 80006fa:      	mov	r2, r8
 80006fc:      	b	#0x302 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x33e>
 80006fe:      	cmp	r1, #0x1
 8000700:      	bne.w	#0x52c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x56c>
 8000704:      	ldr	r6, [r0, #0x14]
 8000706:      	add.w	r12, r8, r9
 800070a:      	movs	r2, #0x0
 800070c:      	mov	r4, r8
 800070e:      	cmp	r6, #0x0
 8000710:      	beq	#0x96 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xe6>
 8000712:      	str.w	lr, [sp, #0x8]
 8000716:      	b	#0x32 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x88>
 8000718:      	ldrb	r5, [r4], #1
 800071c:      	and	r8, r5, #0x3f
 8000720:      	mov.w	r5, #0x1c0000
 8000724:      	and.w	r1, r5, r1, lsl #18
 8000728:      	orr.w	r1, r1, r10, lsl #12
 800072c:      	orr.w	r1, r1, r11, lsl #6
 8000730:      	add	r1, r8
 8000732:      	mov	r8, r9
 8000734:      	mov	r9, lr
 8000736:      	ldr.w	lr, [sp, #0x8]
 800073a:      	cmp.w	r1, #0x110000
 800073e:      	beq.w	#0x4cc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x54a>
 8000742:      	subs	r1, r2, r3
 8000744:      	subs	r6, #0x1
 8000746:      	add.w	r2, r1, r4
 800074a:      	beq	#0x5c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xe6>
 800074c:      	cmp	r4, r12
 800074e:      	beq.w	#0x4bc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x54a>
 8000752:      	mov	r3, r4
 8000754:      	ldrsb	r1, [r4], #1
 8000758:      	cmp.w	r1, #0xffffffff
 800075c:      	bgt	#-0x1e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x7e>
 800075e:      	cmp	r4, r12
 8000760:      	beq	#0xe <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xae>
 8000762:      	ldrb	r5, [r3, #0x1]
 8000764:      	adds	r4, r3, #0x2
 8000766:      	and	r10, r5, #0x3f
 800076a:      	uxtb	r1, r1
 800076c:      	cmp	r1, #0xe0
 800076e:      	blo	#-0x30 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x7e>
 8000770:      	b	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xba>
 8000772:      	mov.w	r10, #0x0
 8000776:      	mov	r4, r12
 8000778:      	uxtb	r1, r1
 800077a:      	cmp	r1, #0xe0
 800077c:      	blo	#-0x3e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x7e>
 800077e:      	cmp	r4, r12
 8000780:      	beq	#0xc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xcc>
 8000782:      	ldrb	r5, [r4], #1
 8000786:      	and	r11, r5, #0x3f
 800078a:      	cmp	r1, #0xf0
 800078c:      	blo	#-0x4e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x7e>
 800078e:      	b	#0x8 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xd6>
 8000790:      	mov.w	r11, #0x0
 8000794:      	mov	r4, r12
 8000796:      	cmp	r1, #0xf0
 8000798:      	blo	#-0x5a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x7e>
 800079a:      	mov	lr, r9
 800079c:      	mov	r9, r8
 800079e:      	cmp	r4, r12
 80007a0:      	bne	#-0x8c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x54>
 80007a2:      	mov.w	r8, #0x0
 80007a6:      	mov	r4, r12
 80007a8:      	b	#-0x8c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5c>
 80007aa:      	cmp	r4, r12
 80007ac:      	beq.w	#0x45e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x54a>
 80007b0:      	mov	r1, r4
 80007b2:      	ldrsb	r3, [r1], #1
 80007b6:      	cmp.w	r3, #0xffffffff
 80007ba:      	ble	#0x3e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x138>
 80007bc:      	cmp	r2, #0x0
 80007be:      	beq.w	#0x19a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x298>
 80007c2:      	cmp	r2, r9
 80007c4:      	bhs.w	#0x18e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x292>
 80007c8:      	ldrsb.w	r1, [r8, r2]
 80007cc:      	cmn.w	r1, #0x40
 80007d0:      	bge.w	#0x188 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x298>
 80007d4:      	movs	r1, #0x0
 80007d6:      	movs	r2, #0x0
 80007d8:      	b	#0x182 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x29a>
 80007da:      	sub.w	r1, r9, #0x4
 80007de:      	bic	r2, r1, #0x3
 80007e2:      	movs	r1, #0x1
 80007e4:      	cmp	r2, #0xc
 80007e6:      	add.w	r1, r1, r2, lsr #2
 80007ea:      	and	r4, r1, #0x3
 80007ee:      	bhs	#0x24 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x152>
 80007f0:      	movs	r6, #0x0
 80007f2:      	mov	r2, r8
 80007f4:      	cmp	r4, #0x0
 80007f6:      	bne.w	#0x122 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x258>
 80007fa:      	b	#0x204 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x33e>
 80007fc:      	uxtb	r3, r3
 80007fe:      	cmp	r1, r12
 8000800:      	beq.w	#0x1aa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2ea>
 8000804:      	ldrb	r1, [r4, #0x1]
 8000806:      	adds	r6, r4, #0x2
 8000808:      	and	r1, r1, #0x3f
 800080c:      	lsls	r1, r1, #0xc
 800080e:      	cmp	r3, #0xe0
 8000810:      	bhs.w	#0x1a4 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2f4>
 8000814:      	b	#-0x5c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xf8>
 8000816:      	bic	r1, r1, #0x3
 800081a:      	movs	r6, #0x0
 800081c:      	rsb.w	r12, r1, #0x0
 8000820:      	mov	r2, r8
 8000822:      	strd	r4, lr, [sp]
 8000826:      	str.w	r8, [sp, #0x8]
 800082a:      	ldrb	r3, [r2], #16
 800082e:      	ldrb	r5, [r2, #-15]
 8000832:      	and	r3, r3, #0xc0
 8000836:      	ldrb	r4, [r2, #-14]
 800083a:      	cmp	r3, #0x80
 800083c:      	ldrb	lr, [r2, #-13]
 8000840:      	and	r5, r5, #0xc0
 8000844:      	ldrb	r8, [r2, #-1]
 8000848:      	and	r4, r4, #0xc0
 800084c:      	ldrb	r11, [r2, #-2]
 8000850:      	it	ne
 8000852:      	addne	r6, #0x1
 8000854:      	ldrb	r3, [r2, #-3]
 8000858:      	cmp	r5, #0x80
 800085a:      	it	ne
 800085c:      	addne	r6, #0x1
 800085e:      	ldrb	r5, [r2, #-12]
 8000862:      	cmp	r4, #0x80
 8000864:      	it	ne
 8000866:      	addne	r6, #0x1
 8000868:      	ldrb	r1, [r2, #-11]
 800086c:      	and	r4, lr, #0xc0
 8000870:      	cmp	r4, #0x80
 8000872:      	it	ne
 8000874:      	addne	r6, #0x1
 8000876:      	and	r5, r5, #0xc0
 800087a:      	ldrb	r4, [r2, #-10]
 800087e:      	cmp	r5, #0x80
 8000880:      	it	ne
 8000882:      	addne	r6, #0x1
 8000884:      	and	r1, r1, #0xc0
 8000888:      	ldrb	r5, [r2, #-9]
 800088c:      	cmp	r1, #0x80
 800088e:      	it	ne
 8000890:      	addne	r6, #0x1
 8000892:      	and	r1, r4, #0xc0
 8000896:      	ldrb	r4, [r2, #-8]
 800089a:      	cmp	r1, #0x80
 800089c:      	it	ne
 800089e:      	addne	r6, #0x1
 80008a0:      	and	r1, r5, #0xc0
 80008a4:      	ldrb	r5, [r2, #-7]
 80008a8:      	cmp	r1, #0x80
 80008aa:      	it	ne
 80008ac:      	addne	r6, #0x1
 80008ae:      	and	r1, r4, #0xc0
 80008b2:      	ldrb	r4, [r2, #-6]
 80008b6:      	cmp	r1, #0x80
 80008b8:      	it	ne
 80008ba:      	addne	r6, #0x1
 80008bc:      	and	r1, r5, #0xc0
 80008c0:      	ldrb	r5, [r2, #-4]
 80008c4:      	cmp	r1, #0x80
 80008c6:      	it	ne
 80008c8:      	addne	r6, #0x1
 80008ca:      	and	r1, r4, #0xc0
 80008ce:      	ldrb	r4, [r2, #-5]
 80008d2:      	cmp	r1, #0x80
 80008d4:      	it	ne
 80008d6:      	addne	r6, #0x1
 80008d8:      	and	r1, r4, #0xc0
 80008dc:      	cmp	r1, #0x80
 80008de:      	and	r1, r5, #0xc0
 80008e2:      	it	ne
 80008e4:      	addne	r6, #0x1
 80008e6:      	cmp	r1, #0x80
 80008e8:      	and	r1, r3, #0xc0
 80008ec:      	it	ne
 80008ee:      	addne	r6, #0x1
 80008f0:      	cmp	r1, #0x80
 80008f2:      	and	r1, r11, #0xc0
 80008f6:      	it	ne
 80008f8:      	addne	r6, #0x1
 80008fa:      	cmp	r1, #0x80
 80008fc:      	and	r1, r8, #0xc0
 8000900:      	it	ne
 8000902:      	addne	r6, #0x1
 8000904:      	cmp	r1, #0x80
 8000906:      	it	ne
 8000908:      	addne	r6, #0x1
 800090a:      	adds.w	r12, r12, #0x4
 800090e:      	bne	#-0xe8 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x166>
 8000910:      	ldr.w	r8, [sp, #0x8]
 8000914:      	ldrd	r4, lr, [sp]
 8000918:      	cmp	r4, #0x0
 800091a:      	beq	#0xe4 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x33e>
 800091c:      	ldrb	r1, [r2]
 800091e:      	ldrb	r3, [r2, #0x1]
 8000920:      	and	r1, r1, #0xc0
 8000924:      	ldrb	r5, [r2, #0x2]
 8000926:      	cmp	r1, #0x80
 8000928:      	ldrb.w	r12, [r2, #0x3]
 800092c:      	and	r1, r3, #0xc0
 8000930:      	it	ne
 8000932:      	addne	r6, #0x1
 8000934:      	cmp	r1, #0x80
 8000936:      	and	r1, r5, #0xc0
 800093a:      	it	ne
 800093c:      	addne	r6, #0x1
 800093e:      	cmp	r1, #0x80
 8000940:      	and	r1, r12, #0xc0
 8000944:      	it	ne
 8000946:      	addne	r6, #0x1
 8000948:      	cmp	r1, #0x80
 800094a:      	it	ne
 800094c:      	addne	r6, #0x1
 800094e:      	cmp	r4, #0x1
 8000950:      	bne	#0x20 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2b0>
 8000952:      	adds	r2, #0x4
 8000954:      	b	#0xaa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x33e>
 8000956:      	cmp	r2, r9
 8000958:      	bne.w	#-0x188 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x110>
 800095c:      	mov	r1, r8
 800095e:      	cmp	r1, #0x0
 8000960:      	ite	eq
 8000962:      	moveq	r2, r9
 8000964:      	movne	r8, r1
 8000966:      	cmp.w	lr, #0x1
 800096a:      	beq.w	#0x2aa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x554>
 800096e:      	ldrd	r1, r0, [r0, #24]
 8000972:      	b	#0x2c0 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x572>
 8000974:      	ldrb	r1, [r2, #0x4]
 8000976:      	ldrb	r3, [r2, #0x5]
 8000978:      	and	r1, r1, #0xc0
 800097c:      	ldrb	r5, [r2, #0x6]
 800097e:      	cmp	r1, #0x80
 8000980:      	ldrb.w	r12, [r2, #0x7]
 8000984:      	and	r1, r3, #0xc0
 8000988:      	it	ne
 800098a:      	addne	r6, #0x1
 800098c:      	cmp	r1, #0x80
 800098e:      	and	r1, r5, #0xc0
 8000992:      	it	ne
 8000994:      	addne	r6, #0x1
 8000996:      	cmp	r1, #0x80
 8000998:      	and	r1, r12, #0xc0
 800099c:      	it	ne
 800099e:      	addne	r6, #0x1
 80009a0:      	cmp	r1, #0x80
 80009a2:      	it	ne
 80009a4:      	addne	r6, #0x1
 80009a6:      	cmp	r4, #0x2
 80009a8:      	bne	#0x24 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x30c>
 80009aa:      	adds	r2, #0x8
 80009ac:      	b	#0x52 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x33e>
 80009ae:      	movs	r1, #0x0
 80009b0:      	mov	r6, r12
 80009b2:      	cmp	r3, #0xe0
 80009b4:      	blo.w	#-0x1fc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xf8>
 80009b8:      	cmp	r6, r12
 80009ba:      	beq.w	#0x226 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x520>
 80009be:      	ldrb	r4, [r6], #1
 80009c2:      	and	r4, r4, #0x3f
 80009c6:      	lsls	r4, r4, #0x6
 80009c8:      	cmp	r3, #0xf0
 80009ca:      	blo.w	#-0x212 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xf8>
 80009ce:      	b	#0x21c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x52a>
 80009d0:      	ldrb	r1, [r2, #0x8]
 80009d2:      	ldrb	r3, [r2, #0x9]
 80009d4:      	and	r1, r1, #0xc0
 80009d8:      	ldrb	r5, [r2, #0xa]
 80009da:      	ldrb	r4, [r2, #0xb]
 80009dc:      	cmp	r1, #0x80
 80009de:      	it	ne
 80009e0:      	addne	r6, #0x1
 80009e2:      	and	r1, r3, #0xc0
 80009e6:      	cmp	r1, #0x80
 80009e8:      	it	ne
 80009ea:      	addne	r6, #0x1
 80009ec:      	and	r1, r5, #0xc0
 80009f0:      	adds	r2, #0xc
 80009f2:      	cmp	r1, #0x80
 80009f4:      	it	ne
 80009f6:      	addne	r6, #0x1
 80009f8:      	and	r1, r4, #0xc0
 80009fc:      	cmp	r1, #0x80
 80009fe:      	it	ne
 8000a00:      	addne	r6, #0x1
 8000a02:      	cmp.w	lr, #0x0
 8000a06:      	beq	#0x2e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x374>
 8000a08:      	ldrb	r1, [r2]
 8000a0a:      	and	r1, r1, #0xc0
 8000a0e:      	cmp	r1, #0x80
 8000a10:      	it	ne
 8000a12:      	addne	r6, #0x1
 8000a14:      	cmp.w	lr, #0x1
 8000a18:      	beq	#0x1c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x374>
 8000a1a:      	ldrb	r1, [r2, #0x1]
 8000a1c:      	and	r1, r1, #0xc0
 8000a20:      	cmp	r1, #0x80
 8000a22:      	it	ne
 8000a24:      	addne	r6, #0x1
 8000a26:      	cmp.w	lr, #0x2
 8000a2a:      	beq	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x374>
 8000a2c:      	ldrb	r1, [r2, #0x2]
 8000a2e:      	and	r1, r1, #0xc0
 8000a32:      	cmp	r1, #0x80
 8000a34:      	it	ne
 8000a36:      	addne	r6, #0x1
 8000a38:      	ldr.w	r11, [r0, #0xc]
 8000a3c:      	cmp	r6, r11
 8000a3e:      	bhs.w	#0x1ee <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x56c>
 8000a42:      	cmp.w	r10, #0x3
 8000a46:      	bhs	#0x4 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x38a>
 8000a48:      	movs	r3, #0x0
 8000a4a:      	mov	r6, r8
 8000a4c:      	b	#0x22a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5b6>
 8000a4e:      	sub.w	r1, r9, #0x4
 8000a52:      	bic	r2, r1, #0x3
 8000a56:      	movs	r1, #0x1
 8000a58:      	cmp	r2, #0xc
 8000a5a:      	add.w	r1, r1, r2, lsr #2
 8000a5e:      	and	r12, r1, #0x3
 8000a62:      	bhs	#0x4 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x3a6>
 8000a64:      	movs	r3, #0x0
 8000a66:      	mov	r6, r8
 8000a68:      	b	#0xfc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x4a4>
 8000a6a:      	bic	r1, r1, #0x3
 8000a6e:      	movs	r3, #0x0
 8000a70:      	rsb.w	r10, r1, #0x0
 8000a74:      	mov	r6, r8
 8000a76:      	str.w	lr, [sp, #0x4]
 8000a7a:      	str.w	r8, [sp, #0x8]
 8000a7e:      	ldrb	r2, [r6], #16
 8000a82:      	ldrb	r1, [r6, #-15]
 8000a86:      	and	r2, r2, #0xc0
 8000a8a:      	ldrb	r5, [r6, #-14]
 8000a8e:      	cmp	r2, #0x80
 8000a90:      	ldrb	r4, [r6, #-13]
 8000a94:      	and	r1, r1, #0xc0
 8000a98:      	ldrb	lr, [r6, #-1]
 8000a9c:      	ldrb	r8, [r6, #-2]
 8000aa0:      	it	ne
 8000aa2:      	addne	r3, #0x1
 8000aa4:      	cmp	r1, #0x80
 8000aa6:      	ldrb	r2, [r6, #-3]
 8000aaa:      	it	ne
 8000aac:      	addne	r3, #0x1
 8000aae:      	and	r1, r5, #0xc0
 8000ab2:      	ldrb	r5, [r6, #-12]
 8000ab6:      	cmp	r1, #0x80
 8000ab8:      	it	ne
 8000aba:      	addne	r3, #0x1
 8000abc:      	and	r1, r4, #0xc0
 8000ac0:      	ldrb	r4, [r6, #-11]
 8000ac4:      	cmp	r1, #0x80
 8000ac6:      	it	ne
 8000ac8:      	addne	r3, #0x1
 8000aca:      	and	r1, r5, #0xc0
 8000ace:      	ldrb	r5, [r6, #-10]
 8000ad2:      	cmp	r1, #0x80
 8000ad4:      	it	ne
 8000ad6:      	addne	r3, #0x1
 8000ad8:      	and	r1, r4, #0xc0
 8000adc:      	ldrb	r4, [r6, #-9]
 8000ae0:      	cmp	r1, #0x80
 8000ae2:      	it	ne
 8000ae4:      	addne	r3, #0x1
 8000ae6:      	and	r1, r5, #0xc0
 8000aea:      	ldrb	r5, [r6, #-8]
 8000aee:      	cmp	r1, #0x80
 8000af0:      	it	ne
 8000af2:      	addne	r3, #0x1
 8000af4:      	and	r1, r4, #0xc0
 8000af8:      	ldrb	r4, [r6, #-7]
 8000afc:      	cmp	r1, #0x80
 8000afe:      	it	ne
 8000b00:      	addne	r3, #0x1
 8000b02:      	and	r1, r5, #0xc0
 8000b06:      	ldrb	r5, [r6, #-6]
 8000b0a:      	cmp	r1, #0x80
 8000b0c:      	it	ne
 8000b0e:      	addne	r3, #0x1
 8000b10:      	and	r1, r4, #0xc0
 8000b14:      	cmp	r1, #0x80
 8000b16:      	ldrb	r4, [r6, #-4]
 8000b1a:      	it	ne
 8000b1c:      	addne	r3, #0x1
 8000b1e:      	and	r1, r5, #0xc0
 8000b22:      	ldrb	r5, [r6, #-5]
 8000b26:      	cmp	r1, #0x80
 8000b28:      	it	ne
 8000b2a:      	addne	r3, #0x1
 8000b2c:      	and	r1, r5, #0xc0
 8000b30:      	cmp	r1, #0x80
 8000b32:      	and	r1, r4, #0xc0
 8000b36:      	it	ne
 8000b38:      	addne	r3, #0x1
 8000b3a:      	cmp	r1, #0x80
 8000b3c:      	and	r1, r2, #0xc0
 8000b40:      	it	ne
 8000b42:      	addne	r3, #0x1
 8000b44:      	cmp	r1, #0x80
 8000b46:      	and	r1, r8, #0xc0
 8000b4a:      	it	ne
 8000b4c:      	addne	r3, #0x1
 8000b4e:      	cmp	r1, #0x80
 8000b50:      	and	r1, lr, #0xc0
 8000b54:      	it	ne
 8000b56:      	addne	r3, #0x1
 8000b58:      	cmp	r1, #0x80
 8000b5a:      	it	ne
 8000b5c:      	addne	r3, #0x1
 8000b5e:      	adds.w	r10, r10, #0x4
 8000b62:      	bne	#-0xe8 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x3ba>
 8000b64:      	ldrd	lr, r8, [sp, #4]
 8000b68:      	cmp.w	r12, #0x0
 8000b6c:      	beq.w	#0x10a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5b6>
 8000b70:      	ldrb	r1, [r6]
 8000b72:      	ldrb	r2, [r6, #0x1]
 8000b74:      	and	r1, r1, #0xc0
 8000b78:      	ldrb	r5, [r6, #0x2]
 8000b7a:      	cmp	r1, #0x80
 8000b7c:      	ldrb	r4, [r6, #0x3]
 8000b7e:      	and	r1, r2, #0xc0
 8000b82:      	it	ne
 8000b84:      	addne	r3, #0x1
 8000b86:      	cmp	r1, #0x80
 8000b88:      	and	r1, r5, #0xc0
 8000b8c:      	it	ne
 8000b8e:      	addne	r3, #0x1
 8000b90:      	cmp	r1, #0x80
 8000b92:      	and	r1, r4, #0xc0
 8000b96:      	it	ne
 8000b98:      	addne	r3, #0x1
 8000b9a:      	cmp	r1, #0x80
 8000b9c:      	it	ne
 8000b9e:      	addne	r3, #0x1
 8000ba0:      	cmp.w	r12, #0x1
 8000ba4:      	bne	#0x2 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x4e6>
 8000ba6:      	adds	r6, #0x4
 8000ba8:      	b	#0xce <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5b6>
 8000baa:      	ldrb	r1, [r6, #0x4]
 8000bac:      	ldrb	r2, [r6, #0x5]
 8000bae:      	and	r1, r1, #0xc0
 8000bb2:      	ldrb	r5, [r6, #0x6]
 8000bb4:      	cmp	r1, #0x80
 8000bb6:      	ldrb	r4, [r6, #0x7]
 8000bb8:      	and	r1, r2, #0xc0
 8000bbc:      	it	ne
 8000bbe:      	addne	r3, #0x1
 8000bc0:      	cmp	r1, #0x80
 8000bc2:      	and	r1, r5, #0xc0
 8000bc6:      	it	ne
 8000bc8:      	addne	r3, #0x1
 8000bca:      	cmp	r1, #0x80
 8000bcc:      	and	r1, r4, #0xc0
 8000bd0:      	it	ne
 8000bd2:      	addne	r3, #0x1
 8000bd4:      	cmp	r1, #0x80
 8000bd6:      	it	ne
 8000bd8:      	addne	r3, #0x1
 8000bda:      	cmp.w	r12, #0x2
 8000bde:      	bne	#0x66 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x584>
 8000be0:      	adds	r6, #0x8
 8000be2:      	b	#0x94 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5b6>
 8000be4:      	movs	r4, #0x0
 8000be6:      	mov	r6, r12
 8000be8:      	cmp	r3, #0xf0
 8000bea:      	blo.w	#-0x432 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xf8>
 8000bee:      	and	r3, r3, #0x7
 8000bf2:      	cmp	r6, r12
 8000bf4:      	itte	ne
 8000bf6:      	ldrbne	r6, [r6]
 8000bf8:      	andne	r6, r6, #0x3f
 8000bfc:      	moveq	r6, #0x0
 8000bfe:      	orr.w	r1, r1, r3, lsl #18
 8000c02:      	orrs	r1, r4
 8000c04:      	orrs	r1, r6
 8000c06:      	cmp.w	r1, #0x110000
 8000c0a:      	bne.w	#-0x452 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xf8>
 8000c0e:      	mov	r2, r9
 8000c10:      	cmp.w	lr, #0x1
 8000c14:      	bne.w	#-0x2aa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2aa>
 8000c18:      	mov	r9, r2
 8000c1a:      	cmp.w	r9, #0x0
 8000c1e:      	bne.w	#-0x538 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x26>
 8000c22:      	ldr.w	r11, [r0, #0xc]
 8000c26:      	cmp.w	r11, #0x0
 8000c2a:      	beq	#0x2 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x56c>
 8000c2c:      	movs	r3, #0x0
 8000c2e:      	b	#0x7e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5ec>
 8000c30:      	ldr	r1, [r0, #0x18]
 8000c32:      	mov	r2, r9
 8000c34:      	ldr	r0, [r0, #0x1c]
 8000c36:      	ldr	r3, [r0, #0xc]
 8000c38:      	mov	r0, r1
 8000c3a:      	mov	r1, r8
 8000c3c:      	add	sp, #0xc
 8000c3e:      	pop.w	{r8, r9, r10, r11}
 8000c42:      	pop.w	{r4, r5, r6, r7, lr}
 8000c46:      	bx	r3
 8000c48:      	ldrb	r1, [r6, #0x8]
 8000c4a:      	ldrb	r2, [r6, #0x9]
 8000c4c:      	and	r1, r1, #0xc0
 8000c50:      	ldrb	r5, [r6, #0xa]
 8000c52:      	ldrb	r4, [r6, #0xb]
 8000c54:      	cmp	r1, #0x80
 8000c56:      	it	ne
 8000c58:      	addne	r3, #0x1
 8000c5a:      	and	r1, r2, #0xc0
 8000c5e:      	cmp	r1, #0x80
 8000c60:      	it	ne
 8000c62:      	addne	r3, #0x1
 8000c64:      	and	r1, r5, #0xc0
 8000c68:      	adds	r6, #0xc
 8000c6a:      	cmp	r1, #0x80
 8000c6c:      	it	ne
 8000c6e:      	addne	r3, #0x1
 8000c70:      	and	r1, r4, #0xc0
 8000c74:      	cmp	r1, #0x80
 8000c76:      	it	ne
 8000c78:      	addne	r3, #0x1
 8000c7a:      	cmp.w	lr, #0x0
 8000c7e:      	beq	#0x2e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5ec>
 8000c80:      	ldrb	r1, [r6]
 8000c82:      	and	r1, r1, #0xc0
 8000c86:      	cmp	r1, #0x80
 8000c88:      	it	ne
 8000c8a:      	addne	r3, #0x1
 8000c8c:      	cmp.w	lr, #0x1
 8000c90:      	beq	#0x1c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5ec>
 8000c92:      	ldrb	r1, [r6, #0x1]
 8000c94:      	and	r1, r1, #0xc0
 8000c98:      	cmp	r1, #0x80
 8000c9a:      	it	ne
 8000c9c:      	addne	r3, #0x1
 8000c9e:      	cmp.w	lr, #0x2
 8000ca2:      	beq	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x5ec>
 8000ca4:      	ldrb	r1, [r6, #0x2]
 8000ca6:      	and	r1, r1, #0xc0
 8000caa:      	cmp	r1, #0x80
 8000cac:      	it	ne
 8000cae:      	addne	r3, #0x1
 8000cb0:      	ldrb.w	r2, [r0, #0x20]
 8000cb4:      	subs	r1, r2, #0x3
 8000cb6:      	it	ne
 8000cb8:      	movne	r1, r2
 8000cba:      	lsls	r2, r1, #0x1e
 8000cbc:      	sub.w	r2, r11, r3
 8000cc0:      	str.w	r8, [sp, #0x8]
 8000cc4:      	beq	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x60e>
 8000cc6:      	cmp	r1, #0x1
 8000cc8:      	bne	#0xc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x614>
 8000cca:      	mov.w	r11, #0x0
 8000cce:      	mov	r1, r2
 8000cd0:      	b	#0xc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x61c>
 8000cd2:      	movs	r1, #0x0
 8000cd4:      	mov	r11, r2
 8000cd6:      	b	#0x6 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x61c>
 8000cd8:      	lsrs	r1, r2, #0x1
 8000cda:      	adds	r2, #0x1
 8000cdc:      	lsr.w	r11, r2, #0x1
 8000ce0:      	ldr	r6, [r0, #0x4]
 8000ce2:      	adds	r4, r1, #0x1
 8000ce4:      	ldrd	r8, r5, [r0, #24]
 8000ce8:      	subs	r4, #0x1
 8000cea:      	beq	#0xc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x636>
 8000cec:      	ldr	r2, [r5, #0x10]
 8000cee:      	mov	r0, r8
 8000cf0:      	mov	r1, r6
 8000cf2:      	blx	r2
 8000cf4:      	cmp	r0, #0x0
 8000cf6:      	beq	#-0x12 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x624>
 8000cf8:      	b	#0x18 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x650>
 8000cfa:      	subs.w	r10, r6, #0x110000
 8000cfe:      	it	ne
 8000d00:      	movne	r10, r11
 8000d02:      	cmp.w	r6, #0x110000
 8000d06:      	beq	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x650>
 8000d08:      	ldr	r3, [r5, #0xc]
 8000d0a:      	mov	r0, r8
 8000d0c:      	ldr	r1, [sp, #0x8]
 8000d0e:      	mov	r2, r9
 8000d10:      	blx	r3
 8000d12:      	cbz	r0, #0x8
 8000d14:      	movs	r0, #0x1
 8000d16:      	add	sp, #0xc
 8000d18:      	pop.w	{r8, r9, r10, r11}
 8000d1c:      	pop	{r4, r5, r6, r7, pc}
 8000d1e:      	movs	r4, #0x0
 8000d20:      	cmp	r10, r4
 8000d22:      	beq	#0x10 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x672>
 8000d24:      	ldr	r2, [r5, #0x10]
 8000d26:      	mov	r0, r8
 8000d28:      	mov	r1, r6
 8000d2a:      	blx	r2
 8000d2c:      	adds	r4, #0x1
 8000d2e:      	cmp	r0, #0x0
 8000d30:      	beq	#-0x14 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x65c>
 8000d32:      	subs	r1, r4, #0x1
 8000d34:      	b	#0x0 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x674>
 8000d36:      	mov	r1, r10
 8000d38:      	movs	r0, #0x0
 8000d3a:      	cmp	r1, r10
 8000d3c:      	it	lo
 8000d3e:      	movlo	r0, #0x1
 8000d40:      	add	sp, #0xc
 8000d42:      	pop.w	{r8, r9, r10, r11}
 8000d46:      	pop	{r4, r5, r6, r7, pc}

08000d48 <core::panicking::panic::hf9de56380a5a0992>:
 8000d48:      	push	{r7, lr}
 8000d4a:      	mov	r7, sp
 8000d4c:      	sub	sp, #0x20
 8000d4e:      	mov	r1, r0
 8000d50:      	movs	r0, #0x0
 8000d52:      	str	r0, [sp, #0x14]
 8000d54:      	movw	r2, #0x153c
 8000d58:      	strd	r0, r0, [sp, #8]
 8000d5c:      	movs	r0, #0x1
 8000d5e:      	str	r0, [sp, #0x4]
 8000d60:      	add	r0, sp, #0x18
 8000d62:      	str	r0, [sp]
 8000d64:      	movs	r0, #0x2b
 8000d66:      	str	r0, [sp, #0x1c]
 8000d68:      	movw	r0, #0x13b4
 8000d6c:      	movt	r0, #0x800
 8000d70:      	movt	r2, #0x800
 8000d74:      	str	r0, [sp, #0x18]
 8000d76:      	mov	r0, sp
 8000d78:      	str	r2, [sp, #0x10]
 8000d7a:      	bl	#-0x726
 8000d7e:      	trap

08000d80 <<&T as core::fmt::Display>::fmt::h8c100d326d3e7dcc>:
 8000d80:      	mov	r3, r1
 8000d82:      	ldrd	r1, r2, [r0]
 8000d86:      	mov	r0, r3
 8000d88:      	b.w	#-0x6c8 <core::fmt::Formatter::pad::h5f277c03c05ffc94>

08000d8c <core::fmt::write::hf6feac855f1cc27a>:
 8000d8c:      	push	{r4, r5, r6, r7, lr}
 8000d8e:      	add	r7, sp, #0xc
 8000d90:      	push.w	{r8, r9, r10, r11}
 8000d94:      	sub	sp, #0x34
 8000d96:      	mov	r8, r2
 8000d98:      	movs	r2, #0x3
 8000d9a:      	str	r1, [sp, #0x2c]
 8000d9c:      	ldr.w	r1, [r8, #0x8]
 8000da0:      	strb.w	r2, [sp, #0x30]
 8000da4:      	movs	r2, #0x20
 8000da6:      	str	r2, [sp, #0x14]
 8000da8:      	movs	r2, #0x0
 8000daa:      	cmp	r1, #0x0
 8000dac:      	str	r2, [sp, #0x10]
 8000dae:      	str	r0, [sp, #0x28]
 8000db0:      	str	r2, [sp, #0x20]
 8000db2:      	str	r2, [sp, #0x18]
 8000db4:      	str	r1, [sp, #0xc]
 8000db6:      	beq	#0xdc <core::fmt::write::hf6feac855f1cc27a+0x10a>
 8000db8:      	ldr.w	r10, [r8, #0xc]
 8000dbc:      	ldrd	r11, r2, [r8]
 8000dc0:      	cmp	r10, r2
 8000dc2:      	it	hi
 8000dc4:      	movhi	r10, r2
 8000dc6:      	cmp.w	r10, #0x0
 8000dca:      	beq.w	#0x11c <core::fmt::write::hf6feac855f1cc27a+0x15e>
 8000dce:      	ldr	r0, [sp, #0xc]
 8000dd0:      	mov.w	r9, #0x0
 8000dd4:      	str	r2, [sp, #0x4]
 8000dd6:      	add.w	r5, r0, #0x10
 8000dda:      	str.w	r10, [sp, #0x8]
 8000dde:      	add.w	r0, r11, r9
 8000de2:      	ldr	r2, [r0, #0x4]
 8000de4:      	cbz	r2, #0x10
 8000de6:      	ldrd	r0, r3, [sp, #40]
 8000dea:      	ldr.w	r1, [r11, r9]
 8000dee:      	ldr	r3, [r3, #0xc]
 8000df0:      	blx	r3
 8000df2:      	cmp	r0, #0x0
 8000df4:      	bne.w	#0x110 <core::fmt::write::hf6feac855f1cc27a+0x17c>
 8000df8:      	ldr	r0, [sp, #0xc]
 8000dfa:      	ldr.w	r1, [r8, #0x10]
 8000dfe:      	add.w	r0, r0, r9, lsl #2
 8000e02:      	ldrd	r4, r6, [r0, #4]
 8000e06:      	ldrd	r3, r2, [r0, #20]
 8000e0a:      	strd	r6, r4, [sp, #16]
 8000e0e:      	ldrb	r6, [r0, #0x1c]
 8000e10:      	strb.w	r6, [sp, #0x30]
 8000e14:      	cbz	r3, #0x1e
 8000e16:      	cmp	r3, #0x1
 8000e18:      	bne	#0x10 <core::fmt::write::hf6feac855f1cc27a+0xa0>
 8000e1a:      	add.w	r3, r1, r2, lsl #3
 8000e1e:      	movw	r6, #0x3d5
 8000e22:      	movt	r6, #0x800
 8000e26:      	ldr	r3, [r3, #0x4]
 8000e28:      	cmp	r3, r6
 8000e2a:      	beq	#0x2 <core::fmt::write::hf6feac855f1cc27a+0xa4>
 8000e2c:      	movs	r3, #0x0
 8000e2e:      	b	#0x6 <core::fmt::write::hf6feac855f1cc27a+0xac>
 8000e30:      	ldr.w	r2, [r1, r2, lsl #3]
 8000e34:      	ldr	r2, [r2]
 8000e36:      	movs	r3, #0x1
 8000e38:      	strd	r3, r2, [sp, #24]
 8000e3c:      	ldr	r0, [r0, #0xc]
 8000e3e:      	ldr	r2, [r5]
 8000e40:      	cbz	r0, #0x1e
 8000e42:      	cmp	r0, #0x1
 8000e44:      	bne	#0x10 <core::fmt::write::hf6feac855f1cc27a+0xcc>
 8000e46:      	add.w	r0, r1, r2, lsl #3
 8000e4a:      	movw	r3, #0x3d5
 8000e4e:      	movt	r3, #0x800
 8000e52:      	ldr	r0, [r0, #0x4]
 8000e54:      	cmp	r0, r3
 8000e56:      	beq	#0x2 <core::fmt::write::hf6feac855f1cc27a+0xd0>
 8000e58:      	movs	r3, #0x0
 8000e5a:      	b	#0x6 <core::fmt::write::hf6feac855f1cc27a+0xd8>
 8000e5c:      	ldr.w	r0, [r1, r2, lsl #3]
 8000e60:      	ldr	r2, [r0]
 8000e62:      	movs	r3, #0x1
 8000e64:      	ldr	r6, [r5, #-16]
 8000e68:      	str	r2, [sp, #0x24]
 8000e6a:      	ldr.w	r0, [r1, r6, lsl #3]
 8000e6e:      	add.w	r1, r1, r6, lsl #3
 8000e72:      	ldr	r2, [r1, #0x4]
 8000e74:      	add	r1, sp, #0x10
 8000e76:      	str	r3, [sp, #0x20]
 8000e78:      	blx	r2
 8000e7a:      	cmp	r0, #0x0
 8000e7c:      	bne	#0x88 <core::fmt::write::hf6feac855f1cc27a+0x17c>
 8000e7e:      	subs.w	r10, r10, #0x1
 8000e82:      	add.w	r9, r9, #0x8
 8000e86:      	add.w	r5, r5, #0x20
 8000e8a:      	bne	#-0xb0 <core::fmt::write::hf6feac855f1cc27a+0x52>
 8000e8c:      	ldrd	r2, r0, [sp, #4]
 8000e90:      	cmp	r0, r2
 8000e92:      	blo	#0x5a <core::fmt::write::hf6feac855f1cc27a+0x164>
 8000e94:      	b	#0x7a <core::fmt::write::hf6feac855f1cc27a+0x186>
 8000e96:      	ldr.w	r0, [r8, #0x14]
 8000e9a:      	ldrd	r11, r2, [r8]
 8000e9e:      	cmp	r0, r2
 8000ea0:      	it	hi
 8000ea2:      	movhi	r0, r2
 8000ea4:      	cbz	r0, #0x42
 8000ea6:      	ldr.w	r5, [r8, #0x10]
 8000eaa:      	add.w	r9, sp, #0x10
 8000eae:      	mov	r10, r2
 8000eb0:      	movs	r4, #0x0
 8000eb2:      	mov	r6, r0
 8000eb4:      	add.w	r0, r11, r4, lsl #3
 8000eb8:      	ldr	r2, [r0, #0x4]
 8000eba:      	cbz	r2, #0xc
 8000ebc:      	ldrd	r0, r3, [sp, #40]
 8000ec0:      	ldr.w	r1, [r11, r4, lsl #3]
 8000ec4:      	ldr	r3, [r3, #0xc]
 8000ec6:      	blx	r3
 8000ec8:      	cbnz	r0, #0x3c
 8000eca:      	add.w	r1, r5, r4, lsl #3
 8000ece:      	ldr.w	r0, [r5, r4, lsl #3]
 8000ed2:      	ldr	r2, [r1, #0x4]
 8000ed4:      	mov	r1, r9
 8000ed6:      	blx	r2
 8000ed8:      	cbnz	r0, #0x2c
 8000eda:      	adds	r4, #0x1
 8000edc:      	mov	r0, r6
 8000ede:      	cmp	r6, r4
 8000ee0:      	bne	#-0x32 <core::fmt::write::hf6feac855f1cc27a+0x126>
 8000ee2:      	mov	r2, r10
 8000ee4:      	cmp	r0, r2
 8000ee6:      	bhs	#0x28 <core::fmt::write::hf6feac855f1cc27a+0x186>
 8000ee8:      	b	#0x4 <core::fmt::write::hf6feac855f1cc27a+0x164>
 8000eea:      	movs	r0, #0x0
 8000eec:      	cmp	r0, r2
 8000eee:      	bhs	#0x20 <core::fmt::write::hf6feac855f1cc27a+0x186>
 8000ef0:      	mov	r1, r0
 8000ef2:      	ldrd	r0, r3, [sp, #40]
 8000ef6:      	mov	r2, r1
 8000ef8:      	ldr.w	r1, [r11, r1, lsl #3]
 8000efc:      	add.w	r2, r11, r2, lsl #3
 8000f00:      	ldr	r3, [r3, #0xc]
 8000f02:      	ldr	r2, [r2, #0x4]
 8000f04:      	blx	r3
 8000f06:      	cbz	r0, #0x8
 8000f08:      	movs	r0, #0x1
 8000f0a:      	add	sp, #0x34
 8000f0c:      	pop.w	{r8, r9, r10, r11}
 8000f10:      	pop	{r4, r5, r6, r7, pc}
 8000f12:      	movs	r0, #0x0
 8000f14:      	add	sp, #0x34
 8000f16:      	pop.w	{r8, r9, r10, r11}
 8000f1a:      	pop	{r4, r5, r6, r7, pc}

08000f1c <<&T as core::fmt::Display>::fmt::hd61d75bec2aa40a2>:
 8000f1c:      	push	{r4, r5, r6, r7, lr}
 8000f1e:      	add	r7, sp, #0xc
 8000f20:      	push.w	{r8, r9, r11}
 8000f24:      	sub	sp, #0x18
 8000f26:      	ldr.w	lr, [r0]
 8000f2a:      	mov	r2, sp
 8000f2c:      	ldrd	r12, r1, [r1, #24]
 8000f30:      	mov	r3, r2
 8000f32:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 8000f36:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 8000f3a:      	mov	r0, r12
 8000f3c:      	bl	#-0x1b4
 8000f40:      	add	sp, #0x18
 8000f42:      	pop.w	{r8, r9, r11}
 8000f46:      	pop	{r4, r5, r6, r7, pc}

08000f48 <<&T as core::fmt::Display>::fmt::hd9cdbae69889b66a>:
 8000f48:      	ldr	r0, [r0]
 8000f4a:      	mov	r3, r1
 8000f4c:      	ldrd	r1, r2, [r0]
 8000f50:      	mov	r0, r3
 8000f52:      	b.w	#-0x892 <core::fmt::Formatter::pad::h5f277c03c05ffc94>

08000f56 <cortex_m::itm::write_all::hf6bcea496e45bb35>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 8000f56:      	push	{r4, r5, r7, lr}
 8000f58:      	add	r7, sp, #0x8
;         if len == 0 {
 8000f5a:      	cmp	r2, #0x0
 8000f5c:      	beq	#0xe0 <cortex_m::itm::write_all::hf6bcea496e45bb35+0xea>
;         if ptr as usize % 2 == 1 {
 8000f5e:      	lsls	r3, r1, #0x1f
 8000f60:      	beq	#0x20 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x2e>
 8000f62:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 8000f64:      	lsls	r3, r3, #0x1f
 8000f66:      	itttt	eq
 8000f68:      	ldreq	r3, [r0]
;             while !port.is_fifo_ready() {}
 8000f6a:      	lslseq.w	r3, r3, #0x1f
 8000f6e:      	ldreq	r3, [r0]
;             while !port.is_fifo_ready() {}
 8000f70:      	lslseq.w	r3, r3, #0x1f
 8000f74:      	bne	#0x4 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x26>
 8000f76:      	ldr	r3, [r0]
;             while !port.is_fifo_ready() {}
 8000f78:      	lsls	r3, r3, #0x1f
 8000f7a:      	beq	#-0x1c <cortex_m::itm::write_all::hf6bcea496e45bb35+0xc>
;             port.write_u8(*ptr);
 8000f7c:      	ldrb	r3, [r1], #1
;             len -= 1;
 8000f80:      	subs	r2, #0x1
 8000f82:      	strb	r3, [r0]
;         if ptr as usize % 4 == 2 {
 8000f84:      	and	r3, r1, #0x3
 8000f88:      	cmp	r3, #0x2
 8000f8a:      	bne	#0x24 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x5c>
;             if len > 1 {
 8000f8c:      	cmp	r2, #0x2
 8000f8e:      	blo	#0xb0 <cortex_m::itm::write_all::hf6bcea496e45bb35+0xec>
 8000f90:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8000f92:      	lsls	r3, r3, #0x1f
 8000f94:      	itttt	eq
 8000f96:      	ldreq	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8000f98:      	lslseq.w	r3, r3, #0x1f
 8000f9c:      	ldreq	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8000f9e:      	lslseq.w	r3, r3, #0x1f
 8000fa2:      	bne	#0x4 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x54>
 8000fa4:      	ldr	r3, [r0]
;                 while !port.is_fifo_ready() {}
 8000fa6:      	lsls	r3, r3, #0x1f
 8000fa8:      	beq	#-0x1c <cortex_m::itm::write_all::hf6bcea496e45bb35+0x3a>
;                 port.write_u16(ptr::read(ptr as *const u16));
 8000faa:      	ldrh	r3, [r1], #2
;                 len -= 2;
 8000fae:      	subs	r2, #0x2
 8000fb0:      	strh	r3, [r0]
;     if len == 0 {
 8000fb2:      	cmp	r2, #0x0
 8000fb4:      	beq	#0x88 <cortex_m::itm::write_all::hf6bcea496e45bb35+0xea>
;     let split = len & !0b11;
 8000fb6:      	bic	r12, r2, #0x3
 8000fba:      	movs	r3, #0x0
 8000fbc:      	cmp.w	r3, r2, lsr #2
 8000fc0:      	beq	#0x30 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x9e>
 8000fc2:      	lsr.w	lr, r2, #0x2
 8000fc6:      	movs	r3, #0x0
 8000fc8:      	mov	r4, r1
 8000fca:      	b	#0xa <cortex_m::itm::write_all::hf6bcea496e45bb35+0x82>
;         stim.write_u32(ptr::read(p));
 8000fcc:      	ldr	r5, [r4], #4
 8000fd0:      	adds	r3, #0x1
 8000fd2:      	cmp	r3, lr
 8000fd4:      	str	r5, [r0]
 8000fd6:      	beq	#0x1a <cortex_m::itm::write_all::hf6bcea496e45bb35+0x9e>
 8000fd8:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 8000fda:      	lsls	r5, r5, #0x1f
 8000fdc:      	itttt	eq
 8000fde:      	ldreq	r5, [r0]
;         while !stim.is_fifo_ready() {}
 8000fe0:      	lslseq.w	r5, r5, #0x1f
 8000fe4:      	ldreq	r5, [r0]
;         while !stim.is_fifo_ready() {}
 8000fe6:      	lslseq.w	r5, r5, #0x1f
 8000fea:      	bne	#-0x22 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x76>
 8000fec:      	ldr	r5, [r0]
;         while !stim.is_fifo_ready() {}
 8000fee:      	lsls	r5, r5, #0x1f
 8000ff0:      	beq	#-0x1c <cortex_m::itm::write_all::hf6bcea496e45bb35+0x82>
 8000ff2:      	b	#-0x2a <cortex_m::itm::write_all::hf6bcea496e45bb35+0x76>
;     let mut left = len & 0b11;
 8000ff4:      	and	r2, r2, #0x3
 8000ff8:      	add	r1, r12
;     if left > 1 {
 8000ffa:      	cmp	r2, #0x2
 8000ffc:      	blo	#0x20 <cortex_m::itm::write_all::hf6bcea496e45bb35+0xca>
 8000ffe:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 8001000:      	lsls	r3, r3, #0x1f
 8001002:      	itttt	eq
 8001004:      	ldreq	r3, [r0]
;         while !port.is_fifo_ready() {}
 8001006:      	lslseq.w	r3, r3, #0x1f
 800100a:      	ldreq	r3, [r0]
;         while !port.is_fifo_ready() {}
 800100c:      	lslseq.w	r3, r3, #0x1f
 8001010:      	bne	#0x4 <cortex_m::itm::write_all::hf6bcea496e45bb35+0xc2>
 8001012:      	ldr	r3, [r0]
;         while !port.is_fifo_ready() {}
 8001014:      	lsls	r3, r3, #0x1f
 8001016:      	beq	#-0x1c <cortex_m::itm::write_all::hf6bcea496e45bb35+0xa8>
;         port.write_u16(ptr::read(ptr as *const u16));
 8001018:      	ldrh	r3, [r1], #2
;         left -= 2;
 800101c:      	subs	r2, #0x2
 800101e:      	strh	r3, [r0]
;     if left == 1 {
 8001020:      	cmp	r2, #0x1
 8001022:      	bne	#0x1a <cortex_m::itm::write_all::hf6bcea496e45bb35+0xea>
 8001024:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 8001026:      	lsls	r2, r2, #0x1f
 8001028:      	itttt	eq
 800102a:      	ldreq	r2, [r0]
;         while !port.is_fifo_ready() {}
 800102c:      	lslseq.w	r2, r2, #0x1f
 8001030:      	ldreq	r2, [r0]
;         while !port.is_fifo_ready() {}
 8001032:      	lslseq.w	r2, r2, #0x1f
 8001036:      	bne	#0x28 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x10c>
 8001038:      	ldr	r2, [r0]
;         while !port.is_fifo_ready() {}
 800103a:      	lsls	r2, r2, #0x1f
 800103c:      	beq	#-0x1c <cortex_m::itm::write_all::hf6bcea496e45bb35+0xce>
 800103e:      	b	#0x20 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x10c>
; }
 8001040:      	pop	{r4, r5, r7, pc}
;                 if len == 1 {
 8001042:      	cmp	r2, #0x1
; }
 8001044:      	it	ne
 8001046:      	popne	{r4, r5, r7, pc}
 8001048:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 800104a:      	lsls	r2, r2, #0x1f
 800104c:      	bne	#0x12 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x10c>
 800104e:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 8001050:      	lsls	r2, r2, #0x1f
 8001052:      	itt	eq
 8001054:      	ldreq	r2, [r0]
;                     while !port.is_fifo_ready() {}
 8001056:      	lslseq.w	r2, r2, #0x1f
 800105a:      	bne	#0x4 <cortex_m::itm::write_all::hf6bcea496e45bb35+0x10c>
 800105c:      	ldr	r2, [r0]
;                     while !port.is_fifo_ready() {}
 800105e:      	lsls	r2, r2, #0x1f
 8001060:      	beq	#-0x1c <cortex_m::itm::write_all::hf6bcea496e45bb35+0xf2>
 8001062:      	ldrb	r1, [r1]
 8001064:      	strb	r1, [r0]
; }
 8001066:      	pop	{r4, r5, r7, pc}

08001068 <ResetTrampoline>:
;             fn trampoline() -> ! {
 8001068:      	push	{r7, lr}
 800106a:      	mov	r7, sp
;                 unsafe { main() }
 800106c:      	bl	#-0xe50
 8001070:      	trap

08001072 <WWDG>:
 8001072:      	b	#-0x4 <WWDG>

08001074 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 8001074:      	bx	lr

08001076 <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 8001076:      	push	{r7, lr}
 8001078:      	mov	r7, sp
 800107a:      	sub	sp, #0x30
 800107c:      	str	r0, [sp, #0x4]
;     call_asm!(__cpsid());
 800107e:      	bl	#0x204
;     iprintln!(stim, "{}", info);
 8001082:      	movw	r0, #0x10c9
 8001086:      	movw	r1, #0x154c
;     iprintln!(stim, "{}", info);
 800108a:      	movt	r0, #0x800
 800108e:      	add	r2, sp, #0x18
 8001090:      	str	r0, [sp, #0xc]
 8001092:      	add	r0, sp, #0x4
 8001094:      	str	r0, [sp, #0x8]
 8001096:      	mov.w	r0, #0xe0000000
;     Port(port).write_fmt(args).ok();
 800109a:      	str	r0, [sp, #0x10]
 800109c:      	add	r0, sp, #0x10
 800109e:      	str	r0, [sp, #0x14]
 80010a0:      	movs	r0, #0x1
 80010a2:      	str	r0, [sp, #0x2c]
 80010a4:      	add	r0, sp, #0x8
 80010a6:      	str	r0, [sp, #0x28]
 80010a8:      	movs	r0, #0x0
 80010aa:      	strd	r0, r0, [sp, #32]
 80010ae:      	movs	r0, #0x2
 80010b0:      	str	r0, [sp, #0x1c]
 80010b2:      	movw	r0, #0x153c
 80010b6:      	movt	r0, #0x800
 80010ba:      	movt	r1, #0x800
 80010be:      	str	r0, [sp, #0x18]
 80010c0:      	add	r0, sp, #0x14
 80010c2:      	bl	#-0x33a
 80010c6:      	b	#-0x4 <rust_begin_unwind+0x50>

080010c8 <<&T as core::fmt::Display>::fmt::hadc53b121011d1f3>:
 80010c8:      	push	{r4, r5, r6, r7, lr}
 80010ca:      	add	r7, sp, #0xc
 80010cc:      	str	r8, [sp, #-4]!
 80010d0:      	sub	sp, #0x38
 80010d2:      	ldrd	r4, r5, [r1, #24]
 80010d6:      	movw	r1, #0x1500
 80010da:      	ldr	r3, [r5, #0xc]
 80010dc:      	movt	r1, #0x800
 80010e0:      	ldr.w	r8, [r0]
 80010e4:      	movs	r2, #0xc
 80010e6:      	mov	r0, r4
 80010e8:      	blx	r3
 80010ea:      	cbz	r0, #0xa
 80010ec:      	movs	r6, #0x1
 80010ee:      	mov	r0, r6
 80010f0:      	add	sp, #0x38
 80010f2:      	ldr	r8, [sp], #4
 80010f6:      	pop	{r4, r5, r6, r7, pc}
 80010f8:      	ldr.w	r0, [r8, #0x8]
 80010fc:      	cbz	r0, #0xa
 80010fe:      	str	r0, [sp, #0x4]
 8001100:      	movw	r0, #0xf1d
 8001104:      	movt	r0, #0x800
 8001108:      	b	#0x2a <<&T as core::fmt::Display>::fmt::hadc53b121011d1f3+0x6e>
 800110a:      	ldrd	r6, r0, [r8]
 800110e:      	ldr	r1, [r0, #0xc]
 8001110:      	mov	r0, r6
 8001112:      	blx	r1
 8001114:      	movw	r2, #0xa91e
 8001118:      	movt	r2, #0x7ef2
 800111c:      	eors	r1, r2
 800111e:      	movw	r2, #0xbcf4
 8001122:      	movt	r2, #0xecc7
 8001126:      	eors	r0, r2
 8001128:      	orrs	r0, r1
 800112a:      	bne	#0x38 <<&T as core::fmt::Display>::fmt::hadc53b121011d1f3+0x9e>
 800112c:      	movw	r0, #0xf49
 8001130:      	str	r6, [sp, #0x4]
 8001132:      	movt	r0, #0x800
 8001136:      	str	r0, [sp, #0xc]
 8001138:      	add	r0, sp, #0x4
 800113a:      	str	r0, [sp, #0x8]
 800113c:      	add	r0, sp, #0x8
 800113e:      	str	r0, [sp, #0x30]
 8001140:      	movs	r0, #0x0
 8001142:      	str	r0, [sp, #0x2c]
 8001144:      	add	r2, sp, #0x20
 8001146:      	str	r0, [sp, #0x28]
 8001148:      	movs	r0, #0x2
 800114a:      	str	r0, [sp, #0x24]
 800114c:      	movw	r0, #0x150c
 8001150:      	movt	r0, #0x800
 8001154:      	movs	r6, #0x1
 8001156:      	str	r0, [sp, #0x20]
 8001158:      	mov	r0, r4
 800115a:      	mov	r1, r5
 800115c:      	str	r6, [sp, #0x34]
 800115e:      	bl	#-0x3d6
 8001162:      	cmp	r0, #0x0
 8001164:      	bne	#-0x7a <<&T as core::fmt::Display>::fmt::hadc53b121011d1f3+0x26>
 8001166:      	ldr.w	r0, [r8, #0xc]
 800116a:      	movw	r1, #0x3d9
 800116e:      	movt	r1, #0x800
 8001172:      	add.w	r2, r0, #0xc
 8001176:      	str	r1, [sp, #0x1c]
 8001178:      	strd	r1, r2, [sp, #20]
 800117c:      	add.w	r1, r0, #0x8
 8001180:      	str	r1, [sp, #0x10]
 8001182:      	movw	r1, #0xd81
 8001186:      	movt	r1, #0x800
 800118a:      	add	r2, sp, #0x20
 800118c:      	strd	r0, r1, [sp, #8]
 8001190:      	add	r1, sp, #0x8
 8001192:      	movs	r0, #0x3
 8001194:      	str	r1, [sp, #0x30]
 8001196:      	movs	r1, #0x0
 8001198:      	str	r0, [sp, #0x34]
 800119a:      	strd	r0, r1, [sp, #36]
 800119e:      	movw	r0, #0x151c
 80011a2:      	movt	r0, #0x800
 80011a6:      	str	r1, [sp, #0x2c]
 80011a8:      	str	r0, [sp, #0x20]
 80011aa:      	mov	r0, r4
 80011ac:      	mov	r1, r5
 80011ae:      	bl	#-0x426
 80011b2:      	mov	r6, r0
 80011b4:      	mov	r0, r6
 80011b6:      	add	sp, #0x38
 80011b8:      	ldr	r8, [sp], #4
 80011bc:      	pop	{r4, r5, r6, r7, pc}

080011be <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::ha49d6fc29c90870f>:
 80011be:      	bx	lr

080011c0 <<&mut W as core::fmt::Write>::write_str::hf70a4a5527588d81>:
 80011c0:      	push	{r7, lr}
 80011c2:      	mov	r7, sp
 80011c4:      	ldr	r0, [r0]
 80011c6:      	ldr	r0, [r0]
;         write_all(self.0, s.as_bytes());
 80011c8:      	bl	#-0x276
 80011cc:      	movs	r0, #0x0
 80011ce:      	pop	{r7, pc}

080011d0 <<&mut W as core::fmt::Write>::write_char::h2de56ec6ecf88e6b>:
 80011d0:      	push	{r7, lr}
 80011d2:      	mov	r7, sp
 80011d4:      	sub	sp, #0x8
 80011d6:      	ldr	r0, [r0]
 80011d8:      	movs	r2, #0x0
 80011da:      	cmp	r1, #0x80
 80011dc:      	str	r2, [sp, #0x4]
 80011de:      	bhs	#0x6 <<&mut W as core::fmt::Write>::write_char::h2de56ec6ecf88e6b+0x18>
 80011e0:      	strb.w	r1, [sp, #0x4]
 80011e4:      	movs	r2, #0x1
 80011e6:      	b	#0x5e <<&mut W as core::fmt::Write>::write_char::h2de56ec6ecf88e6b+0x78>
 80011e8:      	movs	r2, #0x2
 80011ea:      	mov	r3, r1
 80011ec:      	bfi	r3, r2, #6, #26
 80011f0:      	cmp.w	r1, #0x800
 80011f4:      	bhs	#0xa <<&mut W as core::fmt::Write>::write_char::h2de56ec6ecf88e6b+0x32>
 80011f6:      	strb.w	r3, [sp, #0x5]
 80011fa:      	movs	r3, #0xc0
 80011fc:      	orr.w	r1, r3, r1, lsr #6
 8001200:      	b	#0x40 <<&mut W as core::fmt::Write>::write_char::h2de56ec6ecf88e6b+0x74>
 8001202:      	cmp.w	r1, #0x10000
 8001206:      	bhs	#0x1a <<&mut W as core::fmt::Write>::write_char::h2de56ec6ecf88e6b+0x54>
 8001208:      	strb.w	r3, [sp, #0x6]
 800120c:      	lsrs	r3, r1, #0x6
 800120e:      	bfi	r3, r2, #6, #26
 8001212:      	movs	r2, #0xe0
 8001214:      	orr.w	r1, r2, r1, lsr #12
 8001218:      	strb.w	r3, [sp, #0x5]
 800121c:      	strb.w	r1, [sp, #0x4]
 8001220:      	movs	r2, #0x3
 8001222:      	b	#0x22 <<&mut W as core::fmt::Write>::write_char::h2de56ec6ecf88e6b+0x78>
 8001224:      	strb.w	r3, [sp, #0x7]
 8001228:      	lsrs	r3, r1, #0x6
 800122a:      	bfi	r3, r2, #6, #26
 800122e:      	strb.w	r3, [sp, #0x6]
 8001232:      	lsrs	r3, r1, #0xc
 8001234:      	bfi	r3, r2, #6, #26
 8001238:      	movs	r2, #0xf0
 800123a:      	orr.w	r1, r2, r1, lsr #18
 800123e:      	movs	r2, #0x4
 8001240:      	strb.w	r3, [sp, #0x5]
 8001244:      	strb.w	r1, [sp, #0x4]
 8001248:      	ldr	r0, [r0]
 800124a:      	add	r1, sp, #0x4
;         write_all(self.0, s.as_bytes());
 800124c:      	bl	#-0x2fa
 8001250:      	movs	r0, #0x0
 8001252:      	add	sp, #0x8
 8001254:      	pop	{r7, pc}

08001256 <<&mut W as core::fmt::Write>::write_fmt::h2964790c41c0ab38>:
 8001256:      	push	{r4, r5, r6, r7, lr}
 8001258:      	add	r7, sp, #0xc
 800125a:      	str	r11, [sp, #-4]!
 800125e:      	sub	sp, #0x20
 8001260:      	ldr	r0, [r0]
 8001262:      	add	r2, sp, #0x8
 8001264:      	str	r0, [sp, #0x4]
 8001266:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 800126a:      	mov	r0, r2
 800126c:      	movw	r1, #0x154c
 8001270:      	movt	r1, #0x800
 8001274:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8001278:      	add	r0, sp, #0x4
 800127a:      	bl	#-0x4f2
 800127e:      	add	sp, #0x20
 8001280:      	ldr	r11, [sp], #4
 8001284:      	pop	{r4, r5, r6, r7, pc}

08001286 <__cpsid>:
 8001286:      	cpsid i
 8001288:      	bx	lr

0800128a <__cpsie>:
 800128a:      	cpsie i
 800128c:      	bx	lr

0800128e <__primask_r>:
 800128e:      	mrs	r0, primask
 8001292:      	bx	lr

08001294 <__aeabi_memcpy>:
 8001294:      	b.w	#0x86 <memcpy>

08001298 <__aeabi_memcpy4>:
 8001298:      	push	{r4, r5, r7, lr}
 800129a:      	add	r7, sp, #0x8
 800129c:      	cmp	r2, #0x4
 800129e:      	blo	#0x62 <__aeabi_memcpy4+0x6c>
 80012a0:      	sub.w	r12, r2, #0x4
 80012a4:      	movs	r3, #0x1
 80012a6:      	add.w	r3, r3, r12, lsr #2
 80012aa:      	ands	lr, r3, #0x3
 80012ae:      	beq	#0x2e <__aeabi_memcpy4+0x48>
 80012b0:      	mov	r3, r1
 80012b2:      	mov	r4, r0
 80012b4:      	ldr	r5, [r3], #4
 80012b8:      	cmp.w	lr, #0x1
 80012bc:      	str	r5, [r4], #4
 80012c0:      	bne	#0xc <__aeabi_memcpy4+0x38>
 80012c2:      	mov	r2, r12
 80012c4:      	mov	r0, r4
 80012c6:      	mov	r1, r3
 80012c8:      	cmp.w	r12, #0xc
 80012cc:      	bhs	#0x16 <__aeabi_memcpy4+0x4e>
 80012ce:      	b	#0x32 <__aeabi_memcpy4+0x6c>
 80012d0:      	ldr	r3, [r1, #0x4]
 80012d2:      	cmp.w	lr, #0x2
 80012d6:      	str	r3, [r0, #0x4]
 80012d8:      	bne	#0x30 <__aeabi_memcpy4+0x74>
 80012da:      	subs	r2, #0x8
 80012dc:      	adds	r1, #0x8
 80012de:      	adds	r0, #0x8
 80012e0:      	cmp.w	r12, #0xc
 80012e4:      	blo	#0x1c <__aeabi_memcpy4+0x6c>
 80012e6:      	ldr	r3, [r1]
 80012e8:      	subs	r2, #0x10
 80012ea:      	str	r3, [r0]
 80012ec:      	cmp	r2, #0x3
 80012ee:      	ldr	r3, [r1, #0x4]
 80012f0:      	str	r3, [r0, #0x4]
 80012f2:      	ldr	r3, [r1, #0x8]
 80012f4:      	str	r3, [r0, #0x8]
 80012f6:      	ldr	r3, [r1, #0xc]
 80012f8:      	add.w	r1, r1, #0x10
 80012fc:      	str	r3, [r0, #0xc]
 80012fe:      	add.w	r0, r0, #0x10
 8001302:      	bhi	#-0x20 <__aeabi_memcpy4+0x4e>
 8001304:      	pop.w	{r4, r5, r7, lr}
 8001308:      	b.w	#-0x78 <__aeabi_memcpy>
 800130c:      	ldr	r3, [r1, #0x8]
 800130e:      	subs	r2, #0xc
 8001310:      	str	r3, [r0, #0x8]
 8001312:      	adds	r1, #0xc
 8001314:      	adds	r0, #0xc
 8001316:      	cmp.w	r12, #0xc
 800131a:      	bhs	#-0x38 <__aeabi_memcpy4+0x4e>
 800131c:      	b	#-0x1c <__aeabi_memcpy4+0x6c>

0800131e <memcpy>:
 800131e:      	push	{r4, r5, r6, r7, lr}
 8001320:      	add	r7, sp, #0xc
 8001322:      	str	r8, [sp, #-4]!
 8001326:      	cbz	r2, #0x10
 8001328:      	subs	r3, r2, #0x1
 800132a:      	and	r12, r2, #0x3
 800132e:      	cmp	r3, #0x3
 8001330:      	bhs	#0xc <memcpy+0x22>
 8001332:      	movs	r2, #0x0
 8001334:      	cmp.w	r12, #0x0
 8001338:      	bne	#0x3e <memcpy+0x5c>
 800133a:      	ldr	r8, [sp], #4
 800133e:      	pop	{r4, r5, r6, r7, pc}
 8001340:      	bic	r2, r2, #0x3
 8001344:      	add.w	lr, r0, #0x1
 8001348:      	rsbs	r4, r2, #0
 800134a:      	add.w	r8, r1, #0x1
 800134e:      	mvn	r2, #0x3
 8001352:      	add.w	r5, r8, r2
 8001356:      	add.w	r3, lr, r2
 800135a:      	adds	r2, #0x4
 800135c:      	ldrb	r6, [r5, #0x3]
 800135e:      	strb	r6, [r3, #0x3]
 8001360:      	ldrb	r6, [r5, #0x4]
 8001362:      	strb	r6, [r3, #0x4]
 8001364:      	ldrb	r6, [r5, #0x5]
 8001366:      	strb	r6, [r3, #0x5]
 8001368:      	ldrb	r5, [r5, #0x6]
 800136a:      	strb	r5, [r3, #0x6]
 800136c:      	adds	r3, r4, r2
 800136e:      	adds	r3, #0x4
 8001370:      	bne	#-0x22 <memcpy+0x34>
 8001372:      	adds	r2, #0x4
 8001374:      	cmp.w	r12, #0x0
 8001378:      	beq	#-0x42 <memcpy+0x1c>
 800137a:      	ldrb	r3, [r1, r2]
 800137c:      	cmp.w	r12, #0x1
 8001380:      	strb	r3, [r0, r2]
 8001382:      	beq	#-0x4c <memcpy+0x1c>
 8001384:      	adds	r3, r2, #0x1
 8001386:      	cmp.w	r12, #0x2
 800138a:      	ldrb	r6, [r1, r3]
 800138c:      	strb	r6, [r0, r3]
 800138e:      	beq	#-0x58 <memcpy+0x1c>
 8001390:      	adds	r2, #0x2
 8001392:      	ldrb	r1, [r1, r2]
 8001394:      	strb	r1, [r0, r2]
 8001396:      	ldr	r8, [sp], #4
 800139a:      	pop	{r4, r5, r6, r7, pc}

0800139c <HardFaultTrampoline>:
 800139c:      	mov	r0, lr
 800139e:      	movs	r1, #0x4
 80013a0:      	tst	r0, r1
 80013a2:      	bne	#0x4 <HardFaultTrampoline+0xe>
 80013a4:      	mrs	r0, msp
 80013a8:      	b	#0x4 <HardFault_>
 80013aa:      	mrs	r0, psp
 80013ae:      	b	#-0x2 <HardFault_>

080013b0 <HardFault_>:
 80013b0:      	b	#-0x4 <HardFault_>
 80013b2:      	bmi	#-0x58 <memcpy+0x40>
