
registers:	file format elf32-littlearm


Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	#0x137a
 800019c:      	b	#-0x2 <Reset+0xa>
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 800019e:      	movw	r0, #0x0
 80001a2:      	movt	r0, #0x2000
 80001a6:      	movw	r1, #0x4
 80001aa:      	movt	r1, #0x2000
 80001ae:      	bl	#0x1366
 80001b2:      	b	#-0x2 <Reset+0x20>
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 80001b4:      	movw	r0, #0x0
 80001b8:      	movt	r0, #0x2000
 80001bc:      	movw	r1, #0x0
 80001c0:      	movt	r1, #0x2000
 80001c4:      	movw	r2, #0x3964
 80001c8:      	movt	r2, #0x800
 80001cc:      	bl	#0x1398
 80001d0:      	b	#-0x2 <Reset+0x3e>
 80001d2:      	movw	r0, #0xed88
 80001d6:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80001da:      	ldr	r1, [r0]
 80001dc:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80001e0:      	bl	#0x1452
 80001e4:      	b	#-0x2 <Reset+0x52>
;             trampoline()
 80001e6:      	bl	#0x1308
 80001ea:      	trap

080001ec <main>:
; #[entry]
 80001ec:      	push	{r7, lr}
 80001ee:      	mov	r7, sp
 80001f0:      	bl	#0x2
 80001f4:      	trap

080001f6 <registers::__cortex_m_rt_main::hdcfd7b0ae42bb813>:
; fn main() -> ! {
 80001f6:      	push	{r7, lr}
 80001f8:      	mov	r7, sp
;     aux7::init();
 80001fa:      	bl	#0x3e
 80001fe:      	b	#-0x2 <registers::__cortex_m_rt_main::hdcfd7b0ae42bb813+0xa>
;         *(GPIOE_BSRR as *mut u32) = 1 << 9;
 8000200:      	movw	r0, #0x3364
 8000204:      	movt	r0, #0x800
 8000208:      	ldr	r0, [r0]
 800020a:      	movw	r1, #0x1018
 800020e:      	movt	r1, #0x4800
 8000212:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << 11;
 8000214:      	movw	r0, #0x336c
 8000218:      	movt	r0, #0x800
 800021c:      	ldr	r0, [r0]
 800021e:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (9 + 16);
 8000220:      	movw	r0, #0x3374
 8000224:      	movt	r0, #0x800
 8000228:      	ldr	r0, [r0]
 800022a:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (11 + 16);
 800022c:      	movw	r0, #0x335c
 8000230:      	movt	r0, #0x800
 8000234:      	ldr	r0, [r0]
 8000236:      	str	r0, [r1]
;     loop {}
 8000238:      	b	#-0x2 <registers::__cortex_m_rt_main::hdcfd7b0ae42bb813+0x44>
 800023a:      	b	#-0x4 <registers::__cortex_m_rt_main::hdcfd7b0ae42bb813+0x44>

0800023c <aux7::init::hedea1fea328694ca>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 800023c:      	push	{r7, lr}
 800023e:      	mov	r7, sp
 8000240:      	sub	sp, #0x58
;     let device_periphs = stm32::Peripherals::take().unwrap();
 8000242:      	bl	#0xd64
 8000246:      	str	r0, [sp, #0x8]
 8000248:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0xe>
 800024a:      	ldr	r0, [sp, #0x8]
 800024c:      	and	r0, r0, #0x1
 8000250:      	movw	r1, #0x33a4
 8000254:      	movt	r1, #0x800
 8000258:      	bl	#0xcee
 800025c:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0x22>
 800025e:      	add	r0, sp, #0x10
;     let mut reset_and_clock_control = device_periphs.RCC.constrain();
 8000260:      	bl	#0x101a
 8000264:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0x2a>
 8000266:      	add	r0, sp, #0x10
;     let mut gpioe = device_periphs.GPIOE.split(&mut reset_and_clock_control.ahb);
 8000268:      	bl	#0x103a
 800026c:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0x32>
 800026e:      	add	r1, sp, #0x3c
;     let _leds = Leds::new(
 8000270:      	mov	r0, r1
 8000272:      	bl	#0x3c
 8000276:      	str	r1, [sp, #0x54]
 8000278:      	str	r0, [sp, #0x50]
 800027a:      	ldr	r0, [sp, #0x50]
 800027c:      	ldr	r1, [sp, #0x54]
 800027e:      	str	r1, [sp, #0x44]
 8000280:      	str	r0, [sp, #0x40]
 8000282:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0x48>
;     let core_periphs = cortex_m::Peripherals::take().unwrap();
 8000284:      	bl	#0xf22
 8000288:      	str	r0, [sp, #0x4]
 800028a:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0x50>
 800028c:      	ldr	r0, [sp, #0x4]
 800028e:      	and	r0, r0, #0x1
 8000292:      	movw	r1, #0x33b4
 8000296:      	movt	r1, #0x800
 800029a:      	bl	#0xcdc
 800029e:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0x64>
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002a0:      	b	#-0x2 <aux7::init::hedea1fea328694ca+0x66>
 80002a2:      	movw	r0, #0x1000
 80002a6:      	movt	r0, #0x4800
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002aa:      	str	r0, [sp, #0xc]
; }
 80002ac:      	ldr	r0, [sp, #0xc]
 80002ae:      	add	sp, #0x58
 80002b0:      	pop	{r7, pc}

080002b2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1>:
;     pub fn new<PE8Mode, PE9Mode, PE10Mode, PE11Mode, PE12Mode, PE13Mode, PE14Mode, PE15Mode>(
 80002b2:      	push	{r4, r5, r7, lr}
 80002b4:      	add	r7, sp, #0x8
 80002b6:      	sub	sp, #0x78
 80002b8:      	str	r1, [sp, #0x40]
 80002ba:      	str	r0, [sp, #0x44]
 80002bc:      	str	r0, [sp, #0x70]
 80002be:      	str	r1, [sp, #0x74]
;             ld3: pe9
 80002c0:      	bl	#0x384
 80002c4:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x14>
 80002c6:      	bl	#0xb78
 80002ca:      	str	r0, [sp, #0x3c]
 80002cc:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x1c>
 80002ce:      	ldr	r0, [sp, #0x3c]
 80002d0:      	bl	#0x182
 80002d4:      	str	r0, [sp, #0x38]
 80002d6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x26>
;             ld4: pe8
 80002d8:      	ldr	r1, [sp, #0x40]
 80002da:      	ldr	r0, [sp, #0x44]
 80002dc:      	bl	#0x246
 80002e0:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x30>
 80002e2:      	bl	#0xb4c
 80002e6:      	str	r0, [sp, #0x34]
 80002e8:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x38>
 80002ea:      	ldr	r0, [sp, #0x34]
 80002ec:      	bl	#0x166
 80002f0:      	str	r0, [sp, #0x30]
 80002f2:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x42>
;             ld5: pe10
 80002f4:      	ldr	r1, [sp, #0x40]
 80002f6:      	ldr	r0, [sp, #0x44]
 80002f8:      	bl	#0x46e
 80002fc:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x4c>
 80002fe:      	bl	#0xb50
 8000302:      	str	r0, [sp, #0x2c]
 8000304:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x54>
 8000306:      	ldr	r0, [sp, #0x2c]
 8000308:      	bl	#0x14a
 800030c:      	str	r0, [sp, #0x28]
 800030e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x5e>
;             ld6: pe15
 8000310:      	ldr	r1, [sp, #0x40]
 8000312:      	ldr	r0, [sp, #0x44]
 8000314:      	bl	#0x9fc
 8000318:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x68>
 800031a:      	bl	#0xb84
 800031e:      	str	r0, [sp, #0x24]
 8000320:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x70>
 8000322:      	ldr	r0, [sp, #0x24]
 8000324:      	bl	#0x12e
 8000328:      	str	r0, [sp, #0x20]
 800032a:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x7a>
;             ld7: pe11
 800032c:      	ldr	r1, [sp, #0x40]
 800032e:      	ldr	r0, [sp, #0x44]
 8000330:      	bl	#0x558
 8000334:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x84>
 8000336:      	bl	#0xb28
 800033a:      	str	r0, [sp, #0x1c]
 800033c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x8c>
 800033e:      	ldr	r0, [sp, #0x1c]
 8000340:      	bl	#0x112
 8000344:      	str	r0, [sp, #0x18]
 8000346:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x96>
;             ld8: pe14
 8000348:      	ldr	r1, [sp, #0x40]
 800034a:      	ldr	r0, [sp, #0x44]
 800034c:      	bl	#0x8a2
 8000350:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xa0>
 8000352:      	bl	#0xb3c
 8000356:      	str	r0, [sp, #0x14]
 8000358:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xa8>
 800035a:      	ldr	r0, [sp, #0x14]
 800035c:      	bl	#0xf6
 8000360:      	str	r0, [sp, #0x10]
 8000362:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xb2>
;             ld9: pe12
 8000364:      	ldr	r1, [sp, #0x40]
 8000366:      	ldr	r0, [sp, #0x44]
 8000368:      	bl	#0x642
 800036c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xbc>
 800036e:      	bl	#0xb00
 8000372:      	str	r0, [sp, #0xc]
 8000374:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xc4>
 8000376:      	ldr	r0, [sp, #0xc]
 8000378:      	bl	#0xda
 800037c:      	str	r0, [sp, #0x8]
 800037e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xce>
;             ld10: pe13
 8000380:      	ldr	r1, [sp, #0x40]
 8000382:      	ldr	r0, [sp, #0x44]
 8000384:      	bl	#0x748
 8000388:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xd8>
 800038a:      	bl	#0xaf4
 800038e:      	str	r0, [sp, #0x4]
 8000390:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xe0>
 8000392:      	ldr	r0, [sp, #0x4]
 8000394:      	bl	#0xbe
 8000398:      	str	r0, [sp]
 800039a:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0xea>
;         let mut leds = Leds {
 800039c:      	ldr	r0, [sp]
 800039e:      	ldr	r1, [sp, #0x8]
 80003a0:      	ldr	r2, [sp, #0x10]
 80003a2:      	ldr	r3, [sp, #0x18]
 80003a4:      	ldr.w	r12, [sp, #0x20]
 80003a8:      	ldr.w	lr, [sp, #0x28]
 80003ac:      	ldr	r4, [sp, #0x30]
 80003ae:      	ldr	r5, [sp, #0x38]
 80003b0:      	strb.w	r5, [sp, #0x48]
 80003b4:      	strb.w	r4, [sp, #0x49]
 80003b8:      	strb.w	lr, [sp, #0x4a]
 80003bc:      	strb.w	r12, [sp, #0x4b]
 80003c0:      	strb.w	r3, [sp, #0x4c]
 80003c4:      	strb.w	r2, [sp, #0x4d]
 80003c8:      	strb.w	r1, [sp, #0x4e]
 80003cc:      	strb.w	r0, [sp, #0x4f]
 80003d0:      	add	r0, sp, #0x48
;         leds.ld3.off().ok();
 80003d2:      	bl	#0xb06
 80003d6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x126>
 80003d8:      	bl	#0xb42
 80003dc:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x12c>
 80003de:      	add	r0, sp, #0x48
;         leds.ld4.off().ok();
 80003e0:      	adds	r0, #0x1
 80003e2:      	bl	#0xaf6
 80003e6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x136>
 80003e8:      	bl	#0xb32
 80003ec:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x13c>
 80003ee:      	add	r0, sp, #0x48
;         leds.ld5.off().ok();
 80003f0:      	adds	r0, #0x2
 80003f2:      	bl	#0xae6
 80003f6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x146>
 80003f8:      	bl	#0xb22
 80003fc:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x14c>
 80003fe:      	add	r0, sp, #0x48
;         leds.ld6.off().ok();
 8000400:      	adds	r0, #0x3
 8000402:      	bl	#0xad6
 8000406:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x156>
 8000408:      	bl	#0xb12
 800040c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x15c>
 800040e:      	add	r0, sp, #0x48
;         leds.ld7.off().ok();
 8000410:      	adds	r0, #0x4
 8000412:      	bl	#0xac6
 8000416:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x166>
 8000418:      	bl	#0xb02
 800041c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x16c>
 800041e:      	add	r0, sp, #0x48
;         leds.ld8.off().ok();
 8000420:      	adds	r0, #0x5
 8000422:      	bl	#0xab6
 8000426:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x176>
 8000428:      	bl	#0xaf2
 800042c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x17c>
 800042e:      	add	r0, sp, #0x48
;         leds.ld9.off().ok();
 8000430:      	adds	r0, #0x6
 8000432:      	bl	#0xaa6
 8000436:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x186>
 8000438:      	bl	#0xae2
 800043c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x18c>
 800043e:      	add	r0, sp, #0x48
;         leds.ld10.off().ok();
 8000440:      	adds	r0, #0x7
 8000442:      	bl	#0xa96
 8000446:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x196>
 8000448:      	bl	#0xad2
 800044c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h9f158d4bfe3afbd1+0x19c>
;     }
 800044e:      	ldr	r0, [sp, #0x48]
 8000450:      	ldr	r1, [sp, #0x4c]
 8000452:      	add	sp, #0x78
 8000454:      	pop	{r4, r5, r7, pc}

08000456 <switch_hal::IntoSwitch::into_active_high_switch::h416a47d3e38676a5>:
;     fn into_active_high_switch(self) -> Switch<Self, ActiveHigh>
 8000456:      	push	{r7, lr}
 8000458:      	mov	r7, sp
 800045a:      	sub	sp, #0x8
 800045c:      	strb	r0, [r7, #-1]
;         self.into_switch::<ActiveHigh>()
 8000460:      	bl	#0xa4e
 8000464:      	str	r0, [sp]
 8000466:      	b	#-0x2 <switch_hal::IntoSwitch::into_active_high_switch::h416a47d3e38676a5+0x12>
;     }
 8000468:      	ldr	r0, [sp]
 800046a:      	add	sp, #0x8
 800046c:      	pop	{r7, pc}

0800046e <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h4191a5ba8c9a75e1E>:
;                         fn set_low(&mut self) -> Result<(), Self::Error> {
 800046e:      	push	{r7, lr}
 8000470:      	mov	r7, sp
 8000472:      	sub	sp, #0x30
 8000474:      	str	r0, [sp, #0x8]
; gpio!([
 8000476:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h4191a5ba8c9a75e1E+0xa>
 8000478:      	add	r0, sp, #0x8
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800047a:      	str	r0, [sp, #0x10]
 800047c:      	ldr	r0, [sp, #0x10]
 800047e:      	movw	r1, #0x1018
 8000482:      	movt	r1, #0x4800
 8000486:      	str	r1, [sp, #0x4]
 8000488:      	str	r1, [sp, #0x1c]
 800048a:      	str	r0, [sp, #0x20]
 800048c:      	movs	r1, #0x0
;         self.register.set(f(&mut W {bits: Self::reset_value(), _reg: marker::PhantomData}).bits);
 800048e:      	str	r1, [sp, #0x18]
 8000490:      	add	r1, sp, #0x18
 8000492:      	str	r1, [sp, #0x14]
 8000494:      	ldr	r1, [sp, #0x14]
 8000496:      	bl	#0x16
 800049a:      	mov	r1, r0
 800049c:      	ldr	r0, [sp, #0x4]
 800049e:      	ldr	r1, [r1]
 80004a0:      	str	r0, [sp, #0x24]
 80004a2:      	str	r1, [sp, #0x28]
 80004a4:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80004a6:      	bl	#0x1282
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80004aa:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h4191a5ba8c9a75e1E+0x3e>
;                         }
 80004ac:      	add	sp, #0x30
 80004ae:      	pop	{r7, pc}

080004b0 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17ha4cffa2a45067fbcE>:
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80004b0:      	push	{r7, lr}
 80004b2:      	mov	r7, sp
 80004b4:      	sub	sp, #0x20
 80004b6:      	str	r1, [sp, #0x8]
 80004b8:      	str	r0, [sp, #0x10]
 80004ba:      	str	r1, [sp, #0x14]
 80004bc:      	ldr	r0, [r0]
 80004be:      	ldrb	r0, [r0]
 80004c0:      	add.w	r1, r0, #0x10
 80004c4:      	uxtb	r0, r1
 80004c6:      	mov	r2, r1
 80004c8:      	str	r2, [sp, #0xc]
 80004ca:      	cmp	r0, r1
 80004cc:      	bne	#0x14 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17ha4cffa2a45067fbcE+0x34>
 80004ce:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17ha4cffa2a45067fbcE+0x20>
 80004d0:      	ldr	r0, [sp, #0xc]
 80004d2:      	and	r2, r0, #0x1f
 80004d6:      	movs	r1, #0x1
 80004d8:      	lsls	r1, r2
 80004da:      	str	r1, [sp, #0x4]
 80004dc:      	tst.w	r0, #0xe0
 80004e0:      	bne	#0x24 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17ha4cffa2a45067fbcE+0x58>
 80004e2:      	b	#0x16 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17ha4cffa2a45067fbcE+0x4c>
 80004e4:      	movw	r0, #0x3440
 80004e8:      	movt	r0, #0x800
 80004ec:      	movw	r2, #0x3428
 80004f0:      	movt	r2, #0x800
 80004f4:      	movs	r1, #0x1c
 80004f6:      	bl	#0x15c8
 80004fa:      	trap
 80004fc:      	ldr	r0, [sp, #0x4]
 80004fe:      	ldr	r1, [sp, #0x8]
 8000500:      	str	r1, [sp, #0x18]
 8000502:      	str	r0, [sp, #0x1c]
;         self.bits = bits;
 8000504:      	str	r0, [r1]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000506:      	b	#0x16 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17ha4cffa2a45067fbcE+0x70>
 8000508:      	movw	r0, #0x3460
 800050c:      	movt	r0, #0x800
 8000510:      	movw	r2, #0x3428
 8000514:      	movt	r2, #0x800
 8000518:      	movs	r1, #0x23
 800051a:      	bl	#0x15a4
 800051e:      	trap
 8000520:      	ldr	r0, [sp, #0x8]
 8000522:      	add	sp, #0x20
 8000524:      	pop	{r7, pc}

08000526 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17ha84e5599f2cc32abE>:
;                             pub fn into_push_pull_output(
 8000526:      	push	{r7, lr}
 8000528:      	mov	r7, sp
 800052a:      	sub	sp, #0x78
 800052c:      	str	r1, [sp, #0x8]
 800052e:      	str	r0, [sp, #0x18]
 8000530:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000532:      	bl	#0xf98
 8000536:      	str	r0, [sp, #0xc]
 8000538:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17ha84e5599f2cc32abE+0x14>
 800053a:      	ldr	r0, [sp, #0xc]
 800053c:      	str	r0, [sp, #0x30]
 800053e:      	str	r0, [sp, #0x38]
 8000540:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000542:      	bl	#0x11b2
;         let bits = self.register.get();
 8000546:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000548:      	str	r0, [sp, #0x28]
 800054a:      	str	r0, [sp, #0x2c]
 800054c:      	add	r0, sp, #0x28
 800054e:      	str	r0, [sp, #0x20]
 8000550:      	add	r0, sp, #0x2c
 8000552:      	str	r0, [sp, #0x24]
 8000554:      	ldr	r0, [sp, #0x20]
 8000556:      	ldr	r1, [sp, #0x24]
 8000558:      	bl	#0x54
 800055c:      	mov	r1, r0
 800055e:      	ldr	r0, [sp, #0xc]
 8000560:      	ldr	r1, [r1]
 8000562:      	str	r0, [sp, #0x40]
 8000564:      	str	r1, [sp, #0x44]
 8000566:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000568:      	bl	#0x11c0
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800056c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17ha84e5599f2cc32abE+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800056e:      	ldr	r0, [sp, #0x8]
 8000570:      	bl	#0xf6c
 8000574:      	str	r0, [sp, #0x4]
 8000576:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17ha84e5599f2cc32abE+0x52>
 8000578:      	ldr	r0, [sp, #0x4]
 800057a:      	str	r0, [sp, #0x5c]
 800057c:      	str	r0, [sp, #0x64]
 800057e:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000580:      	bl	#0x1174
;         let bits = self.register.get();
 8000584:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000586:      	str	r0, [sp, #0x54]
 8000588:      	str	r0, [sp, #0x58]
 800058a:      	add	r0, sp, #0x54
 800058c:      	str	r0, [sp, #0x4c]
 800058e:      	add	r0, sp, #0x58
 8000590:      	str	r0, [sp, #0x50]
 8000592:      	ldr	r0, [sp, #0x4c]
 8000594:      	ldr	r1, [sp, #0x50]
 8000596:      	bl	#0x64
 800059a:      	mov	r1, r0
 800059c:      	ldr	r0, [sp, #0x4]
 800059e:      	ldr	r1, [r1]
 80005a0:      	str	r0, [sp, #0x6c]
 80005a2:      	str	r1, [sp, #0x70]
 80005a4:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80005a6:      	bl	#0x1182
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80005aa:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17ha84e5599f2cc32abE+0x86>
;                             }
 80005ac:      	add	sp, #0x78
 80005ae:      	pop	{r7, pc}

080005b0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h56220fc814ab4642E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80005b0:      	push	{r7, lr}
 80005b2:      	mov	r7, sp
 80005b4:      	sub	sp, #0x30
 80005b6:      	str	r0, [sp, #0x8]
 80005b8:      	str	r1, [sp, #0xc]
 80005ba:      	str	r1, [sp, #0x14]
;         MODER8_W { w: self }
 80005bc:      	str	r1, [sp, #0x10]
;     }
 80005be:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80005c0:      	str	r0, [sp]
 80005c2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h56220fc814ab4642E+0x14>
 80005c4:      	ldr	r1, [sp]
 80005c6:      	str	r1, [sp, #0x1c]
 80005c8:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80005ca:      	strb	r0, [r7, #-21]
 80005ce:      	ldrb	r0, [r7, #-21]
 80005d2:      	str	r1, [sp, #0x20]
 80005d4:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 80005d8:      	bl	#0x912
 80005dc:      	ldr	r1, [sp]
 80005de:      	mov	r2, r0
 80005e0:      	str	r1, [sp, #0x28]
 80005e2:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80005e6:      	ldr	r0, [r1]
 80005e8:      	bic	r0, r0, #0x30000
 80005ec:      	and	r2, r2, #0x3
 80005f0:      	orr.w	r0, r0, r2, lsl #16
 80005f4:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80005f6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h56220fc814ab4642E+0x48>
 80005f8:      	ldr	r0, [sp]
 80005fa:      	add	sp, #0x30
 80005fc:      	pop	{r7, pc}

080005fe <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he2ae6846c5560b25E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80005fe:      	push	{r7, lr}
 8000600:      	mov	r7, sp
 8000602:      	sub	sp, #0x30
 8000604:      	str	r0, [sp, #0x8]
 8000606:      	str	r1, [sp, #0xc]
 8000608:      	str	r1, [sp, #0x14]
;         OT8_W { w: self }
 800060a:      	str	r1, [sp, #0x10]
;     }
 800060c:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800060e:      	str	r0, [sp]
 8000610:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he2ae6846c5560b25E+0x14>
 8000612:      	ldr	r1, [sp]
 8000614:      	str	r1, [sp, #0x1c]
 8000616:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000618:      	strb	r0, [r7, #-21]
 800061c:      	ldrb	r0, [r7, #-21]
 8000620:      	str	r1, [sp, #0x20]
 8000622:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000626:      	bl	#0x8da
 800062a:      	ldr	r1, [sp]
 800062c:      	mov	r2, r0
 800062e:      	str	r1, [sp, #0x28]
 8000630:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 8000634:      	ldr	r0, [r1]
 8000636:      	bic	r0, r0, #0x100
 800063a:      	orr.w	r0, r0, r2, lsl #8
 800063e:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000640:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he2ae6846c5560b25E+0x44>
 8000642:      	ldr	r0, [sp]
 8000644:      	add	sp, #0x30
 8000646:      	pop	{r7, pc}

08000648 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17he9f71380f8e03267E>:
;                             pub fn into_push_pull_output(
 8000648:      	push	{r7, lr}
 800064a:      	mov	r7, sp
 800064c:      	sub	sp, #0x78
 800064e:      	str	r1, [sp, #0x8]
 8000650:      	str	r0, [sp, #0x18]
 8000652:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000654:      	bl	#0xe76
 8000658:      	str	r0, [sp, #0xc]
 800065a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17he9f71380f8e03267E+0x14>
 800065c:      	ldr	r0, [sp, #0xc]
 800065e:      	str	r0, [sp, #0x30]
 8000660:      	str	r0, [sp, #0x38]
 8000662:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000664:      	bl	#0x1090
;         let bits = self.register.get();
 8000668:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800066a:      	str	r0, [sp, #0x28]
 800066c:      	str	r0, [sp, #0x2c]
 800066e:      	add	r0, sp, #0x28
 8000670:      	str	r0, [sp, #0x20]
 8000672:      	add	r0, sp, #0x2c
 8000674:      	str	r0, [sp, #0x24]
 8000676:      	ldr	r0, [sp, #0x20]
 8000678:      	ldr	r1, [sp, #0x24]
 800067a:      	bl	#0x9e
 800067e:      	mov	r1, r0
 8000680:      	ldr	r0, [sp, #0xc]
 8000682:      	ldr	r1, [r1]
 8000684:      	str	r0, [sp, #0x40]
 8000686:      	str	r1, [sp, #0x44]
 8000688:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800068a:      	bl	#0x109e
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800068e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17he9f71380f8e03267E+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000690:      	ldr	r0, [sp, #0x8]
 8000692:      	bl	#0xe4a
 8000696:      	str	r0, [sp, #0x4]
 8000698:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17he9f71380f8e03267E+0x52>
 800069a:      	ldr	r0, [sp, #0x4]
 800069c:      	str	r0, [sp, #0x5c]
 800069e:      	str	r0, [sp, #0x64]
 80006a0:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80006a2:      	bl	#0x1052
;         let bits = self.register.get();
 80006a6:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80006a8:      	str	r0, [sp, #0x54]
 80006aa:      	str	r0, [sp, #0x58]
 80006ac:      	add	r0, sp, #0x54
 80006ae:      	str	r0, [sp, #0x4c]
 80006b0:      	add	r0, sp, #0x58
 80006b2:      	str	r0, [sp, #0x50]
 80006b4:      	ldr	r0, [sp, #0x4c]
 80006b6:      	ldr	r1, [sp, #0x50]
 80006b8:      	bl	#0x16
 80006bc:      	mov	r1, r0
 80006be:      	ldr	r0, [sp, #0x4]
 80006c0:      	ldr	r1, [r1]
 80006c2:      	str	r0, [sp, #0x6c]
 80006c4:      	str	r1, [sp, #0x70]
 80006c6:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80006c8:      	bl	#0x1060
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80006cc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17he9f71380f8e03267E+0x86>
;                             }
 80006ce:      	add	sp, #0x78
 80006d0:      	pop	{r7, pc}

080006d2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h50f4a52988070ffeE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80006d2:      	push	{r7, lr}
 80006d4:      	mov	r7, sp
 80006d6:      	sub	sp, #0x30
 80006d8:      	str	r0, [sp, #0x8]
 80006da:      	str	r1, [sp, #0xc]
 80006dc:      	str	r1, [sp, #0x14]
;         OT9_W { w: self }
 80006de:      	str	r1, [sp, #0x10]
;     }
 80006e0:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80006e2:      	str	r0, [sp]
 80006e4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h50f4a52988070ffeE+0x14>
 80006e6:      	ldr	r1, [sp]
 80006e8:      	str	r1, [sp, #0x1c]
 80006ea:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80006ec:      	strb	r0, [r7, #-21]
 80006f0:      	ldrb	r0, [r7, #-21]
 80006f4:      	str	r1, [sp, #0x20]
 80006f6:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 80006fa:      	bl	#0x806
 80006fe:      	ldr	r1, [sp]
 8000700:      	mov	r2, r0
 8000702:      	str	r1, [sp, #0x28]
 8000704:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 8000708:      	ldr	r0, [r1]
 800070a:      	bic	r0, r0, #0x200
 800070e:      	orr.w	r0, r0, r2, lsl #9
 8000712:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000714:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h50f4a52988070ffeE+0x44>
 8000716:      	ldr	r0, [sp]
 8000718:      	add	sp, #0x30
 800071a:      	pop	{r7, pc}

0800071c <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7a5db9cecea1ee2cE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800071c:      	push	{r7, lr}
 800071e:      	mov	r7, sp
 8000720:      	sub	sp, #0x30
 8000722:      	str	r0, [sp, #0x8]
 8000724:      	str	r1, [sp, #0xc]
 8000726:      	str	r1, [sp, #0x14]
;         MODER9_W { w: self }
 8000728:      	str	r1, [sp, #0x10]
;     }
 800072a:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800072c:      	str	r0, [sp]
 800072e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7a5db9cecea1ee2cE+0x14>
 8000730:      	ldr	r1, [sp]
 8000732:      	str	r1, [sp, #0x1c]
 8000734:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000736:      	strb	r0, [r7, #-21]
 800073a:      	ldrb	r0, [r7, #-21]
 800073e:      	str	r1, [sp, #0x20]
 8000740:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000744:      	bl	#0x7a6
 8000748:      	ldr	r1, [sp]
 800074a:      	mov	r2, r0
 800074c:      	str	r1, [sp, #0x28]
 800074e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 8000752:      	ldr	r0, [r1]
 8000754:      	bic	r0, r0, #0xc0000
 8000758:      	and	r2, r2, #0x3
 800075c:      	orr.w	r0, r0, r2, lsl #18
 8000760:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000762:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7a5db9cecea1ee2cE+0x48>
 8000764:      	ldr	r0, [sp]
 8000766:      	add	sp, #0x30
 8000768:      	pop	{r7, pc}

0800076a <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h999ffb8a49984e16E>:
;                             pub fn into_push_pull_output(
 800076a:      	push	{r7, lr}
 800076c:      	mov	r7, sp
 800076e:      	sub	sp, #0x78
 8000770:      	str	r1, [sp, #0x8]
 8000772:      	str	r0, [sp, #0x18]
 8000774:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000776:      	bl	#0xd54
 800077a:      	str	r0, [sp, #0xc]
 800077c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h999ffb8a49984e16E+0x14>
 800077e:      	ldr	r0, [sp, #0xc]
 8000780:      	str	r0, [sp, #0x30]
 8000782:      	str	r0, [sp, #0x38]
 8000784:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000786:      	bl	#0xf6e
;         let bits = self.register.get();
 800078a:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800078c:      	str	r0, [sp, #0x28]
 800078e:      	str	r0, [sp, #0x2c]
 8000790:      	add	r0, sp, #0x28
 8000792:      	str	r0, [sp, #0x20]
 8000794:      	add	r0, sp, #0x2c
 8000796:      	str	r0, [sp, #0x24]
 8000798:      	ldr	r0, [sp, #0x20]
 800079a:      	ldr	r1, [sp, #0x24]
 800079c:      	bl	#0x54
 80007a0:      	mov	r1, r0
 80007a2:      	ldr	r0, [sp, #0xc]
 80007a4:      	ldr	r1, [r1]
 80007a6:      	str	r0, [sp, #0x40]
 80007a8:      	str	r1, [sp, #0x44]
 80007aa:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80007ac:      	bl	#0xf7c
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007b0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h999ffb8a49984e16E+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80007b2:      	ldr	r0, [sp, #0x8]
 80007b4:      	bl	#0xd28
 80007b8:      	str	r0, [sp, #0x4]
 80007ba:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h999ffb8a49984e16E+0x52>
 80007bc:      	ldr	r0, [sp, #0x4]
 80007be:      	str	r0, [sp, #0x5c]
 80007c0:      	str	r0, [sp, #0x64]
 80007c2:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80007c4:      	bl	#0xf30
;         let bits = self.register.get();
 80007c8:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80007ca:      	str	r0, [sp, #0x54]
 80007cc:      	str	r0, [sp, #0x58]
 80007ce:      	add	r0, sp, #0x54
 80007d0:      	str	r0, [sp, #0x4c]
 80007d2:      	add	r0, sp, #0x58
 80007d4:      	str	r0, [sp, #0x50]
 80007d6:      	ldr	r0, [sp, #0x4c]
 80007d8:      	ldr	r1, [sp, #0x50]
 80007da:      	bl	#0x64
 80007de:      	mov	r1, r0
 80007e0:      	ldr	r0, [sp, #0x4]
 80007e2:      	ldr	r1, [r1]
 80007e4:      	str	r0, [sp, #0x6c]
 80007e6:      	str	r1, [sp, #0x70]
 80007e8:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80007ea:      	bl	#0xf3e
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80007ee:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h999ffb8a49984e16E+0x86>
;                             }
 80007f0:      	add	sp, #0x78
 80007f2:      	pop	{r7, pc}

080007f4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4a2ce7a06cffb370E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007f4:      	push	{r7, lr}
 80007f6:      	mov	r7, sp
 80007f8:      	sub	sp, #0x30
 80007fa:      	str	r0, [sp, #0x8]
 80007fc:      	str	r1, [sp, #0xc]
 80007fe:      	str	r1, [sp, #0x14]
;         MODER10_W { w: self }
 8000800:      	str	r1, [sp, #0x10]
;     }
 8000802:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000804:      	str	r0, [sp]
 8000806:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4a2ce7a06cffb370E+0x14>
 8000808:      	ldr	r1, [sp]
 800080a:      	str	r1, [sp, #0x1c]
 800080c:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 800080e:      	strb	r0, [r7, #-21]
 8000812:      	ldrb	r0, [r7, #-21]
 8000816:      	str	r1, [sp, #0x20]
 8000818:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 800081c:      	bl	#0x6ce
 8000820:      	ldr	r1, [sp]
 8000822:      	mov	r2, r0
 8000824:      	str	r1, [sp, #0x28]
 8000826:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 800082a:      	ldr	r0, [r1]
 800082c:      	bic	r0, r0, #0x300000
 8000830:      	and	r2, r2, #0x3
 8000834:      	orr.w	r0, r0, r2, lsl #20
 8000838:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800083a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4a2ce7a06cffb370E+0x48>
 800083c:      	ldr	r0, [sp]
 800083e:      	add	sp, #0x30
 8000840:      	pop	{r7, pc}

08000842 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h924eda101cb49edaE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000842:      	push	{r7, lr}
 8000844:      	mov	r7, sp
 8000846:      	sub	sp, #0x30
 8000848:      	str	r0, [sp, #0x8]
 800084a:      	str	r1, [sp, #0xc]
 800084c:      	str	r1, [sp, #0x14]
;         OT10_W { w: self }
 800084e:      	str	r1, [sp, #0x10]
;     }
 8000850:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000852:      	str	r0, [sp]
 8000854:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h924eda101cb49edaE+0x14>
 8000856:      	ldr	r1, [sp]
 8000858:      	str	r1, [sp, #0x1c]
 800085a:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 800085c:      	strb	r0, [r7, #-21]
 8000860:      	ldrb	r0, [r7, #-21]
 8000864:      	str	r1, [sp, #0x20]
 8000866:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 800086a:      	bl	#0x696
 800086e:      	ldr	r1, [sp]
 8000870:      	mov	r2, r0
 8000872:      	str	r1, [sp, #0x28]
 8000874:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 8000878:      	ldr	r0, [r1]
 800087a:      	bic	r0, r0, #0x400
 800087e:      	orr.w	r0, r0, r2, lsl #10
 8000882:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000884:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h924eda101cb49edaE+0x44>
 8000886:      	ldr	r0, [sp]
 8000888:      	add	sp, #0x30
 800088a:      	pop	{r7, pc}

0800088c <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h51a34b3cf0c0cfcbE>:
;                             pub fn into_push_pull_output(
 800088c:      	push	{r7, lr}
 800088e:      	mov	r7, sp
 8000890:      	sub	sp, #0x78
 8000892:      	str	r1, [sp, #0x8]
 8000894:      	str	r0, [sp, #0x18]
 8000896:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000898:      	bl	#0xc32
 800089c:      	str	r0, [sp, #0xc]
 800089e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h51a34b3cf0c0cfcbE+0x14>
 80008a0:      	ldr	r0, [sp, #0xc]
 80008a2:      	str	r0, [sp, #0x30]
 80008a4:      	str	r0, [sp, #0x38]
 80008a6:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80008a8:      	bl	#0xe4c
;         let bits = self.register.get();
 80008ac:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80008ae:      	str	r0, [sp, #0x28]
 80008b0:      	str	r0, [sp, #0x2c]
 80008b2:      	add	r0, sp, #0x28
 80008b4:      	str	r0, [sp, #0x20]
 80008b6:      	add	r0, sp, #0x2c
 80008b8:      	str	r0, [sp, #0x24]
 80008ba:      	ldr	r0, [sp, #0x20]
 80008bc:      	ldr	r1, [sp, #0x24]
 80008be:      	bl	#0x9e
 80008c2:      	mov	r1, r0
 80008c4:      	ldr	r0, [sp, #0xc]
 80008c6:      	ldr	r1, [r1]
 80008c8:      	str	r0, [sp, #0x40]
 80008ca:      	str	r1, [sp, #0x44]
 80008cc:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80008ce:      	bl	#0xe5a
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008d2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h51a34b3cf0c0cfcbE+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008d4:      	ldr	r0, [sp, #0x8]
 80008d6:      	bl	#0xc06
 80008da:      	str	r0, [sp, #0x4]
 80008dc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h51a34b3cf0c0cfcbE+0x52>
 80008de:      	ldr	r0, [sp, #0x4]
 80008e0:      	str	r0, [sp, #0x5c]
 80008e2:      	str	r0, [sp, #0x64]
 80008e4:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80008e6:      	bl	#0xe0e
;         let bits = self.register.get();
 80008ea:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80008ec:      	str	r0, [sp, #0x54]
 80008ee:      	str	r0, [sp, #0x58]
 80008f0:      	add	r0, sp, #0x54
 80008f2:      	str	r0, [sp, #0x4c]
 80008f4:      	add	r0, sp, #0x58
 80008f6:      	str	r0, [sp, #0x50]
 80008f8:      	ldr	r0, [sp, #0x4c]
 80008fa:      	ldr	r1, [sp, #0x50]
 80008fc:      	bl	#0x16
 8000900:      	mov	r1, r0
 8000902:      	ldr	r0, [sp, #0x4]
 8000904:      	ldr	r1, [r1]
 8000906:      	str	r0, [sp, #0x6c]
 8000908:      	str	r1, [sp, #0x70]
 800090a:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800090c:      	bl	#0xe1c
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000910:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h51a34b3cf0c0cfcbE+0x86>
;                             }
 8000912:      	add	sp, #0x78
 8000914:      	pop	{r7, pc}

08000916 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h300c0cf13c8f70b0E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000916:      	push	{r7, lr}
 8000918:      	mov	r7, sp
 800091a:      	sub	sp, #0x30
 800091c:      	str	r0, [sp, #0x8]
 800091e:      	str	r1, [sp, #0xc]
 8000920:      	str	r1, [sp, #0x14]
;         OT11_W { w: self }
 8000922:      	str	r1, [sp, #0x10]
;     }
 8000924:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000926:      	str	r0, [sp]
 8000928:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h300c0cf13c8f70b0E+0x14>
 800092a:      	ldr	r1, [sp]
 800092c:      	str	r1, [sp, #0x1c]
 800092e:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000930:      	strb	r0, [r7, #-21]
 8000934:      	ldrb	r0, [r7, #-21]
 8000938:      	str	r1, [sp, #0x20]
 800093a:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 800093e:      	bl	#0x5c2
 8000942:      	ldr	r1, [sp]
 8000944:      	mov	r2, r0
 8000946:      	str	r1, [sp, #0x28]
 8000948:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 800094c:      	ldr	r0, [r1]
 800094e:      	bic	r0, r0, #0x800
 8000952:      	orr.w	r0, r0, r2, lsl #11
 8000956:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000958:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h300c0cf13c8f70b0E+0x44>
 800095a:      	ldr	r0, [sp]
 800095c:      	add	sp, #0x30
 800095e:      	pop	{r7, pc}

08000960 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8d6bb3e541679f45E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000960:      	push	{r7, lr}
 8000962:      	mov	r7, sp
 8000964:      	sub	sp, #0x30
 8000966:      	str	r0, [sp, #0x8]
 8000968:      	str	r1, [sp, #0xc]
 800096a:      	str	r1, [sp, #0x14]
;         MODER11_W { w: self }
 800096c:      	str	r1, [sp, #0x10]
;     }
 800096e:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000970:      	str	r0, [sp]
 8000972:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8d6bb3e541679f45E+0x14>
 8000974:      	ldr	r1, [sp]
 8000976:      	str	r1, [sp, #0x1c]
 8000978:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 800097a:      	strb	r0, [r7, #-21]
 800097e:      	ldrb	r0, [r7, #-21]
 8000982:      	str	r1, [sp, #0x20]
 8000984:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000988:      	bl	#0x562
 800098c:      	ldr	r1, [sp]
 800098e:      	mov	r2, r0
 8000990:      	str	r1, [sp, #0x28]
 8000992:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000996:      	ldr	r0, [r1]
 8000998:      	bic	r0, r0, #0xc00000
 800099c:      	and	r2, r2, #0x3
 80009a0:      	orr.w	r0, r0, r2, lsl #22
 80009a4:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009a6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8d6bb3e541679f45E+0x48>
 80009a8:      	ldr	r0, [sp]
 80009aa:      	add	sp, #0x30
 80009ac:      	pop	{r7, pc}

080009ae <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h948fe9a9110ca390E>:
;                             pub fn into_push_pull_output(
 80009ae:      	push	{r7, lr}
 80009b0:      	mov	r7, sp
 80009b2:      	sub	sp, #0x78
 80009b4:      	str	r1, [sp, #0x8]
 80009b6:      	str	r0, [sp, #0x18]
 80009b8:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009ba:      	bl	#0xb10
 80009be:      	str	r0, [sp, #0xc]
 80009c0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h948fe9a9110ca390E+0x14>
 80009c2:      	ldr	r0, [sp, #0xc]
 80009c4:      	str	r0, [sp, #0x30]
 80009c6:      	str	r0, [sp, #0x38]
 80009c8:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80009ca:      	bl	#0xd2a
;         let bits = self.register.get();
 80009ce:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80009d0:      	str	r0, [sp, #0x28]
 80009d2:      	str	r0, [sp, #0x2c]
 80009d4:      	add	r0, sp, #0x28
 80009d6:      	str	r0, [sp, #0x20]
 80009d8:      	add	r0, sp, #0x2c
 80009da:      	str	r0, [sp, #0x24]
 80009dc:      	ldr	r0, [sp, #0x20]
 80009de:      	ldr	r1, [sp, #0x24]
 80009e0:      	bl	#0x54
 80009e4:      	mov	r1, r0
 80009e6:      	ldr	r0, [sp, #0xc]
 80009e8:      	ldr	r1, [r1]
 80009ea:      	str	r0, [sp, #0x40]
 80009ec:      	str	r1, [sp, #0x44]
 80009ee:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80009f0:      	bl	#0xd38
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009f4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h948fe9a9110ca390E+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009f6:      	ldr	r0, [sp, #0x8]
 80009f8:      	bl	#0xae4
 80009fc:      	str	r0, [sp, #0x4]
 80009fe:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h948fe9a9110ca390E+0x52>
 8000a00:      	ldr	r0, [sp, #0x4]
 8000a02:      	str	r0, [sp, #0x5c]
 8000a04:      	str	r0, [sp, #0x64]
 8000a06:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a08:      	bl	#0xcec
;         let bits = self.register.get();
 8000a0c:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a0e:      	str	r0, [sp, #0x54]
 8000a10:      	str	r0, [sp, #0x58]
 8000a12:      	add	r0, sp, #0x54
 8000a14:      	str	r0, [sp, #0x4c]
 8000a16:      	add	r0, sp, #0x58
 8000a18:      	str	r0, [sp, #0x50]
 8000a1a:      	ldr	r0, [sp, #0x4c]
 8000a1c:      	ldr	r1, [sp, #0x50]
 8000a1e:      	bl	#0x64
 8000a22:      	mov	r1, r0
 8000a24:      	ldr	r0, [sp, #0x4]
 8000a26:      	ldr	r1, [r1]
 8000a28:      	str	r0, [sp, #0x6c]
 8000a2a:      	str	r1, [sp, #0x70]
 8000a2c:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000a2e:      	bl	#0xcfa
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a32:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h948fe9a9110ca390E+0x86>
;                             }
 8000a34:      	add	sp, #0x78
 8000a36:      	pop	{r7, pc}

08000a38 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7fa20f72ffd714b4E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a38:      	push	{r7, lr}
 8000a3a:      	mov	r7, sp
 8000a3c:      	sub	sp, #0x30
 8000a3e:      	str	r0, [sp, #0x8]
 8000a40:      	str	r1, [sp, #0xc]
 8000a42:      	str	r1, [sp, #0x14]
;         MODER12_W { w: self }
 8000a44:      	str	r1, [sp, #0x10]
;     }
 8000a46:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a48:      	str	r0, [sp]
 8000a4a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7fa20f72ffd714b4E+0x14>
 8000a4c:      	ldr	r1, [sp]
 8000a4e:      	str	r1, [sp, #0x1c]
 8000a50:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000a52:      	strb	r0, [r7, #-21]
 8000a56:      	ldrb	r0, [r7, #-21]
 8000a5a:      	str	r1, [sp, #0x20]
 8000a5c:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000a60:      	bl	#0x48a
 8000a64:      	ldr	r1, [sp]
 8000a66:      	mov	r2, r0
 8000a68:      	str	r1, [sp, #0x28]
 8000a6a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000a6e:      	ldr	r0, [r1]
 8000a70:      	bic	r0, r0, #0x3000000
 8000a74:      	and	r2, r2, #0x3
 8000a78:      	orr.w	r0, r0, r2, lsl #24
 8000a7c:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a7e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7fa20f72ffd714b4E+0x48>
 8000a80:      	ldr	r0, [sp]
 8000a82:      	add	sp, #0x30
 8000a84:      	pop	{r7, pc}

08000a86 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfde9560c386010c4E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a86:      	push	{r7, lr}
 8000a88:      	mov	r7, sp
 8000a8a:      	sub	sp, #0x30
 8000a8c:      	str	r0, [sp, #0x8]
 8000a8e:      	str	r1, [sp, #0xc]
 8000a90:      	str	r1, [sp, #0x14]
;         OT12_W { w: self }
 8000a92:      	str	r1, [sp, #0x10]
;     }
 8000a94:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a96:      	str	r0, [sp]
 8000a98:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfde9560c386010c4E+0x14>
 8000a9a:      	ldr	r1, [sp]
 8000a9c:      	str	r1, [sp, #0x1c]
 8000a9e:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000aa0:      	strb	r0, [r7, #-21]
 8000aa4:      	ldrb	r0, [r7, #-21]
 8000aa8:      	str	r1, [sp, #0x20]
 8000aaa:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000aae:      	bl	#0x452
 8000ab2:      	ldr	r1, [sp]
 8000ab4:      	mov	r2, r0
 8000ab6:      	str	r1, [sp, #0x28]
 8000ab8:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000abc:      	ldr	r0, [r1]
 8000abe:      	bic	r0, r0, #0x1000
 8000ac2:      	orr.w	r0, r0, r2, lsl #12
 8000ac6:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ac8:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hfde9560c386010c4E+0x44>
 8000aca:      	ldr	r0, [sp]
 8000acc:      	add	sp, #0x30
 8000ace:      	pop	{r7, pc}

08000ad0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h3aa0e25110be61fcE>:
;                             pub fn into_push_pull_output(
 8000ad0:      	push	{r7, lr}
 8000ad2:      	mov	r7, sp
 8000ad4:      	sub	sp, #0x78
 8000ad6:      	str	r1, [sp, #0x8]
 8000ad8:      	str	r0, [sp, #0x18]
 8000ada:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000adc:      	bl	#0x9ee
 8000ae0:      	str	r0, [sp, #0xc]
 8000ae2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h3aa0e25110be61fcE+0x14>
 8000ae4:      	ldr	r0, [sp, #0xc]
 8000ae6:      	str	r0, [sp, #0x30]
 8000ae8:      	str	r0, [sp, #0x38]
 8000aea:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000aec:      	bl	#0xc08
;         let bits = self.register.get();
 8000af0:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000af2:      	str	r0, [sp, #0x28]
 8000af4:      	str	r0, [sp, #0x2c]
 8000af6:      	add	r0, sp, #0x28
 8000af8:      	str	r0, [sp, #0x20]
 8000afa:      	add	r0, sp, #0x2c
 8000afc:      	str	r0, [sp, #0x24]
 8000afe:      	ldr	r0, [sp, #0x20]
 8000b00:      	ldr	r1, [sp, #0x24]
 8000b02:      	bl	#0x54
 8000b06:      	mov	r1, r0
 8000b08:      	ldr	r0, [sp, #0xc]
 8000b0a:      	ldr	r1, [r1]
 8000b0c:      	str	r0, [sp, #0x40]
 8000b0e:      	str	r1, [sp, #0x44]
 8000b10:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000b12:      	bl	#0xc16
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b16:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h3aa0e25110be61fcE+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b18:      	ldr	r0, [sp, #0x8]
 8000b1a:      	bl	#0x9c2
 8000b1e:      	str	r0, [sp, #0x4]
 8000b20:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h3aa0e25110be61fcE+0x52>
 8000b22:      	ldr	r0, [sp, #0x4]
 8000b24:      	str	r0, [sp, #0x5c]
 8000b26:      	str	r0, [sp, #0x64]
 8000b28:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000b2a:      	bl	#0xbca
;         let bits = self.register.get();
 8000b2e:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000b30:      	str	r0, [sp, #0x54]
 8000b32:      	str	r0, [sp, #0x58]
 8000b34:      	add	r0, sp, #0x54
 8000b36:      	str	r0, [sp, #0x4c]
 8000b38:      	add	r0, sp, #0x58
 8000b3a:      	str	r0, [sp, #0x50]
 8000b3c:      	ldr	r0, [sp, #0x4c]
 8000b3e:      	ldr	r1, [sp, #0x50]
 8000b40:      	bl	#0x64
 8000b44:      	mov	r1, r0
 8000b46:      	ldr	r0, [sp, #0x4]
 8000b48:      	ldr	r1, [r1]
 8000b4a:      	str	r0, [sp, #0x6c]
 8000b4c:      	str	r1, [sp, #0x70]
 8000b4e:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000b50:      	bl	#0xbd8
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b54:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h3aa0e25110be61fcE+0x86>
;                             }
 8000b56:      	add	sp, #0x78
 8000b58:      	pop	{r7, pc}

08000b5a <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h567af5bc27925537E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b5a:      	push	{r7, lr}
 8000b5c:      	mov	r7, sp
 8000b5e:      	sub	sp, #0x30
 8000b60:      	str	r0, [sp, #0x8]
 8000b62:      	str	r1, [sp, #0xc]
 8000b64:      	str	r1, [sp, #0x14]
;         MODER13_W { w: self }
 8000b66:      	str	r1, [sp, #0x10]
;     }
 8000b68:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b6a:      	str	r0, [sp]
 8000b6c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h567af5bc27925537E+0x14>
 8000b6e:      	ldr	r1, [sp]
 8000b70:      	str	r1, [sp, #0x1c]
 8000b72:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000b74:      	strb	r0, [r7, #-21]
 8000b78:      	ldrb	r0, [r7, #-21]
 8000b7c:      	str	r1, [sp, #0x20]
 8000b7e:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000b82:      	bl	#0x368
 8000b86:      	ldr	r1, [sp]
 8000b88:      	mov	r2, r0
 8000b8a:      	str	r1, [sp, #0x28]
 8000b8c:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000b90:      	ldr	r0, [r1]
 8000b92:      	bic	r0, r0, #0xc000000
 8000b96:      	and	r2, r2, #0x3
 8000b9a:      	orr.w	r0, r0, r2, lsl #26
 8000b9e:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ba0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h567af5bc27925537E+0x48>
 8000ba2:      	ldr	r0, [sp]
 8000ba4:      	add	sp, #0x30
 8000ba6:      	pop	{r7, pc}

08000ba8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h57865e6628403257E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ba8:      	push	{r7, lr}
 8000baa:      	mov	r7, sp
 8000bac:      	sub	sp, #0x30
 8000bae:      	str	r0, [sp, #0x8]
 8000bb0:      	str	r1, [sp, #0xc]
 8000bb2:      	str	r1, [sp, #0x14]
;         OT13_W { w: self }
 8000bb4:      	str	r1, [sp, #0x10]
;     }
 8000bb6:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000bb8:      	str	r0, [sp]
 8000bba:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h57865e6628403257E+0x14>
 8000bbc:      	ldr	r1, [sp]
 8000bbe:      	str	r1, [sp, #0x1c]
 8000bc0:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000bc2:      	strb	r0, [r7, #-21]
 8000bc6:      	ldrb	r0, [r7, #-21]
 8000bca:      	str	r1, [sp, #0x20]
 8000bcc:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000bd0:      	bl	#0x330
 8000bd4:      	ldr	r1, [sp]
 8000bd6:      	mov	r2, r0
 8000bd8:      	str	r1, [sp, #0x28]
 8000bda:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000bde:      	ldr	r0, [r1]
 8000be0:      	bic	r0, r0, #0x2000
 8000be4:      	orr.w	r0, r0, r2, lsl #13
 8000be8:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000bea:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h57865e6628403257E+0x44>
 8000bec:      	ldr	r0, [sp]
 8000bee:      	add	sp, #0x30
 8000bf0:      	pop	{r7, pc}

08000bf2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hbc4cb067f88e646dE>:
;                             pub fn into_push_pull_output(
 8000bf2:      	push	{r7, lr}
 8000bf4:      	mov	r7, sp
 8000bf6:      	sub	sp, #0x78
 8000bf8:      	str	r1, [sp, #0x8]
 8000bfa:      	str	r0, [sp, #0x18]
 8000bfc:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000bfe:      	bl	#0x8cc
 8000c02:      	str	r0, [sp, #0xc]
 8000c04:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hbc4cb067f88e646dE+0x14>
 8000c06:      	ldr	r0, [sp, #0xc]
 8000c08:      	str	r0, [sp, #0x30]
 8000c0a:      	str	r0, [sp, #0x38]
 8000c0c:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000c0e:      	bl	#0xae6
;         let bits = self.register.get();
 8000c12:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000c14:      	str	r0, [sp, #0x28]
 8000c16:      	str	r0, [sp, #0x2c]
 8000c18:      	add	r0, sp, #0x28
 8000c1a:      	str	r0, [sp, #0x20]
 8000c1c:      	add	r0, sp, #0x2c
 8000c1e:      	str	r0, [sp, #0x24]
 8000c20:      	ldr	r0, [sp, #0x20]
 8000c22:      	ldr	r1, [sp, #0x24]
 8000c24:      	bl	#0x9e
 8000c28:      	mov	r1, r0
 8000c2a:      	ldr	r0, [sp, #0xc]
 8000c2c:      	ldr	r1, [r1]
 8000c2e:      	str	r0, [sp, #0x40]
 8000c30:      	str	r1, [sp, #0x44]
 8000c32:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000c34:      	bl	#0xaf4
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c38:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hbc4cb067f88e646dE+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c3a:      	ldr	r0, [sp, #0x8]
 8000c3c:      	bl	#0x8a0
 8000c40:      	str	r0, [sp, #0x4]
 8000c42:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hbc4cb067f88e646dE+0x52>
 8000c44:      	ldr	r0, [sp, #0x4]
 8000c46:      	str	r0, [sp, #0x5c]
 8000c48:      	str	r0, [sp, #0x64]
 8000c4a:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000c4c:      	bl	#0xaa8
;         let bits = self.register.get();
 8000c50:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000c52:      	str	r0, [sp, #0x54]
 8000c54:      	str	r0, [sp, #0x58]
 8000c56:      	add	r0, sp, #0x54
 8000c58:      	str	r0, [sp, #0x4c]
 8000c5a:      	add	r0, sp, #0x58
 8000c5c:      	str	r0, [sp, #0x50]
 8000c5e:      	ldr	r0, [sp, #0x4c]
 8000c60:      	ldr	r1, [sp, #0x50]
 8000c62:      	bl	#0x16
 8000c66:      	mov	r1, r0
 8000c68:      	ldr	r0, [sp, #0x4]
 8000c6a:      	ldr	r1, [r1]
 8000c6c:      	str	r0, [sp, #0x6c]
 8000c6e:      	str	r1, [sp, #0x70]
 8000c70:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000c72:      	bl	#0xab6
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c76:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hbc4cb067f88e646dE+0x86>
;                             }
 8000c78:      	add	sp, #0x78
 8000c7a:      	pop	{r7, pc}

08000c7c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3e887d3e8b9fe89cE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c7c:      	push	{r7, lr}
 8000c7e:      	mov	r7, sp
 8000c80:      	sub	sp, #0x30
 8000c82:      	str	r0, [sp, #0x8]
 8000c84:      	str	r1, [sp, #0xc]
 8000c86:      	str	r1, [sp, #0x14]
;         OT14_W { w: self }
 8000c88:      	str	r1, [sp, #0x10]
;     }
 8000c8a:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c8c:      	str	r0, [sp]
 8000c8e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3e887d3e8b9fe89cE+0x14>
 8000c90:      	ldr	r1, [sp]
 8000c92:      	str	r1, [sp, #0x1c]
 8000c94:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000c96:      	strb	r0, [r7, #-21]
 8000c9a:      	ldrb	r0, [r7, #-21]
 8000c9e:      	str	r1, [sp, #0x20]
 8000ca0:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000ca4:      	bl	#0x25c
 8000ca8:      	ldr	r1, [sp]
 8000caa:      	mov	r2, r0
 8000cac:      	str	r1, [sp, #0x28]
 8000cae:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000cb2:      	ldr	r0, [r1]
 8000cb4:      	bic	r0, r0, #0x4000
 8000cb8:      	orr.w	r0, r0, r2, lsl #14
 8000cbc:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000cbe:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3e887d3e8b9fe89cE+0x44>
 8000cc0:      	ldr	r0, [sp]
 8000cc2:      	add	sp, #0x30
 8000cc4:      	pop	{r7, pc}

08000cc6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb93255bf0ee50d18E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cc6:      	push	{r7, lr}
 8000cc8:      	mov	r7, sp
 8000cca:      	sub	sp, #0x30
 8000ccc:      	str	r0, [sp, #0x8]
 8000cce:      	str	r1, [sp, #0xc]
 8000cd0:      	str	r1, [sp, #0x14]
;         MODER14_W { w: self }
 8000cd2:      	str	r1, [sp, #0x10]
;     }
 8000cd4:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cd6:      	str	r0, [sp]
 8000cd8:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb93255bf0ee50d18E+0x14>
 8000cda:      	ldr	r1, [sp]
 8000cdc:      	str	r1, [sp, #0x1c]
 8000cde:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000ce0:      	strb	r0, [r7, #-21]
 8000ce4:      	ldrb	r0, [r7, #-21]
 8000ce8:      	str	r1, [sp, #0x20]
 8000cea:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000cee:      	bl	#0x1fc
 8000cf2:      	ldr	r1, [sp]
 8000cf4:      	mov	r2, r0
 8000cf6:      	str	r1, [sp, #0x28]
 8000cf8:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 8000cfc:      	ldr	r0, [r1]
 8000cfe:      	bic	r0, r0, #0x30000000
 8000d02:      	and	r2, r2, #0x3
 8000d06:      	orr.w	r0, r0, r2, lsl #28
 8000d0a:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d0c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb93255bf0ee50d18E+0x48>
 8000d0e:      	ldr	r0, [sp]
 8000d10:      	add	sp, #0x30
 8000d12:      	pop	{r7, pc}

08000d14 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h400713878f7db76bE>:
;                             pub fn into_push_pull_output(
 8000d14:      	push	{r7, lr}
 8000d16:      	mov	r7, sp
 8000d18:      	sub	sp, #0x78
 8000d1a:      	str	r1, [sp, #0x8]
 8000d1c:      	str	r0, [sp, #0x18]
 8000d1e:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d20:      	bl	#0x7aa
 8000d24:      	str	r0, [sp, #0xc]
 8000d26:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h400713878f7db76bE+0x14>
 8000d28:      	ldr	r0, [sp, #0xc]
 8000d2a:      	str	r0, [sp, #0x30]
 8000d2c:      	str	r0, [sp, #0x38]
 8000d2e:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000d30:      	bl	#0x9c4
;         let bits = self.register.get();
 8000d34:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d36:      	str	r0, [sp, #0x28]
 8000d38:      	str	r0, [sp, #0x2c]
 8000d3a:      	add	r0, sp, #0x28
 8000d3c:      	str	r0, [sp, #0x20]
 8000d3e:      	add	r0, sp, #0x2c
 8000d40:      	str	r0, [sp, #0x24]
 8000d42:      	ldr	r0, [sp, #0x20]
 8000d44:      	ldr	r1, [sp, #0x24]
 8000d46:      	bl	#0x54
 8000d4a:      	mov	r1, r0
 8000d4c:      	ldr	r0, [sp, #0xc]
 8000d4e:      	ldr	r1, [r1]
 8000d50:      	str	r0, [sp, #0x40]
 8000d52:      	str	r1, [sp, #0x44]
 8000d54:      	str	r0, [sp, #0x48]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d56:      	bl	#0x9d2
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d5a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h400713878f7db76bE+0x48>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d5c:      	ldr	r0, [sp, #0x8]
 8000d5e:      	bl	#0x77e
 8000d62:      	str	r0, [sp, #0x4]
 8000d64:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h400713878f7db76bE+0x52>
 8000d66:      	ldr	r0, [sp, #0x4]
 8000d68:      	str	r0, [sp, #0x5c]
 8000d6a:      	str	r0, [sp, #0x64]
 8000d6c:      	str	r0, [sp, #0x68]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000d6e:      	bl	#0x986
;         let bits = self.register.get();
 8000d72:      	str	r0, [sp, #0x60]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d74:      	str	r0, [sp, #0x54]
 8000d76:      	str	r0, [sp, #0x58]
 8000d78:      	add	r0, sp, #0x54
 8000d7a:      	str	r0, [sp, #0x4c]
 8000d7c:      	add	r0, sp, #0x58
 8000d7e:      	str	r0, [sp, #0x50]
 8000d80:      	ldr	r0, [sp, #0x4c]
 8000d82:      	ldr	r1, [sp, #0x50]
 8000d84:      	bl	#0x60
 8000d88:      	mov	r1, r0
 8000d8a:      	ldr	r0, [sp, #0x4]
 8000d8c:      	ldr	r1, [r1]
 8000d8e:      	str	r0, [sp, #0x6c]
 8000d90:      	str	r1, [sp, #0x70]
 8000d92:      	str	r0, [sp, #0x74]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d94:      	bl	#0x994
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d98:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h400713878f7db76bE+0x86>
;                             }
 8000d9a:      	add	sp, #0x78
 8000d9c:      	pop	{r7, pc}

08000d9e <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h01ca9931f2d74400E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d9e:      	push	{r7, lr}
 8000da0:      	mov	r7, sp
 8000da2:      	sub	sp, #0x30
 8000da4:      	str	r0, [sp, #0x8]
 8000da6:      	str	r1, [sp, #0xc]
 8000da8:      	str	r1, [sp, #0x14]
;         MODER15_W { w: self }
 8000daa:      	str	r1, [sp, #0x10]
;     }
 8000dac:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000dae:      	str	r0, [sp]
 8000db0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h01ca9931f2d74400E+0x14>
 8000db2:      	ldr	r1, [sp]
 8000db4:      	str	r1, [sp, #0x1c]
 8000db6:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000db8:      	strb	r0, [r7, #-21]
 8000dbc:      	ldrb	r0, [r7, #-21]
 8000dc0:      	str	r1, [sp, #0x20]
 8000dc2:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000dc6:      	bl	#0x124
 8000dca:      	ldr	r1, [sp]
 8000dcc:      	mov	r2, r0
 8000dce:      	str	r1, [sp, #0x28]
 8000dd0:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 8000dd4:      	ldr	r0, [r1]
 8000dd6:      	bic	r0, r0, #0xc0000000
 8000dda:      	orr.w	r0, r0, r2, lsl #30
 8000dde:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000de0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h01ca9931f2d74400E+0x44>
 8000de2:      	ldr	r0, [sp]
 8000de4:      	add	sp, #0x30
 8000de6:      	pop	{r7, pc}

08000de8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h9f0e1ced5afeecaeE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000de8:      	push	{r7, lr}
 8000dea:      	mov	r7, sp
 8000dec:      	sub	sp, #0x30
 8000dee:      	str	r0, [sp, #0x8]
 8000df0:      	str	r1, [sp, #0xc]
 8000df2:      	str	r1, [sp, #0x14]
;         OT15_W { w: self }
 8000df4:      	str	r1, [sp, #0x10]
;     }
 8000df6:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000df8:      	str	r0, [sp]
 8000dfa:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h9f0e1ced5afeecaeE+0x14>
 8000dfc:      	ldr	r1, [sp]
 8000dfe:      	str	r1, [sp, #0x1c]
 8000e00:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000e02:      	strb	r0, [r7, #-21]
 8000e06:      	ldrb	r0, [r7, #-21]
 8000e0a:      	str	r1, [sp, #0x20]
 8000e0c:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000e10:      	bl	#0xf0
 8000e14:      	ldr	r1, [sp]
 8000e16:      	mov	r2, r0
 8000e18:      	str	r1, [sp, #0x28]
 8000e1a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 8000e1e:      	ldr	r0, [r1]
 8000e20:      	bic	r0, r0, #0x8000
 8000e24:      	orr.w	r0, r0, r2, lsl #15
 8000e28:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e2a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h9f0e1ced5afeecaeE+0x44>
 8000e2c:      	ldr	r0, [sp]
 8000e2e:      	add	sp, #0x30
 8000e30:      	pop	{r7, pc}

08000e32 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h85633a8fef617e58E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000e32:      	sub	sp, #0x8
 8000e34:      	movs	r0, #0x8
; gpio!([
 8000e36:      	strb.w	r0, [sp, #0x3]
;                             }
 8000e3a:      	ldrb.w	r0, [sp, #0x3]
 8000e3e:      	add	sp, #0x8
 8000e40:      	bx	lr

08000e42 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h21bdaa83f3980edfE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000e42:      	sub	sp, #0x8
 8000e44:      	movs	r0, #0x9
; gpio!([
 8000e46:      	strb.w	r0, [sp, #0x3]
;                             }
 8000e4a:      	ldrb.w	r0, [sp, #0x3]
 8000e4e:      	add	sp, #0x8
 8000e50:      	bx	lr

08000e52 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h73a14e8b1f5e6849E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000e52:      	sub	sp, #0x8
 8000e54:      	movs	r0, #0xa
; gpio!([
 8000e56:      	strb.w	r0, [sp, #0x3]
;                             }
 8000e5a:      	ldrb.w	r0, [sp, #0x3]
 8000e5e:      	add	sp, #0x8
 8000e60:      	bx	lr

08000e62 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h9da37fc5d2effacdE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000e62:      	sub	sp, #0x8
 8000e64:      	movs	r0, #0xb
; gpio!([
 8000e66:      	strb.w	r0, [sp, #0x3]
;                             }
 8000e6a:      	ldrb.w	r0, [sp, #0x3]
 8000e6e:      	add	sp, #0x8
 8000e70:      	bx	lr

08000e72 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h2086879fe5b80e7fE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000e72:      	sub	sp, #0x8
 8000e74:      	movs	r0, #0xc
; gpio!([
 8000e76:      	strb.w	r0, [sp, #0x3]
;                             }
 8000e7a:      	ldrb.w	r0, [sp, #0x3]
 8000e7e:      	add	sp, #0x8
 8000e80:      	bx	lr

08000e82 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h18eb4d7191dbffccE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000e82:      	sub	sp, #0x8
 8000e84:      	movs	r0, #0xd
; gpio!([
 8000e86:      	strb.w	r0, [sp, #0x3]
;                             }
 8000e8a:      	ldrb.w	r0, [sp, #0x3]
 8000e8e:      	add	sp, #0x8
 8000e90:      	bx	lr

08000e92 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h2ea6dd5da364c9fbE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000e92:      	sub	sp, #0x8
 8000e94:      	movs	r0, #0xe
; gpio!([
 8000e96:      	strb.w	r0, [sp, #0x3]
;                             }
 8000e9a:      	ldrb.w	r0, [sp, #0x3]
 8000e9e:      	add	sp, #0x8
 8000ea0:      	bx	lr

08000ea2 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h87cac20051b12b58E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8000ea2:      	sub	sp, #0x8
 8000ea4:      	movs	r0, #0xf
; gpio!([
 8000ea6:      	strb.w	r0, [sp, #0x3]
;                             }
 8000eaa:      	ldrb.w	r0, [sp, #0x3]
 8000eae:      	add	sp, #0x8
 8000eb0:      	bx	lr

08000eb2 <<T as switch_hal::IntoSwitch>::into_switch::hb0d7539cfed45059>:
;     fn into_switch<ActiveLevel>(self) -> Switch<Self, ActiveLevel> {
 8000eb2:      	push	{r7, lr}
 8000eb4:      	mov	r7, sp
 8000eb6:      	sub	sp, #0x8
 8000eb8:      	strb	r0, [r7, #-1]
;         Switch::<Self, ActiveLevel>::new(self)
 8000ebc:      	bl	#0xa
 8000ec0:      	str	r0, [sp]
 8000ec2:      	b	#-0x2 <<T as switch_hal::IntoSwitch>::into_switch::hb0d7539cfed45059+0x12>
;     }
 8000ec4:      	ldr	r0, [sp]
 8000ec6:      	add	sp, #0x8
 8000ec8:      	pop	{r7, pc}

08000eca <switch_hal::Switch<IoPin,ActiveLevel>::new::hfdb508e4f858e107>:
;     pub fn new(pin: IoPin) -> Self {
 8000eca:      	sub	sp, #0x4
 8000ecc:      	strb.w	r0, [sp, #0x3]
;         Switch {
 8000ed0:      	strb.w	r0, [sp, #0x2]
;     }
 8000ed4:      	ldrb.w	r0, [sp, #0x2]
 8000ed8:      	add	sp, #0x4
 8000eda:      	bx	lr

08000edc <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hfb7c3c1bdb58e166>:
;     fn off(&mut self) -> Result<(), Self::Error> {
 8000edc:      	push	{r7, lr}
 8000ede:      	mov	r7, sp
 8000ee0:      	sub	sp, #0x8
 8000ee2:      	str	r0, [sp, #0x4]
;         self.pin.set_low()
 8000ee4:      	bl	#-0xa7a
 8000ee8:      	b	#-0x2 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hfb7c3c1bdb58e166+0xe>
;     }
 8000eea:      	add	sp, #0x8
 8000eec:      	pop	{r7, pc}

08000eee <<T as core::convert::Into<U>>::into::h91f7d271d83f1ace>:
 8000eee:      	sub	sp, #0x8
 8000ef0:      	mov	r1, r0
 8000ef2:      	str	r1, [sp]
 8000ef4:      	strb.w	r0, [sp, #0x6]
 8000ef8:      	strb.w	r0, [sp, #0x7]
 8000efc:      	b	#-0x2 <<T as core::convert::Into<U>>::into::h91f7d271d83f1ace+0x10>
 8000efe:      	ldr	r0, [sp]
 8000f00:      	add	sp, #0x8
 8000f02:      	bx	lr

08000f04 <<T as core::convert::Into<U>>::into::hc835a3360ab0d2b1>:
 8000f04:      	sub	sp, #0x8
 8000f06:      	mov	r1, r0
 8000f08:      	str	r1, [sp]
 8000f0a:      	strb.w	r0, [sp, #0x6]
 8000f0e:      	strb.w	r0, [sp, #0x7]
 8000f12:      	b	#-0x2 <<T as core::convert::Into<U>>::into::hc835a3360ab0d2b1+0x10>
 8000f14:      	ldr	r0, [sp]
 8000f16:      	and	r0, r0, #0x1
 8000f1a:      	add	sp, #0x8
 8000f1c:      	bx	lr

08000f1e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h72ac6f2ab64098beE>:
 8000f1e:      	sub	sp, #0x8
 8000f20:      	movs	r0, #0x1
 8000f22:      	cbnz	r0, #0x4
 8000f24:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h72ac6f2ab64098beE+0x8>
 8000f26:      	b	#0x8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h72ac6f2ab64098beE+0x14>
 8000f28:      	trap
 8000f2a:      	movs	r0, #0x1
 8000f2c:      	strb.w	r0, [sp, #0x3]
 8000f30:      	b	#0x6 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h72ac6f2ab64098beE+0x1c>
 8000f32:      	movs	r0, #0x0
 8000f34:      	strb.w	r0, [sp, #0x3]
 8000f38:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h72ac6f2ab64098beE+0x1c>
 8000f3a:      	movs	r0, #0x0
 8000f3c:      	cbnz	r0, #0x8
 8000f3e:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h72ac6f2ab64098beE+0x22>
 8000f40:      	ldrb.w	r0, [sp, #0x3]
 8000f44:      	add	sp, #0x8
 8000f46:      	bx	lr
 8000f48:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h72ac6f2ab64098beE+0x22>

08000f4a <core::option::Option<T>::unwrap::hdba3790032b26dcd>:
 8000f4a:      	push	{r7, lr}
 8000f4c:      	mov	r7, sp
 8000f4e:      	sub	sp, #0x10
 8000f50:      	str	r1, [sp, #0x4]
 8000f52:      	strb	r0, [r7, #-5]
 8000f56:      	ldrb	r1, [r7, #-5]
 8000f5a:      	lsls	r0, r1, #0x1f
 8000f5c:      	cbz	r0, #0x4
 8000f5e:      	b	#-0x2 <core::option::Option<T>::unwrap::hdba3790032b26dcd+0x16>
 8000f60:      	b	#0x12 <core::option::Option<T>::unwrap::hdba3790032b26dcd+0x2c>
 8000f62:      	trap
 8000f64:      	ldr	r2, [sp, #0x4]
 8000f66:      	movw	r0, #0x3483
 8000f6a:      	movt	r0, #0x800
 8000f6e:      	movs	r1, #0x2b
 8000f70:      	bl	#0xb4e
 8000f74:      	trap
 8000f76:      	add	sp, #0x10
 8000f78:      	pop	{r7, pc}

08000f7a <core::option::Option<T>::unwrap::hf7011e60d173429f>:
 8000f7a:      	push	{r7, lr}
 8000f7c:      	mov	r7, sp
 8000f7e:      	sub	sp, #0x10
 8000f80:      	str	r1, [sp, #0x4]
 8000f82:      	strb	r0, [r7, #-5]
 8000f86:      	ldrb	r1, [r7, #-5]
 8000f8a:      	lsls	r0, r1, #0x1f
 8000f8c:      	cbz	r0, #0x4
 8000f8e:      	b	#-0x2 <core::option::Option<T>::unwrap::hf7011e60d173429f+0x16>
 8000f90:      	b	#0x12 <core::option::Option<T>::unwrap::hf7011e60d173429f+0x2c>
 8000f92:      	trap
 8000f94:      	ldr	r2, [sp, #0x4]
 8000f96:      	movw	r0, #0x3483
 8000f9a:      	movt	r0, #0x800
 8000f9e:      	movs	r1, #0x2b
 8000fa0:      	bl	#0xb1e
 8000fa4:      	trap
 8000fa6:      	add	sp, #0x10
 8000fa8:      	pop	{r7, pc}

08000faa <stm32f3::stm32f303::Peripherals::take::h82a0a8929858a03b>:
;     pub fn take() -> Option<Self> {
 8000faa:      	push	{r7, lr}
 8000fac:      	mov	r7, sp
 8000fae:      	sub	sp, #0x8
;         cortex_m::interrupt::free(|_| {
 8000fb0:      	bl	#0x7c
 8000fb4:      	str	r0, [sp, #0x4]
 8000fb6:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::h82a0a8929858a03b+0xe>
;     }
 8000fb8:      	ldr	r0, [sp, #0x4]
 8000fba:      	and	r0, r0, #0x1
 8000fbe:      	add	sp, #0x8
 8000fc0:      	pop	{r7, pc}

08000fc2 <stm32f3::stm32f303::Peripherals::steal::he44a11cb76de6e07>:
;     pub unsafe fn steal() -> Self {
 8000fc2:      	sub	sp, #0x4
;         DEVICE_PERIPHERALS = true;
 8000fc4:      	movw	r1, #0x0
 8000fc8:      	movt	r1, #0x2000
 8000fcc:      	movs	r0, #0x1
 8000fce:      	strb	r0, [r1]
;     }
 8000fd0:      	add	sp, #0x4
 8000fd2:      	bx	lr

08000fd4 <cortex_m::interrupt::free::h08356a6a0c6ddbc4>:
; pub fn free<F, R>(f: F) -> R
 8000fd4:      	push	{r7, lr}
 8000fd6:      	mov	r7, sp
 8000fd8:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8000fda:      	bl	#0x230
 8000fde:      	mov	r1, r0
 8000fe0:      	str	r1, [sp, #0x8]
 8000fe2:      	strb	r0, [r7, #-2]
 8000fe6:      	b	#-0x2 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x14>
;     disable();
 8000fe8:      	bl	#0x286
 8000fec:      	b	#-0x2 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 8000fee:      	bl	#0x9be
 8000ff2:      	b	#-0x2 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x20>
 8000ff4:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 8000ff6:      	str	r0, [sp, #0xc]
 8000ff8:      	ldr	r0, [sp, #0xc]
 8000ffa:      	bl	#0x120
 8000ffe:      	mov	r1, r0
 8001000:      	str	r1, [sp, #0x4]
 8001002:      	strb	r0, [r7, #-1]
 8001006:      	b	#-0x2 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x34>
;     if primask.is_active() {
 8001008:      	ldr	r0, [sp, #0x8]
 800100a:      	and	r0, r0, #0x1
 800100e:      	bl	#0x22e
 8001012:      	str	r0, [sp]
 8001014:      	b	#-0x2 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x42>
 8001016:      	ldr	r0, [sp]
 8001018:      	lsls	r0, r0, #0x1f
 800101a:      	cbnz	r0, #0x2
 800101c:      	b	#-0x2 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x4a>
 800101e:      	b	#0x4 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x52>
;         unsafe { enable() }
 8001020:      	bl	#0x242
 8001024:      	b	#-0x2 <cortex_m::interrupt::free::h08356a6a0c6ddbc4+0x52>
; }
 8001026:      	ldr	r0, [sp, #0x4]
 8001028:      	and	r0, r0, #0x1
 800102c:      	add	sp, #0x18
 800102e:      	pop	{r7, pc}

08001030 <cortex_m::interrupt::free::hbe78c45d84419c24>:
; pub fn free<F, R>(f: F) -> R
 8001030:      	push	{r7, lr}
 8001032:      	mov	r7, sp
 8001034:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8001036:      	bl	#0x1d4
 800103a:      	mov	r1, r0
 800103c:      	str	r1, [sp, #0x8]
 800103e:      	strb	r0, [r7, #-2]
 8001042:      	b	#-0x2 <cortex_m::interrupt::free::hbe78c45d84419c24+0x14>
;     disable();
 8001044:      	bl	#0x22a
 8001048:      	b	#-0x2 <cortex_m::interrupt::free::hbe78c45d84419c24+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 800104a:      	bl	#0x962
 800104e:      	b	#-0x2 <cortex_m::interrupt::free::hbe78c45d84419c24+0x20>
 8001050:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 8001052:      	str	r0, [sp, #0xc]
 8001054:      	ldr	r0, [sp, #0xc]
 8001056:      	bl	#0x8e
 800105a:      	mov	r1, r0
 800105c:      	str	r1, [sp, #0x4]
 800105e:      	strb	r0, [r7, #-1]
 8001062:      	b	#-0x2 <cortex_m::interrupt::free::hbe78c45d84419c24+0x34>
;     if primask.is_active() {
 8001064:      	ldr	r0, [sp, #0x8]
 8001066:      	and	r0, r0, #0x1
 800106a:      	bl	#0x1d2
 800106e:      	str	r0, [sp]
 8001070:      	b	#-0x2 <cortex_m::interrupt::free::hbe78c45d84419c24+0x42>
 8001072:      	ldr	r0, [sp]
 8001074:      	lsls	r0, r0, #0x1f
 8001076:      	cbnz	r0, #0x2
 8001078:      	b	#-0x2 <cortex_m::interrupt::free::hbe78c45d84419c24+0x4a>
 800107a:      	b	#0x4 <cortex_m::interrupt::free::hbe78c45d84419c24+0x52>
;         unsafe { enable() }
 800107c:      	bl	#0x1e6
 8001080:      	b	#-0x2 <cortex_m::interrupt::free::hbe78c45d84419c24+0x52>
; }
 8001082:      	ldr	r0, [sp, #0x4]
 8001084:      	and	r0, r0, #0x1
 8001088:      	add	sp, #0x18
 800108a:      	pop	{r7, pc}

0800108c <cortex_m::interrupt::free::hf0d99a000dee1daf>:
; pub fn free<F, R>(f: F) -> R
 800108c:      	push	{r7, lr}
 800108e:      	mov	r7, sp
 8001090:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8001092:      	bl	#0x178
 8001096:      	mov	r1, r0
 8001098:      	str	r1, [sp, #0x8]
 800109a:      	strb	r0, [r7, #-2]
 800109e:      	b	#-0x2 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x14>
;     disable();
 80010a0:      	bl	#0x1ce
 80010a4:      	b	#-0x2 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 80010a6:      	bl	#0x906
 80010aa:      	b	#-0x2 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x20>
 80010ac:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 80010ae:      	str	r0, [sp, #0xc]
 80010b0:      	ldr	r0, [sp, #0xc]
 80010b2:      	bl	#0x9e
 80010b6:      	mov	r1, r0
 80010b8:      	str	r1, [sp, #0x4]
 80010ba:      	strb	r0, [r7, #-1]
 80010be:      	b	#-0x2 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x34>
;     if primask.is_active() {
 80010c0:      	ldr	r0, [sp, #0x8]
 80010c2:      	and	r0, r0, #0x1
 80010c6:      	bl	#0x176
 80010ca:      	str	r0, [sp]
 80010cc:      	b	#-0x2 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x42>
 80010ce:      	ldr	r0, [sp]
 80010d0:      	lsls	r0, r0, #0x1f
 80010d2:      	cbnz	r0, #0x2
 80010d4:      	b	#-0x2 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x4a>
 80010d6:      	b	#0x4 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x52>
;         unsafe { enable() }
 80010d8:      	bl	#0x18a
 80010dc:      	b	#-0x2 <cortex_m::interrupt::free::hf0d99a000dee1daf+0x52>
; }
 80010de:      	ldr	r0, [sp, #0x4]
 80010e0:      	and	r0, r0, #0x1
 80010e4:      	add	sp, #0x18
 80010e6:      	pop	{r7, pc}

080010e8 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hbef32dfd7aa9d518>:
;         cortex_m::interrupt::free(|_| {
 80010e8:      	push	{r7, lr}
 80010ea:      	mov	r7, sp
 80010ec:      	sub	sp, #0x10
 80010ee:      	str	r0, [sp, #0xc]
;             if unsafe { DEVICE_PERIPHERALS } {
 80010f0:      	movw	r0, #0x0
 80010f4:      	movt	r0, #0x2000
 80010f8:      	ldrb	r0, [r0]
 80010fa:      	lsls	r0, r0, #0x1f
 80010fc:      	cbnz	r0, #0x6
 80010fe:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hbef32dfd7aa9d518+0x18>
;                 Some(unsafe { Peripherals::steal() })
 8001100:      	bl	#-0x142
 8001104:      	b	#0xe <stm32f3::stm32f303::Peripherals::take::{{closure}}::hbef32dfd7aa9d518+0x2e>
 8001106:      	movs	r0, #0x0
;                 None
 8001108:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 800110c:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hbef32dfd7aa9d518+0x26>
;         })
 800110e:      	ldrb	r0, [r7, #-9]
 8001112:      	add	sp, #0x10
 8001114:      	pop	{r7, pc}
 8001116:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 8001118:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 800111c:      	b	#-0x12 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hbef32dfd7aa9d518+0x26>

0800111e <cortex_m::peripheral::Peripherals::take::{{closure}}::h653658aea86ef7db>:
;         interrupt::free(|_| {
 800111e:      	push	{r7, lr}
 8001120:      	mov	r7, sp
 8001122:      	sub	sp, #0x10
 8001124:      	str	r0, [sp, #0xc]
;             if unsafe { TAKEN } {
 8001126:      	movw	r0, #0x1
 800112a:      	movt	r0, #0x2000
 800112e:      	ldrb	r0, [r0]
 8001130:      	lsls	r0, r0, #0x1f
 8001132:      	cbnz	r0, #0x6
 8001134:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h653658aea86ef7db+0x18>
;                 Some(unsafe { Peripherals::steal() })
 8001136:      	bl	#0x96
 800113a:      	b	#0xe <cortex_m::peripheral::Peripherals::take::{{closure}}::h653658aea86ef7db+0x2e>
 800113c:      	movs	r0, #0x0
;                 None
 800113e:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 8001142:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h653658aea86ef7db+0x26>
;         })
 8001144:      	ldrb	r0, [r7, #-9]
 8001148:      	add	sp, #0x10
 800114a:      	pop	{r7, pc}
 800114c:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 800114e:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 8001152:      	b	#-0x12 <cortex_m::peripheral::Peripherals::take::{{closure}}::h653658aea86ef7db+0x26>

08001154 <cortex_m::peripheral::Peripherals::take::{{closure}}::hdee813af6e10a1c9>:
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001154:      	push	{r7, lr}
 8001156:      	mov	r7, sp
 8001158:      	sub	sp, #0x10
 800115a:      	str	r0, [sp, #0xc]
 800115c:      	bl	#0x32
 8001160:      	strb	r0, [r7, #-9]
 8001164:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::hdee813af6e10a1c9+0x12>
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8001166:      	ldrb	r1, [r7, #-9]
 800116a:      	lsls	r0, r1, #0x1f
 800116c:      	cbz	r0, #0x4
 800116e:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::hdee813af6e10a1c9+0x1c>
 8001170:      	b	#0x8 <cortex_m::peripheral::Peripherals::take::{{closure}}::hdee813af6e10a1c9+0x28>
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001172:      	trap
 8001174:      	movs	r0, #0x0
;             None    => None,
 8001176:      	strb	r0, [r7, #-10]
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 800117a:      	b	#0xc <cortex_m::peripheral::Peripherals::take::{{closure}}::hdee813af6e10a1c9+0x36>
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 800117c:      	bl	#0x42
 8001180:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::hdee813af6e10a1c9+0x2e>
 8001182:      	movs	r0, #0x1
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8001184:      	strb	r0, [r7, #-10]
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001188:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::hdee813af6e10a1c9+0x36>
;         })
 800118a:      	ldrb	r0, [r7, #-10]
 800118e:      	add	sp, #0x10
 8001190:      	pop	{r7, pc}

08001192 <cortex_m::peripheral::Peripherals::take::h922530395f94846d>:
;     pub fn take() -> Option<Self> {
 8001192:      	push	{r7, lr}
 8001194:      	mov	r7, sp
 8001196:      	sub	sp, #0x8
;         interrupt::free(|_| {
 8001198:      	bl	#-0x1c8
 800119c:      	str	r0, [sp, #0x4]
 800119e:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::h922530395f94846d+0xe>
;     }
 80011a0:      	ldr	r0, [sp, #0x4]
 80011a2:      	and	r0, r0, #0x1
 80011a6:      	add	sp, #0x8
 80011a8:      	pop	{r7, pc}

080011aa <cortex_m::peripheral::Peripherals::take::hd556adb7aeb846fa>:
;     pub fn take() -> Option<Self> {
 80011aa:      	push	{r7, lr}
 80011ac:      	mov	r7, sp
 80011ae:      	sub	sp, #0x8
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 80011b0:      	bl	#-0x128
 80011b4:      	str	r0, [sp, #0x4]
 80011b6:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::hd556adb7aeb846fa+0xe>
;     }
 80011b8:      	ldr	r0, [sp, #0x4]
 80011ba:      	and	r0, r0, #0x1
 80011be:      	add	sp, #0x8
 80011c0:      	pop	{r7, pc}

080011c2 <cortex_m::peripheral::Peripherals::steal::h726a2870803256e2>:
;     pub unsafe fn steal() -> Self {
 80011c2:      	push	{r7, lr}
 80011c4:      	mov	r7, sp
;         cortex_m_0_7::peripheral::Peripherals::steal();
 80011c6:      	bl	#0x6
 80011ca:      	b	#-0x2 <cortex_m::peripheral::Peripherals::steal::h726a2870803256e2+0xa>
;         core::mem::transmute(())
 80011cc:      	b	#-0x2 <cortex_m::peripheral::Peripherals::steal::h726a2870803256e2+0xc>
;     }
 80011ce:      	pop	{r7, pc}

080011d0 <cortex_m::peripheral::Peripherals::steal::hb46874da503a32b7>:
;     pub unsafe fn steal() -> Self {
 80011d0:      	sub	sp, #0x4
;         TAKEN = true;
 80011d2:      	movw	r1, #0x1
 80011d6:      	movt	r1, #0x2000
 80011da:      	movs	r0, #0x1
 80011dc:      	strb	r0, [r1]
;     }
 80011de:      	add	sp, #0x4
 80011e0:      	bx	lr

080011e2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h6b5826d94809ecd1>:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80011e2:      	sub	sp, #0x14
 80011e4:      	str	r0, [sp, #0x4]
 80011e6:      	str	r1, [sp, #0x8]
 80011e8:      	ldrb	r0, [r0]
 80011ea:      	str	r0, [sp, #0xc]
 80011ec:      	ldrb	r1, [r1]
 80011ee:      	str	r1, [sp, #0x10]
 80011f0:      	cmp	r0, r1
 80011f2:      	beq	#0x8 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h6b5826d94809ecd1+0x1c>
 80011f4:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h6b5826d94809ecd1+0x14>
 80011f6:      	movs	r0, #0x0
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80011f8:      	strb.w	r0, [sp, #0x3]
 80011fc:      	b	#0x6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h6b5826d94809ecd1+0x24>
 80011fe:      	movs	r0, #0x1
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 8001200:      	strb.w	r0, [sp, #0x3]
 8001204:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h6b5826d94809ecd1+0x24>
 8001206:      	ldrb.w	r0, [sp, #0x3]
 800120a:      	add	sp, #0x14
 800120c:      	bx	lr

0800120e <cortex_m::register::primask::read::habd01751d4d25bb6>:
; pub fn read() -> Primask {
 800120e:      	push	{r7, lr}
 8001210:      	mov	r7, sp
 8001212:      	sub	sp, #0x10
;     let r: u32 = call_asm!(__primask_r() -> u32);
 8001214:      	bl	#0x792
 8001218:      	mov	r1, r0
 800121a:      	str	r1, [sp, #0x4]
 800121c:      	str	r0, [sp, #0xc]
 800121e:      	b	#-0x2 <cortex_m::register::primask::read::habd01751d4d25bb6+0x12>
;     if r & (1 << 0) == (1 << 0) {
 8001220:      	ldr	r0, [sp, #0x4]
 8001222:      	lsls	r0, r0, #0x1f
 8001224:      	cbnz	r0, #0x8
 8001226:      	b	#-0x2 <cortex_m::register::primask::read::habd01751d4d25bb6+0x1a>
 8001228:      	movs	r0, #0x0
;         Primask::Active
 800122a:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 800122e:      	b	#0x6 <cortex_m::register::primask::read::habd01751d4d25bb6+0x2a>
 8001230:      	movs	r0, #0x1
;         Primask::Inactive
 8001232:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 8001236:      	b	#-0x2 <cortex_m::register::primask::read::habd01751d4d25bb6+0x2a>
; }
 8001238:      	ldrb	r0, [r7, #-5]
 800123c:      	add	sp, #0x10
 800123e:      	pop	{r7, pc}

08001240 <cortex_m::register::primask::Primask::is_active::hb8359f2e0819b2b7>:
;     pub fn is_active(self) -> bool {
 8001240:      	push	{r7, lr}
 8001242:      	mov	r7, sp
 8001244:      	sub	sp, #0x8
 8001246:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 800124a:      	movw	r1, #0x34ae
 800124e:      	movt	r1, #0x800
 8001252:      	subs	r0, r7, #0x1
 8001254:      	bl	#-0x76
 8001258:      	str	r0, [sp]
 800125a:      	b	#-0x2 <cortex_m::register::primask::Primask::is_active::hb8359f2e0819b2b7+0x1c>
;     }
 800125c:      	ldr	r0, [sp]
 800125e:      	and	r0, r0, #0x1
 8001262:      	add	sp, #0x8
 8001264:      	pop	{r7, pc}

08001266 <cortex_m::interrupt::enable::h54d9247be5d90681>:
; pub unsafe fn enable() {
 8001266:      	push	{r7, lr}
 8001268:      	mov	r7, sp
;     call_asm!(__cpsie());
 800126a:      	bl	#0x738
 800126e:      	b	#-0x2 <cortex_m::interrupt::enable::h54d9247be5d90681+0xa>
; }
 8001270:      	pop	{r7, pc}

08001272 <cortex_m::interrupt::disable::h300af8dec2542d4d>:
; pub fn disable() {
 8001272:      	push	{r7, lr}
 8001274:      	mov	r7, sp
;     call_asm!(__cpsid());
 8001276:      	bl	#0x728
 800127a:      	b	#-0x2 <cortex_m::interrupt::disable::h300af8dec2542d4d+0xa>
; }
 800127c:      	pop	{r7, pc}

0800127e <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h0170472f5d60abe2>:
;     fn constrain(self) -> Rcc {
 800127e:      	push	{r4, r5, r7, lr}
 8001280:      	add	r7, sp, #0x8
 8001282:      	sub	sp, #0x38
;             cfgr: CFGR::default(),
 8001284:      	str	r0, [sp, #0x4]
 8001286:      	add	r0, sp, #0x8
 8001288:      	bl	#0x104
 800128c:      	b	#-0x2 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h0170472f5d60abe2+0x10>
 800128e:      	ldr	r0, [sp, #0x4]
 8001290:      	add	r1, sp, #0x8
;         Rcc {
 8001292:      	ldm.w	r1!, {r2, r3, r4, r12, lr}
 8001296:      	stm.w	r0!, {r2, r3, r4, r12, lr}
 800129a:      	ldm.w	r1, {r2, r3, r4, r5, r12, lr}
 800129e:      	stm.w	r0, {r2, r3, r4, r5, r12, lr}
;     }
 80012a2:      	add	sp, #0x38
 80012a4:      	pop	{r4, r5, r7, pc}

080012a6 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17haae00c6903760a7fE>:
;                         fn split(self, ahb: &mut AHB) -> Parts {
 80012a6:      	push	{r7, lr}
 80012a8:      	mov	r7, sp
 80012aa:      	sub	sp, #0xa0
 80012ac:      	str	r0, [sp, #0x8]
 80012ae:      	str	r0, [sp, #0x18]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80012b0:      	bl	#0xb8
 80012b4:      	str	r0, [sp, #0xc]
 80012b6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17haae00c6903760a7fE+0x12>
 80012b8:      	ldr	r0, [sp, #0xc]
 80012ba:      	str	r0, [sp, #0x2c]
 80012bc:      	str	r0, [sp, #0x34]
 80012be:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80012c0:      	bl	#0x434
;         let bits = self.register.get();
 80012c4:      	str	r0, [sp, #0x30]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80012c6:      	str	r0, [sp, #0x24]
 80012c8:      	str	r0, [sp, #0x28]
 80012ca:      	add	r0, sp, #0x24
 80012cc:      	str	r0, [sp, #0x1c]
 80012ce:      	add	r0, sp, #0x28
 80012d0:      	str	r0, [sp, #0x20]
 80012d2:      	ldr	r0, [sp, #0x1c]
 80012d4:      	ldr	r1, [sp, #0x20]
 80012d6:      	bl	#0x170
 80012da:      	mov	r1, r0
 80012dc:      	ldr	r0, [sp, #0xc]
 80012de:      	ldr	r1, [r1]
 80012e0:      	str	r0, [sp, #0x3c]
 80012e2:      	str	r1, [sp, #0x40]
 80012e4:      	str	r0, [sp, #0x44]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80012e6:      	bl	#0x442
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80012ea:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17haae00c6903760a7fE+0x46>
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80012ec:      	ldr	r0, [sp, #0x8]
 80012ee:      	bl	#0x8c
 80012f2:      	str	r0, [sp, #0x4]
 80012f4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17haae00c6903760a7fE+0x50>
 80012f6:      	ldr	r0, [sp, #0x4]
 80012f8:      	str	r0, [sp, #0x58]
 80012fa:      	str	r0, [sp, #0x60]
 80012fc:      	str	r0, [sp, #0x64]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80012fe:      	bl	#0x3f6
;         let bits = self.register.get();
 8001302:      	str	r0, [sp, #0x5c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001304:      	str	r0, [sp, #0x50]
 8001306:      	str	r0, [sp, #0x54]
 8001308:      	add	r0, sp, #0x50
 800130a:      	str	r0, [sp, #0x48]
 800130c:      	add	r0, sp, #0x54
 800130e:      	str	r0, [sp, #0x4c]
 8001310:      	ldr	r0, [sp, #0x48]
 8001312:      	ldr	r1, [sp, #0x4c]
 8001314:      	bl	#0x15e
 8001318:      	mov	r1, r0
 800131a:      	ldr	r0, [sp, #0x4]
 800131c:      	ldr	r1, [r1]
 800131e:      	str	r0, [sp, #0x68]
 8001320:      	str	r1, [sp, #0x6c]
 8001322:      	str	r0, [sp, #0x70]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001324:      	bl	#0x404
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001328:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17haae00c6903760a7fE+0x84>
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 800132a:      	ldr	r0, [sp, #0x8]
 800132c:      	bl	#0x4e
 8001330:      	str	r0, [sp]
 8001332:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17haae00c6903760a7fE+0x8e>
 8001334:      	ldr	r0, [sp]
 8001336:      	str	r0, [sp, #0x84]
 8001338:      	str	r0, [sp, #0x8c]
 800133a:      	str	r0, [sp, #0x90]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800133c:      	bl	#0x3b8
;         let bits = self.register.get();
 8001340:      	str	r0, [sp, #0x88]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001342:      	str	r0, [sp, #0x7c]
 8001344:      	str	r0, [sp, #0x80]
 8001346:      	add	r0, sp, #0x7c
 8001348:      	str	r0, [sp, #0x74]
 800134a:      	add	r0, sp, #0x80
 800134c:      	str	r0, [sp, #0x78]
 800134e:      	ldr	r0, [sp, #0x74]
 8001350:      	ldr	r1, [sp, #0x78]
 8001352:      	bl	#0x14c
 8001356:      	mov	r1, r0
 8001358:      	ldr	r0, [sp]
 800135a:      	ldr	r1, [r1]
 800135c:      	str	r0, [sp, #0x94]
 800135e:      	str	r1, [sp, #0x98]
 8001360:      	str	r0, [sp, #0x9c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001362:      	bl	#0x3c6
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001366:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17haae00c6903760a7fE+0xc2>
;                         }
 8001368:      	add	sp, #0xa0
 800136a:      	pop	{r7, pc}

0800136c <stm32f3xx_hal::rcc::AHB::enr::h0b270b6c1576d296>:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 800136c:      	sub	sp, #0x4
 800136e:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbenr }
 8001370:      	b	#-0x2 <stm32f3xx_hal::rcc::AHB::enr::h0b270b6c1576d296+0x6>
 8001372:      	movw	r0, #0x1014
 8001376:      	movt	r0, #0x4002
;     }
 800137a:      	add	sp, #0x4
 800137c:      	bx	lr

0800137e <stm32f3xx_hal::rcc::AHB::rstr::h807a4a1f70728b30>:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 800137e:      	sub	sp, #0x4
 8001380:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbrstr }
 8001382:      	b	#-0x2 <stm32f3xx_hal::rcc::AHB::rstr::h807a4a1f70728b30+0x6>
 8001384:      	movw	r0, #0x1028
 8001388:      	movt	r0, #0x4002
;     }
 800138c:      	add	sp, #0x4
 800138e:      	bx	lr

08001390 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2>:
; #[derive(Default)]
 8001390:      	push	{r4, r5, r6, r7, lr}
 8001392:      	add	r7, sp, #0xc
 8001394:      	push.w	{r8, r9, r10, r11}
 8001398:      	sub	sp, #0x34
;     hse: Option<u32>,
 800139a:      	str	r0, [sp, #0x28]
 800139c:      	bl	#0x98
 80013a0:      	str	r0, [sp, #0x2c]
 80013a2:      	str	r1, [sp, #0x30]
 80013a4:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2+0x16>
;     hse_bypass: bool,
 80013a6:      	bl	#0x9c
 80013aa:      	str	r0, [sp, #0x24]
 80013ac:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2+0x1e>
;     css: bool,
 80013ae:      	bl	#0x94
 80013b2:      	str	r0, [sp, #0x20]
 80013b4:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2+0x26>
;     hclk: Option<u32>,
 80013b6:      	bl	#0x7e
 80013ba:      	str	r0, [sp, #0x18]
 80013bc:      	str	r1, [sp, #0x1c]
 80013be:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2+0x30>
;     pclk1: Option<u32>,
 80013c0:      	bl	#0x74
 80013c4:      	str	r0, [sp, #0x10]
 80013c6:      	str	r1, [sp, #0x14]
 80013c8:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2+0x3a>
;     pclk2: Option<u32>,
 80013ca:      	bl	#0x6a
 80013ce:      	str	r0, [sp, #0x8]
 80013d0:      	str	r1, [sp, #0xc]
 80013d2:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2+0x44>
;     sysclk: Option<u32>,
 80013d4:      	bl	#0x60
 80013d8:      	str	r0, [sp]
 80013da:      	str	r1, [sp, #0x4]
 80013dc:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h350cae7fd85045e2+0x4e>
; #[derive(Default)]
 80013de:      	ldr	r0, [sp, #0x4]
 80013e0:      	ldr	r1, [sp, #0x28]
 80013e2:      	ldr	r2, [sp]
 80013e4:      	ldr	r3, [sp, #0xc]
 80013e6:      	ldr.w	r12, [sp, #0x8]
 80013ea:      	ldr.w	lr, [sp, #0x14]
 80013ee:      	ldr	r4, [sp, #0x10]
 80013f0:      	ldr	r5, [sp, #0x1c]
 80013f2:      	ldr	r6, [sp, #0x18]
 80013f4:      	ldr.w	r8, [sp, #0x20]
 80013f8:      	ldr.w	r9, [sp, #0x24]
 80013fc:      	ldr.w	r10, [sp, #0x30]
 8001400:      	ldr.w	r11, [sp, #0x2c]
 8001404:      	str.w	r11, [r1]
 8001408:      	str.w	r10, [r1, #0x4]
 800140c:      	and	r9, r9, #0x1
 8001410:      	strb.w	r9, [r1, #0x28]
 8001414:      	and	r8, r8, #0x1
 8001418:      	strb.w	r8, [r1, #0x29]
 800141c:      	str	r6, [r1, #0x8]
 800141e:      	str	r5, [r1, #0xc]
 8001420:      	str	r4, [r1, #0x10]
 8001422:      	str.w	lr, [r1, #0x14]
 8001426:      	str.w	r12, [r1, #0x18]
 800142a:      	str	r3, [r1, #0x1c]
 800142c:      	str	r2, [r1, #0x20]
 800142e:      	str	r0, [r1, #0x24]
 8001430:      	add	sp, #0x34
 8001432:      	pop.w	{r8, r9, r10, r11}
 8001436:      	pop	{r4, r5, r6, r7, pc}

08001438 <<core::option::Option<T> as core::default::Default>::default::haa985ad7f4f17c50>:
 8001438:      	sub	sp, #0x8
 800143a:      	movs	r0, #0x0
 800143c:      	str	r0, [sp]
 800143e:      	ldr	r0, [sp]
 8001440:      	ldr	r1, [sp, #0x4]
 8001442:      	add	sp, #0x8
 8001444:      	bx	lr

08001446 <<bool as core::default::Default>::default::hf0fdeba571c79660>:
 8001446:      	movs	r0, #0x0
 8001448:      	bx	lr

0800144a <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h8ea34379ca628252E>:
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800144a:      	sub	sp, #0x24
 800144c:      	str	r0, [sp, #0x8]
 800144e:      	str	r1, [sp, #0xc]
 8001450:      	str	r1, [sp, #0x14]
;         IOPEEN_W { w: self }
 8001452:      	str	r1, [sp, #0x10]
;     }
 8001454:      	ldr	r0, [sp, #0x10]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001456:      	str	r0, [sp]
 8001458:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h8ea34379ca628252E+0x10>
 800145a:      	ldr	r1, [sp]
 800145c:      	str	r1, [sp, #0x18]
 800145e:      	str	r1, [sp, #0x1c]
 8001460:      	movs	r0, #0x1
 8001462:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001466:      	ldr	r0, [r1]
 8001468:      	orr	r0, r0, #0x200000
 800146c:      	str	r0, [r1]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800146e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h8ea34379ca628252E+0x26>
 8001470:      	ldr	r0, [sp]
 8001472:      	add	sp, #0x24
 8001474:      	bx	lr

08001476 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hce256cc051ed3a47E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001476:      	sub	sp, #0x24
 8001478:      	str	r0, [sp, #0x8]
 800147a:      	str	r1, [sp, #0xc]
 800147c:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 800147e:      	str	r1, [sp, #0x10]
;     }
 8001480:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001482:      	str	r0, [sp]
 8001484:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hce256cc051ed3a47E+0x10>
 8001486:      	ldr	r1, [sp]
 8001488:      	str	r1, [sp, #0x18]
 800148a:      	str	r1, [sp, #0x1c]
 800148c:      	movs	r0, #0x1
 800148e:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001492:      	ldr	r0, [r1]
 8001494:      	orr	r0, r0, #0x200000
 8001498:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 800149a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hce256cc051ed3a47E+0x26>
 800149c:      	ldr	r0, [sp]
 800149e:      	add	sp, #0x24
 80014a0:      	bx	lr

080014a2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd023d6c898232613E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80014a2:      	sub	sp, #0x24
 80014a4:      	str	r0, [sp, #0x8]
 80014a6:      	str	r1, [sp, #0xc]
 80014a8:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 80014aa:      	str	r1, [sp, #0x10]
;     }
 80014ac:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80014ae:      	str	r0, [sp]
 80014b0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd023d6c898232613E+0x10>
 80014b2:      	ldr	r1, [sp]
 80014b4:      	str	r1, [sp, #0x18]
 80014b6:      	str	r1, [sp, #0x1c]
 80014b8:      	movs	r0, #0x0
 80014ba:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80014be:      	ldr	r0, [r1]
 80014c0:      	bic	r0, r0, #0x200000
 80014c4:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80014c6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hd023d6c898232613E+0x26>
 80014c8:      	ldr	r0, [sp]
 80014ca:      	add	sp, #0x24
 80014cc:      	bx	lr

080014ce <stm32f3xx_hal::gpio::gpioe::MODER::moder::hcd312d93a05beb12>:
;                         pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 80014ce:      	sub	sp, #0x4
 80014d0:      	str	r0, [sp]
; gpio!([
 80014d2:      	b	#-0x2 <stm32f3xx_hal::gpio::gpioe::MODER::moder::hcd312d93a05beb12+0x6>
 80014d4:      	movw	r0, #0x1000
 80014d8:      	movt	r0, #0x4800
;                         }
 80014dc:      	add	sp, #0x4
 80014de:      	bx	lr

080014e0 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h141fa30b6f024f4c>:
;                         pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 80014e0:      	sub	sp, #0x4
 80014e2:      	str	r0, [sp]
; gpio!([
 80014e4:      	b	#-0x2 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h141fa30b6f024f4c+0x6>
 80014e6:      	movw	r0, #0x1004
 80014ea:      	movt	r0, #0x4800
;                         }
 80014ee:      	add	sp, #0x4
 80014f0:      	bx	lr

080014f2 <ResetTrampoline>:
;             fn trampoline() -> ! {
 80014f2:      	push	{r7, lr}
 80014f4:      	mov	r7, sp
;                 unsafe { main() }
 80014f6:      	bl	#-0x130e
 80014fa:      	trap

080014fc <WWDG>:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 80014fc:      	push	{r7, lr}
 80014fe:      	mov	r7, sp
 8001500:      	sub	sp, #0x8
 8001502:      	b	#-0x2 <WWDG+0x8>
 8001504:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8001506:      	strb	r0, [r7, #-1]
 800150a:      	ldrb	r0, [r7, #-1]
 800150e:      	bl	#0x17a
 8001512:      	b	#-0x2 <WWDG+0x18>
;     loop {
 8001514:      	b	#-0x14 <WWDG+0x8>

08001516 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 8001516:      	bx	lr

08001518 <r0::zero_bss::h6ac8fbdefcd6ec43>:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 8001518:      	push	{r7, lr}
 800151a:      	mov	r7, sp
 800151c:      	sub	sp, #0x30
 800151e:      	str	r1, [sp, #0x10]
 8001520:      	str	r0, [sp, #0x14]
 8001522:      	str	r1, [sp, #0x18]
 8001524:      	b	#-0x2 <r0::zero_bss::h6ac8fbdefcd6ec43+0xe>
;     while sbss < ebss {
 8001526:      	ldr	r1, [sp, #0x10]
 8001528:      	ldr	r0, [sp, #0x14]
 800152a:      	cmp	r0, r1
 800152c:      	blo	#0x4 <r0::zero_bss::h6ac8fbdefcd6ec43+0x1c>
 800152e:      	b	#-0x2 <r0::zero_bss::h6ac8fbdefcd6ec43+0x18>
; }
 8001530:      	add	sp, #0x30
 8001532:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 8001534:      	ldr	r0, [sp, #0x14]
 8001536:      	str	r0, [sp, #0x8]
 8001538:      	bl	#0x90
 800153c:      	mov	r1, r0
 800153e:      	str	r1, [sp, #0xc]
 8001540:      	str	r0, [sp, #0x1c]
 8001542:      	str	r0, [sp, #0x20]
;         ptr::write_volatile(sbss, mem::zeroed());
 8001544:      	b	#-0x2 <r0::zero_bss::h6ac8fbdefcd6ec43+0x2e>
 8001546:      	ldr	r1, [sp, #0xc]
 8001548:      	ldr	r0, [sp, #0x8]
 800154a:      	bl	#0xe8
 800154e:      	b	#-0x2 <r0::zero_bss::h6ac8fbdefcd6ec43+0x38>
;         sbss = sbss.offset(1);
 8001550:      	ldr	r0, [sp, #0x14]
 8001552:      	str	r0, [sp, #0x24]
 8001554:      	movs	r1, #0x1
 8001556:      	str	r1, [sp, #0x28]
 8001558:      	adds	r0, #0x4
 800155a:      	str	r0, [sp, #0x2c]
 800155c:      	ldr	r0, [sp, #0x2c]
;         sbss = sbss.offset(1);
 800155e:      	str	r0, [sp, #0x4]
 8001560:      	b	#-0x2 <r0::zero_bss::h6ac8fbdefcd6ec43+0x4a>
 8001562:      	ldr	r0, [sp, #0x4]
 8001564:      	str	r0, [sp, #0x14]
;     while sbss < ebss {
 8001566:      	b	#-0x44 <r0::zero_bss::h6ac8fbdefcd6ec43+0xe>

08001568 <r0::init_data::h7f521e264e0e2146>:
; pub unsafe fn init_data<T>(
 8001568:      	push	{r7, lr}
 800156a:      	mov	r7, sp
 800156c:      	sub	sp, #0x38
 800156e:      	str	r1, [sp, #0x10]
 8001570:      	str	r0, [sp, #0x14]
 8001572:      	str	r2, [sp, #0x18]
 8001574:      	str	r1, [sp, #0x1c]
 8001576:      	b	#-0x2 <r0::init_data::h7f521e264e0e2146+0x10>
;     while sdata < edata {
 8001578:      	ldr	r1, [sp, #0x10]
 800157a:      	ldr	r0, [sp, #0x14]
 800157c:      	cmp	r0, r1
 800157e:      	blo	#0x4 <r0::init_data::h7f521e264e0e2146+0x1e>
 8001580:      	b	#-0x2 <r0::init_data::h7f521e264e0e2146+0x1a>
; }
 8001582:      	add	sp, #0x38
 8001584:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 8001586:      	ldr	r0, [sp, #0x14]
 8001588:      	str	r0, [sp, #0x8]
 800158a:      	ldr	r0, [sp, #0x18]
 800158c:      	bl	#0xb4
 8001590:      	str	r0, [sp, #0xc]
 8001592:      	b	#-0x2 <r0::init_data::h7f521e264e0e2146+0x2c>
 8001594:      	ldr	r1, [sp, #0xc]
 8001596:      	ldr	r0, [sp, #0x8]
 8001598:      	bl	#0xda
 800159c:      	b	#-0x2 <r0::init_data::h7f521e264e0e2146+0x36>
;         sdata = sdata.offset(1);
 800159e:      	ldr	r0, [sp, #0x14]
 80015a0:      	str	r0, [sp, #0x20]
 80015a2:      	movs	r1, #0x1
 80015a4:      	str	r1, [sp, #0x24]
 80015a6:      	adds	r0, #0x4
 80015a8:      	str	r0, [sp, #0x28]
 80015aa:      	ldr	r0, [sp, #0x28]
;         sdata = sdata.offset(1);
 80015ac:      	str	r0, [sp, #0x4]
 80015ae:      	b	#-0x2 <r0::init_data::h7f521e264e0e2146+0x48>
 80015b0:      	ldr	r0, [sp, #0x4]
 80015b2:      	str	r0, [sp, #0x14]
;         sidata = sidata.offset(1);
 80015b4:      	ldr	r0, [sp, #0x18]
 80015b6:      	str	r0, [sp, #0x2c]
 80015b8:      	movs	r1, #0x1
 80015ba:      	str	r1, [sp, #0x30]
 80015bc:      	adds	r0, #0x4
 80015be:      	str	r0, [sp, #0x34]
 80015c0:      	ldr	r0, [sp, #0x34]
;         sidata = sidata.offset(1);
 80015c2:      	str	r0, [sp]
 80015c4:      	b	#-0x2 <r0::init_data::h7f521e264e0e2146+0x5e>
 80015c6:      	ldr	r0, [sp]
 80015c8:      	str	r0, [sp, #0x18]
;     while sdata < edata {
 80015ca:      	b	#-0x56 <r0::init_data::h7f521e264e0e2146+0x10>

080015cc <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::haf2cbcdb3b24d276>:
 80015cc:      	push	{r7, lr}
 80015ce:      	mov	r7, sp
 80015d0:      	sub	sp, #0x18
 80015d2:      	ldr	r0, [sp, #0x4]
 80015d4:      	str	r0, [sp]
 80015d6:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::haf2cbcdb3b24d276+0xc>
 80015d8:      	mov	r0, sp
 80015da:      	str	r0, [sp, #0x14]
 80015dc:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::haf2cbcdb3b24d276+0x12>
 80015de:      	mov	r0, sp
 80015e0:      	str	r0, [sp, #0x8]
 80015e2:      	movs	r1, #0x0
 80015e4:      	strb	r1, [r7, #-9]
 80015e8:      	movs	r2, #0x1
 80015ea:      	str	r2, [sp, #0x10]
 80015ec:      	bl	#0x8
 80015f0:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::haf2cbcdb3b24d276+0x26>
 80015f2:      	ldr	r0, [sp]
 80015f4:      	add	sp, #0x18
 80015f6:      	pop	{r7, pc}

080015f8 <core::intrinsics::write_bytes::hd22bf679c9750060>:
 80015f8:      	push	{r7, lr}
 80015fa:      	mov	r7, sp
 80015fc:      	sub	sp, #0x10
 80015fe:      	str	r2, [sp]
 8001600:      	mov	r2, r1
 8001602:      	ldr	r1, [sp]
 8001604:      	str	r0, [sp, #0x4]
 8001606:      	strb	r2, [r7, #-5]
 800160a:      	str	r1, [sp, #0xc]
 800160c:      	lsls	r1, r1, #0x2
 800160e:      	uxtb	r2, r2
 8001610:      	bl	#0x1bb6
 8001614:      	b	#-0x2 <core::intrinsics::write_bytes::hd22bf679c9750060+0x1e>
 8001616:      	add	sp, #0x10
 8001618:      	pop	{r7, pc}

0800161a <core::intrinsics::copy_nonoverlapping::h5523b0db6dcee1be>:
 800161a:      	push	{r7, lr}
 800161c:      	mov	r7, sp
 800161e:      	sub	sp, #0x10
 8001620:      	str	r1, [sp]
 8001622:      	mov	r1, r0
 8001624:      	ldr	r0, [sp]
 8001626:      	str	r1, [sp, #0x4]
 8001628:      	str	r0, [sp, #0x8]
 800162a:      	str	r2, [sp, #0xc]
 800162c:      	lsls	r2, r2, #0x2
 800162e:      	bl	#0x1b08
 8001632:      	add	sp, #0x10
 8001634:      	pop	{r7, pc}

08001636 <core::ptr::write_volatile::h61d9e39981d26e7e>:
 8001636:      	sub	sp, #0x8
 8001638:      	str	r0, [sp]
 800163a:      	str	r1, [sp, #0x4]
 800163c:      	str	r1, [r0]
 800163e:      	b	#-0x2 <core::ptr::write_volatile::h61d9e39981d26e7e+0xa>
 8001640:      	add	sp, #0x8
 8001642:      	bx	lr

08001644 <core::ptr::read::hadb0b347a920b507>:
 8001644:      	push	{r7, lr}
 8001646:      	mov	r7, sp
 8001648:      	sub	sp, #0x20
 800164a:      	str	r0, [sp, #0x4]
 800164c:      	str	r0, [sp, #0xc]
 800164e:      	ldr	r0, [sp, #0x10]
 8001650:      	str	r0, [sp, #0x8]
 8001652:      	b	#-0x2 <core::ptr::read::hadb0b347a920b507+0x10>
 8001654:      	add	r0, sp, #0x8
 8001656:      	str	r0, [sp, #0x1c]
 8001658:      	b	#-0x2 <core::ptr::read::hadb0b347a920b507+0x16>
 800165a:      	ldr	r0, [sp, #0x4]
 800165c:      	add	r1, sp, #0x8
 800165e:      	movs	r2, #0x1
 8001660:      	bl	#-0x4a
 8001664:      	b	#-0x2 <core::ptr::read::hadb0b347a920b507+0x22>
 8001666:      	ldr	r0, [sp, #0x8]
 8001668:      	str	r0, [sp]
 800166a:      	str	r0, [sp, #0x14]
 800166c:      	str	r0, [sp, #0x18]
 800166e:      	b	#-0x2 <core::ptr::read::hadb0b347a920b507+0x2c>
 8001670:      	ldr	r0, [sp]
 8001672:      	add	sp, #0x20
 8001674:      	pop	{r7, pc}

08001676 <core::ptr::write::h0bc33be323e47eaf>:
 8001676:      	sub	sp, #0xc
 8001678:      	str	r1, [sp]
 800167a:      	mov	r1, r0
 800167c:      	ldr	r0, [sp]
 800167e:      	str	r0, [sp, #0x4]
 8001680:      	str	r1, [sp, #0x8]
 8001682:      	ldr	r0, [sp, #0x4]
 8001684:      	str	r0, [r1]
 8001686:      	add	sp, #0xc
 8001688:      	bx	lr
 800168a:      	bmi	#-0x58 <core::ptr::write_volatile::h61d9e39981d26e7e>

0800168c <core::sync::atomic::compiler_fence::he36672435bfc948b>:
 800168c:      	push	{r7, lr}
 800168e:      	mov	r7, sp
 8001690:      	sub	sp, #0x8
 8001692:      	strb	r0, [r7, #-1]
 8001696:      	ldrb	r0, [r7, #-1]
 800169a:      	str	r0, [sp]
 800169c:      	ldr	r1, [sp]
 800169e:      	tbb	[pc, r1]

080016a2 <$d.1>:
 80016a2:	04 10 11 12	.word	0x12111004
 80016a6:	13 00		.short	0x0013

080016a8 <$t.2>:
 80016a8:      	trap
 80016aa:      	movw	r0, #0x34af
 80016ae:      	movt	r0, #0x800
 80016b2:      	movw	r2, #0x3530
 80016b6:      	movt	r2, #0x800
 80016ba:      	movs	r1, #0x32
 80016bc:      	bl	#0x402
 80016c0:      	trap
 80016c2:      	b	#0x4 <$t.2+0x22>
 80016c4:      	b	#0x2 <$t.2+0x22>
 80016c6:      	b	#0x0 <$t.2+0x22>
 80016c8:      	b	#-0x2 <$t.2+0x22>
 80016ca:      	add	sp, #0x8
 80016cc:      	pop	{r7, pc}

080016ce <core::mem::replace::h9e1d6ad87c44ef02>:
 80016ce:      	push	{r7, lr}
 80016d0:      	mov	r7, sp
 80016d2:      	sub	sp, #0x18
 80016d4:      	str	r1, [sp]
 80016d6:      	str	r0, [sp, #0x4]
 80016d8:      	str	r0, [sp, #0xc]
 80016da:      	str	r1, [sp, #0x10]
 80016dc:      	bl	#0x122
 80016e0:      	mov	r1, r0
 80016e2:      	str	r1, [sp, #0x8]
 80016e4:      	str	r0, [sp, #0x14]
 80016e6:      	b	#-0x2 <core::mem::replace::h9e1d6ad87c44ef02+0x1a>
 80016e8:      	ldr	r1, [sp]
 80016ea:      	ldr	r0, [sp, #0x4]
 80016ec:      	bl	#0x144
 80016f0:      	b	#-0x2 <core::mem::replace::h9e1d6ad87c44ef02+0x24>
 80016f2:      	ldr	r0, [sp, #0x8]
 80016f4:      	add	sp, #0x18
 80016f6:      	pop	{r7, pc}

080016f8 <core::ptr::read_volatile::hb417f4681d30574c>:
 80016f8:      	sub	sp, #0xc
 80016fa:      	str	r0, [sp, #0x4]
 80016fc:      	ldr	r0, [r0]
 80016fe:      	str	r0, [sp, #0x8]
 8001700:      	ldr	r0, [sp, #0x8]
 8001702:      	str	r0, [sp]
 8001704:      	b	#-0x2 <core::ptr::read_volatile::hb417f4681d30574c+0xe>
 8001706:      	ldr	r0, [sp]
 8001708:      	add	sp, #0xc
 800170a:      	bx	lr

0800170c <core::ptr::write_volatile::h9d23c4e77917f094>:
 800170c:      	sub	sp, #0x8
 800170e:      	str	r0, [sp]
 8001710:      	strh.w	r1, [sp, #0x6]
 8001714:      	strh	r1, [r0]
 8001716:      	b	#-0x2 <core::ptr::write_volatile::h9d23c4e77917f094+0xc>
 8001718:      	add	sp, #0x8
 800171a:      	bx	lr

0800171c <core::ptr::write_volatile::hacde017e8a4f81f0>:
 800171c:      	sub	sp, #0x8
 800171e:      	str	r0, [sp]
 8001720:      	strb.w	r1, [sp, #0x7]
 8001724:      	strb	r1, [r0]
 8001726:      	b	#-0x2 <core::ptr::write_volatile::hacde017e8a4f81f0+0xc>
 8001728:      	add	sp, #0x8
 800172a:      	bx	lr

0800172c <core::ptr::write_volatile::he6d10cf8cddc3a8c>:
 800172c:      	sub	sp, #0x8
 800172e:      	str	r0, [sp]
 8001730:      	str	r1, [sp, #0x4]
 8001732:      	str	r1, [r0]
 8001734:      	b	#-0x2 <core::ptr::write_volatile::he6d10cf8cddc3a8c+0xa>
 8001736:      	add	sp, #0x8
 8001738:      	bx	lr

0800173a <core::ptr::slice_from_raw_parts::h1c1868e1c4dbca41>:
 800173a:      	push	{r7, lr}
 800173c:      	mov	r7, sp
 800173e:      	sub	sp, #0x18
 8001740:      	str	r1, [sp, #0x8]
 8001742:      	str	r0, [sp, #0x10]
 8001744:      	str	r1, [sp, #0x14]
 8001746:      	bl	#0x218
 800174a:      	str	r0, [sp, #0xc]
 800174c:      	b	#-0x2 <core::ptr::slice_from_raw_parts::h1c1868e1c4dbca41+0x14>
 800174e:      	ldr	r1, [sp, #0x8]
 8001750:      	ldr	r0, [sp, #0xc]
 8001752:      	bl	#0x10c
 8001756:      	str	r0, [sp]
 8001758:      	str	r1, [sp, #0x4]
 800175a:      	b	#-0x2 <core::ptr::slice_from_raw_parts::h1c1868e1c4dbca41+0x22>
 800175c:      	ldr	r1, [sp, #0x4]
 800175e:      	ldr	r0, [sp]
 8001760:      	add	sp, #0x18
 8001762:      	pop	{r7, pc}

08001764 <core::ptr::slice_from_raw_parts::hba55b4120eca08a1>:
 8001764:      	push	{r7, lr}
 8001766:      	mov	r7, sp
 8001768:      	sub	sp, #0x18
 800176a:      	str	r1, [sp, #0x8]
 800176c:      	str	r0, [sp, #0x10]
 800176e:      	str	r1, [sp, #0x14]
 8001770:      	bl	#0x1e6
 8001774:      	str	r0, [sp, #0xc]
 8001776:      	b	#-0x2 <core::ptr::slice_from_raw_parts::hba55b4120eca08a1+0x14>
 8001778:      	ldr	r1, [sp, #0x8]
 800177a:      	ldr	r0, [sp, #0xc]
 800177c:      	bl	#0xc8
 8001780:      	str	r0, [sp]
 8001782:      	str	r1, [sp, #0x4]
 8001784:      	b	#-0x2 <core::ptr::slice_from_raw_parts::hba55b4120eca08a1+0x22>
 8001786:      	ldr	r1, [sp, #0x4]
 8001788:      	ldr	r0, [sp]
 800178a:      	add	sp, #0x18
 800178c:      	pop	{r7, pc}

0800178e <core::ptr::read::h54bcd78144a41618>:
 800178e:      	push	{r7, lr}
 8001790:      	mov	r7, sp
 8001792:      	sub	sp, #0x20
 8001794:      	str	r0, [sp, #0x8]
 8001796:      	str	r0, [sp, #0x10]
 8001798:      	ldrh	r0, [r7, #-10]
 800179c:      	strh	r0, [r7, #-18]
 80017a0:      	b	#-0x2 <core::ptr::read::h54bcd78144a41618+0x14>
 80017a2:      	sub.w	r0, r7, #0x12
 80017a6:      	str	r0, [sp, #0x1c]
 80017a8:      	b	#-0x2 <core::ptr::read::h54bcd78144a41618+0x1c>
 80017aa:      	ldr	r0, [sp, #0x8]
 80017ac:      	sub.w	r1, r7, #0x12
 80017b0:      	movs	r2, #0x1
 80017b2:      	bl	#0x16c
 80017b6:      	b	#-0x2 <core::ptr::read::h54bcd78144a41618+0x2a>
 80017b8:      	ldrh	r0, [r7, #-18]
 80017bc:      	mov	r1, r0
 80017be:      	str	r1, [sp, #0x4]
 80017c0:      	strh.w	r0, [sp, #0x18]
 80017c4:      	strh	r0, [r7, #-6]
 80017c8:      	b	#-0x2 <core::ptr::read::h54bcd78144a41618+0x3c>
 80017ca:      	ldr	r0, [sp, #0x4]
 80017cc:      	add	sp, #0x20
 80017ce:      	pop	{r7, pc}

080017d0 <core::ptr::read::h5f48cd998767d5bd>:
 80017d0:      	push	{r7, lr}
 80017d2:      	mov	r7, sp
 80017d4:      	sub	sp, #0x20
 80017d6:      	str	r0, [sp, #0x4]
 80017d8:      	str	r0, [sp, #0xc]
 80017da:      	ldr	r0, [sp, #0x10]
 80017dc:      	str	r0, [sp, #0x8]
 80017de:      	b	#-0x2 <core::ptr::read::h5f48cd998767d5bd+0x10>
 80017e0:      	add	r0, sp, #0x8
 80017e2:      	str	r0, [sp, #0x1c]
 80017e4:      	b	#-0x2 <core::ptr::read::h5f48cd998767d5bd+0x16>
 80017e6:      	ldr	r0, [sp, #0x4]
 80017e8:      	add	r1, sp, #0x8
 80017ea:      	movs	r2, #0x1
 80017ec:      	bl	#0x14e
 80017f0:      	b	#-0x2 <core::ptr::read::h5f48cd998767d5bd+0x22>
 80017f2:      	ldr	r0, [sp, #0x8]
 80017f4:      	str	r0, [sp]
 80017f6:      	str	r0, [sp, #0x14]
 80017f8:      	str	r0, [sp, #0x18]
 80017fa:      	b	#-0x2 <core::ptr::read::h5f48cd998767d5bd+0x2c>
 80017fc:      	ldr	r0, [sp]
 80017fe:      	add	sp, #0x20
 8001800:      	pop	{r7, pc}

08001802 <core::ptr::read::he555a1d8b05d3178>:
 8001802:      	push	{r7, lr}
 8001804:      	mov	r7, sp
 8001806:      	sub	sp, #0x20
 8001808:      	str	r0, [sp, #0x4]
 800180a:      	str	r0, [sp, #0xc]
 800180c:      	ldr	r0, [sp, #0x10]
 800180e:      	str	r0, [sp, #0x8]
 8001810:      	b	#-0x2 <core::ptr::read::he555a1d8b05d3178+0x10>
 8001812:      	add	r0, sp, #0x8
 8001814:      	str	r0, [sp, #0x1c]
 8001816:      	b	#-0x2 <core::ptr::read::he555a1d8b05d3178+0x16>
 8001818:      	ldr	r0, [sp, #0x4]
 800181a:      	add	r1, sp, #0x8
 800181c:      	movs	r2, #0x1
 800181e:      	bl	#0xe4
 8001822:      	b	#-0x2 <core::ptr::read::he555a1d8b05d3178+0x22>
 8001824:      	ldr	r0, [sp, #0x8]
 8001826:      	str	r0, [sp]
 8001828:      	str	r0, [sp, #0x14]
 800182a:      	str	r0, [sp, #0x18]
 800182c:      	b	#-0x2 <core::ptr::read::he555a1d8b05d3178+0x2c>
 800182e:      	ldr	r0, [sp]
 8001830:      	add	sp, #0x20
 8001832:      	pop	{r7, pc}

08001834 <core::ptr::write::h174b40edb663a4b1>:
 8001834:      	sub	sp, #0xc
 8001836:      	str	r1, [sp]
 8001838:      	mov	r1, r0
 800183a:      	ldr	r0, [sp]
 800183c:      	str	r0, [sp, #0x4]
 800183e:      	str	r1, [sp, #0x8]
 8001840:      	ldr	r0, [sp, #0x4]
 8001842:      	str	r0, [r1]
 8001844:      	add	sp, #0xc
 8001846:      	bx	lr

08001848 <core::ptr::metadata::from_raw_parts::h39ac1316d42cc499>:
 8001848:      	sub	sp, #0x18
 800184a:      	str	r0, [sp, #0x10]
 800184c:      	str	r1, [sp, #0x14]
 800184e:      	str	r0, [sp, #0x8]
 8001850:      	str	r1, [sp, #0xc]
 8001852:      	ldr	r1, [sp, #0x8]
 8001854:      	ldr	r0, [sp, #0xc]
 8001856:      	str	r1, [sp]
 8001858:      	str	r0, [sp, #0x4]
 800185a:      	ldr	r0, [sp]
 800185c:      	ldr	r1, [sp, #0x4]
 800185e:      	add	sp, #0x18
 8001860:      	bx	lr

08001862 <core::ptr::metadata::from_raw_parts::he8fc2977aa1bae5e>:
 8001862:      	sub	sp, #0x18
 8001864:      	str	r0, [sp, #0x10]
 8001866:      	str	r1, [sp, #0x14]
 8001868:      	str	r0, [sp, #0x8]
 800186a:      	str	r1, [sp, #0xc]
 800186c:      	ldr	r1, [sp, #0x8]
 800186e:      	ldr	r0, [sp, #0xc]
 8001870:      	str	r1, [sp]
 8001872:      	str	r0, [sp, #0x4]
 8001874:      	ldr	r0, [sp]
 8001876:      	ldr	r1, [sp, #0x4]
 8001878:      	add	sp, #0x18
 800187a:      	bx	lr

0800187c <cortex_m::peripheral::itm::Stim::write_u8::hdc776ce92eff0fd4>:
;     pub fn write_u8(&mut self, value: u8) {
 800187c:      	push	{r7, lr}
 800187e:      	mov	r7, sp
 8001880:      	sub	sp, #0x18
 8001882:      	str	r0, [sp, #0x4]
 8001884:      	mov	r2, r1
 8001886:      	str	r2, [sp, #0x8]
 8001888:      	str	r0, [sp, #0xc]
 800188a:      	strb	r1, [r7, #-5]
 800188e:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 8001890:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::hdc776ce92eff0fd4+0x16>
 8001892:      	ldr	r1, [sp, #0x8]
 8001894:      	ldr	r0, [sp, #0x4]
 8001896:      	bl	#-0x17e
 800189a:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::hdc776ce92eff0fd4+0x20>
;     }
 800189c:      	add	sp, #0x18
 800189e:      	pop	{r7, pc}

080018a0 <cortex_m::peripheral::itm::Stim::write_u16::h8fd61265e15fa8a8>:
;     pub fn write_u16(&mut self, value: u16) {
 80018a0:      	push	{r7, lr}
 80018a2:      	mov	r7, sp
 80018a4:      	sub	sp, #0x18
 80018a6:      	str	r0, [sp, #0x4]
 80018a8:      	mov	r2, r1
 80018aa:      	str	r2, [sp, #0x8]
 80018ac:      	str	r0, [sp, #0xc]
 80018ae:      	strh	r1, [r7, #-6]
 80018b2:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 80018b4:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h8fd61265e15fa8a8+0x16>
 80018b6:      	ldr	r1, [sp, #0x8]
 80018b8:      	ldr	r0, [sp, #0x4]
 80018ba:      	bl	#-0x1b2
 80018be:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h8fd61265e15fa8a8+0x20>
;     }
 80018c0:      	add	sp, #0x18
 80018c2:      	pop	{r7, pc}

080018c4 <cortex_m::peripheral::itm::Stim::write_u32::h1276c92f7ba6e43e>:
;     pub fn write_u32(&mut self, value: u32) {
 80018c4:      	push	{r7, lr}
 80018c6:      	mov	r7, sp
 80018c8:      	sub	sp, #0x18
 80018ca:      	str	r1, [sp, #0x4]
 80018cc:      	str	r0, [sp, #0x8]
 80018ce:      	str	r0, [sp, #0xc]
 80018d0:      	str	r1, [sp, #0x10]
 80018d2:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 80018d4:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::h1276c92f7ba6e43e+0x12>
 80018d6:      	ldr	r1, [sp, #0x4]
 80018d8:      	ldr	r0, [sp, #0x8]
 80018da:      	bl	#-0x1b2
 80018de:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::h1276c92f7ba6e43e+0x1c>
;     }
 80018e0:      	add	sp, #0x18
 80018e2:      	pop	{r7, pc}

080018e4 <cortex_m::peripheral::itm::Stim::is_fifo_ready::hc46fea0e3d2b6459>:
;     pub fn is_fifo_ready(&self) -> bool {
 80018e4:      	push	{r7, lr}
 80018e6:      	mov	r7, sp
 80018e8:      	sub	sp, #0x10
 80018ea:      	str	r0, [sp, #0x4]
 80018ec:      	str	r0, [sp, #0x8]
 80018ee:      	str	r0, [sp, #0xc]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 80018f0:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::hc46fea0e3d2b6459+0xe>
 80018f2:      	ldr	r0, [sp, #0x4]
 80018f4:      	bl	#-0x200
 80018f8:      	str	r0, [sp]
 80018fa:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::hc46fea0e3d2b6459+0x18>
;     }
 80018fc:      	ldr	r0, [sp]
 80018fe:      	and	r0, r0, #0x1
 8001902:      	add	sp, #0x10
 8001904:      	pop	{r7, pc}

08001906 <core::intrinsics::copy_nonoverlapping::h5f4195447a314dd4>:
 8001906:      	push	{r7, lr}
 8001908:      	mov	r7, sp
 800190a:      	sub	sp, #0x10
 800190c:      	str	r1, [sp]
 800190e:      	mov	r1, r0
 8001910:      	ldr	r0, [sp]
 8001912:      	str	r1, [sp, #0x4]
 8001914:      	str	r0, [sp, #0x8]
 8001916:      	str	r2, [sp, #0xc]
 8001918:      	lsls	r2, r2, #0x2
 800191a:      	bl	#0x181c
 800191e:      	add	sp, #0x10
 8001920:      	pop	{r7, pc}

08001922 <core::intrinsics::copy_nonoverlapping::h7a48051d4ed85912>:
 8001922:      	push	{r7, lr}
 8001924:      	mov	r7, sp
 8001926:      	sub	sp, #0x10
 8001928:      	str	r1, [sp]
 800192a:      	mov	r1, r0
 800192c:      	ldr	r0, [sp]
 800192e:      	str	r1, [sp, #0x4]
 8001930:      	str	r0, [sp, #0x8]
 8001932:      	str	r2, [sp, #0xc]
 8001934:      	lsls	r2, r2, #0x1
 8001936:      	bl	#0x17fc
 800193a:      	add	sp, #0x10
 800193c:      	pop	{r7, pc}

0800193e <core::intrinsics::copy_nonoverlapping::hc8d50f0e465f81ea>:
 800193e:      	push	{r7, lr}
 8001940:      	mov	r7, sp
 8001942:      	sub	sp, #0x10
 8001944:      	str	r1, [sp]
 8001946:      	mov	r1, r0
 8001948:      	ldr	r0, [sp]
 800194a:      	str	r1, [sp, #0x4]
 800194c:      	str	r0, [sp, #0x8]
 800194e:      	str	r2, [sp, #0xc]
 8001950:      	lsls	r2, r2, #0x2
 8001952:      	bl	#0x17e4
 8001956:      	add	sp, #0x10
 8001958:      	pop	{r7, pc}

0800195a <core::ptr::const_ptr::<impl *const T>::cast::h49a4832b8c109248>:
 800195a:      	sub	sp, #0x4
 800195c:      	str	r0, [sp]
 800195e:      	add	sp, #0x4
 8001960:      	bx	lr

08001962 <core::ptr::const_ptr::<impl *const T>::cast::haf5ccba01abe2d15>:
 8001962:      	sub	sp, #0x4
 8001964:      	str	r0, [sp]
 8001966:      	add	sp, #0x4
 8001968:      	bx	lr

0800196a <core::slice::raw::from_raw_parts::h391af5b64a26ce1e>:
 800196a:      	push	{r7, lr}
 800196c:      	mov	r7, sp
 800196e:      	sub	sp, #0x10
 8001970:      	str	r0, [sp, #0x8]
 8001972:      	str	r1, [sp, #0xc]
 8001974:      	bl	#-0x23e
 8001978:      	str	r0, [sp]
 800197a:      	str	r1, [sp, #0x4]
 800197c:      	b	#-0x2 <core::slice::raw::from_raw_parts::h391af5b64a26ce1e+0x14>
 800197e:      	ldr	r1, [sp, #0x4]
 8001980:      	ldr	r0, [sp]
 8001982:      	add	sp, #0x10
 8001984:      	pop	{r7, pc}

08001986 <core::slice::raw::from_raw_parts::he74935704dd90d60>:
 8001986:      	push	{r7, lr}
 8001988:      	mov	r7, sp
 800198a:      	sub	sp, #0x10
 800198c:      	str	r0, [sp, #0x8]
 800198e:      	str	r1, [sp, #0xc]
 8001990:      	bl	#-0x230
 8001994:      	str	r0, [sp]
 8001996:      	str	r1, [sp, #0x4]
 8001998:      	b	#-0x2 <core::slice::raw::from_raw_parts::he74935704dd90d60+0x14>
 800199a:      	ldr	r1, [sp, #0x4]
 800199c:      	ldr	r0, [sp]
 800199e:      	add	sp, #0x10
 80019a0:      	pop	{r7, pc}

080019a2 <__cpsid>:
 80019a2:      	cpsid i
 80019a4:      	bx	lr

080019a6 <__cpsie>:
 80019a6:      	cpsie i
 80019a8:      	bx	lr

080019aa <__primask_r>:
 80019aa:      	mrs	r0, primask
 80019ae:      	bx	lr

080019b0 <bare_metal::CriticalSection::new::h48224f51cdc16425>:
;     pub unsafe fn new() -> Self {
 80019b0:      	sub	sp, #0x4
;     }
 80019b2:      	add	sp, #0x4
 80019b4:      	bx	lr

080019b6 <core::ops::function::FnOnce::call_once::hcb8f9ded1330be71>:
 80019b6:      	ldr	r0, [r0]
 80019b8:      	b	#-0x4 <core::ops::function::FnOnce::call_once::hcb8f9ded1330be71+0x2>

080019ba <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::hf652eaa4c4ddcf6f>:
 80019ba:      	bx	lr

080019bc <<T as core::any::Any>::type_id::h415768cc42a8f1e6>:
 80019bc:      	movw	r0, #0x57f3
 80019c0:      	movw	r1, #0x8917
 80019c4:      	movt	r0, #0x59a6
 80019c8:      	movt	r1, #0x68bc
 80019cc:      	bx	lr

080019ce <<core::panic::PanicInfo as core::fmt::Display>::fmt::hdf4573f5b861df93>:
 80019ce:      	push	{r4, r5, r6, r7, lr}
 80019d0:      	add	r7, sp, #0xc
 80019d2:      	str	r8, [sp, #-4]!
 80019d6:      	sub	sp, #0x38
 80019d8:      	ldrd	r4, r5, [r1, #24]
 80019dc:      	movw	r1, #0x3560
 80019e0:      	ldr	r3, [r5, #0xc]
 80019e2:      	mov	r8, r0
 80019e4:      	movt	r1, #0x800
 80019e8:      	movs	r2, #0xc
 80019ea:      	mov	r0, r4
 80019ec:      	blx	r3
 80019ee:      	cbz	r0, #0xa
 80019f0:      	movs	r6, #0x1
 80019f2:      	mov	r0, r6
 80019f4:      	add	sp, #0x38
 80019f6:      	ldr	r8, [sp], #4
 80019fa:      	pop	{r4, r5, r6, r7, pc}
 80019fc:      	ldr.w	r0, [r8, #0x8]
 8001a00:      	cbz	r0, #0xa
 8001a02:      	str	r0, [sp, #0x4]
 8001a04:      	movw	r0, #0x25fb
 8001a08:      	movt	r0, #0x800
 8001a0c:      	b	#0x2a <<core::panic::PanicInfo as core::fmt::Display>::fmt::hdf4573f5b861df93+0x6c>
 8001a0e:      	ldrd	r6, r0, [r8]
 8001a12:      	ldr	r1, [r0, #0xc]
 8001a14:      	mov	r0, r6
 8001a16:      	blx	r1
 8001a18:      	movw	r2, #0xa91e
 8001a1c:      	movt	r2, #0x7ef2
 8001a20:      	eors	r1, r2
 8001a22:      	movw	r2, #0xbcf4
 8001a26:      	movt	r2, #0xecc7
 8001a2a:      	eors	r0, r2
 8001a2c:      	orrs	r0, r1
 8001a2e:      	bne	#0x38 <<core::panic::PanicInfo as core::fmt::Display>::fmt::hdf4573f5b861df93+0x9c>
 8001a30:      	movw	r0, #0x2627
 8001a34:      	str	r6, [sp, #0x4]
 8001a36:      	movt	r0, #0x800
 8001a3a:      	str	r0, [sp, #0xc]
 8001a3c:      	add	r0, sp, #0x4
 8001a3e:      	str	r0, [sp, #0x8]
 8001a40:      	add	r0, sp, #0x8
 8001a42:      	str	r0, [sp, #0x30]
 8001a44:      	movs	r0, #0x0
 8001a46:      	str	r0, [sp, #0x2c]
 8001a48:      	add	r2, sp, #0x20
 8001a4a:      	str	r0, [sp, #0x28]
 8001a4c:      	movs	r0, #0x2
 8001a4e:      	str	r0, [sp, #0x24]
 8001a50:      	movw	r0, #0x3570
 8001a54:      	movt	r0, #0x800
 8001a58:      	movs	r6, #0x1
 8001a5a:      	str	r0, [sp, #0x20]
 8001a5c:      	mov	r0, r4
 8001a5e:      	mov	r1, r5
 8001a60:      	str	r6, [sp, #0x34]
 8001a62:      	bl	#0xb2
 8001a66:      	cmp	r0, #0x0
 8001a68:      	bne	#-0x7a <<core::panic::PanicInfo as core::fmt::Display>::fmt::hdf4573f5b861df93+0x24>
 8001a6a:      	ldr.w	r0, [r8, #0xc]
 8001a6e:      	movw	r1, #0x24fd
 8001a72:      	movt	r1, #0x800
 8001a76:      	add.w	r2, r0, #0xc
 8001a7a:      	str	r1, [sp, #0x1c]
 8001a7c:      	strd	r1, r2, [sp, #20]
 8001a80:      	add.w	r1, r0, #0x8
 8001a84:      	str	r1, [sp, #0x10]
 8001a86:      	movw	r1, #0x25ef
 8001a8a:      	movt	r1, #0x800
 8001a8e:      	add	r2, sp, #0x20
 8001a90:      	strd	r0, r1, [sp, #8]
 8001a94:      	add	r1, sp, #0x8
 8001a96:      	movs	r0, #0x3
 8001a98:      	str	r1, [sp, #0x30]
 8001a9a:      	movs	r1, #0x0
 8001a9c:      	str	r0, [sp, #0x34]
 8001a9e:      	strd	r0, r1, [sp, #36]
 8001aa2:      	movw	r0, #0x3584
 8001aa6:      	movt	r0, #0x800
 8001aaa:      	str	r1, [sp, #0x2c]
 8001aac:      	str	r0, [sp, #0x20]
 8001aae:      	mov	r0, r4
 8001ab0:      	mov	r1, r5
 8001ab2:      	bl	#0x62
 8001ab6:      	mov	r6, r0
 8001ab8:      	mov	r0, r6
 8001aba:      	add	sp, #0x38
 8001abc:      	ldr	r8, [sp], #4
 8001ac0:      	pop	{r4, r5, r6, r7, pc}

08001ac2 <core::panicking::panic::hf9de56380a5a0992>:
 8001ac2:      	push	{r7, lr}
 8001ac4:      	mov	r7, sp
 8001ac6:      	sub	sp, #0x20
 8001ac8:      	mov	r12, r2
 8001aca:      	movw	r2, #0x3540
 8001ace:      	movt	r2, #0x800
 8001ad2:      	movs	r3, #0x0
 8001ad4:      	strd	r0, r1, [sp, #24]
 8001ad8:      	mov	r0, sp
 8001ada:      	str	r2, [sp, #0x10]
 8001adc:      	movs	r2, #0x1
 8001ade:      	mov	r1, r12
 8001ae0:      	str	r2, [sp, #0x4]
 8001ae2:      	add	r2, sp, #0x18
 8001ae4:      	str	r3, [sp, #0x14]
 8001ae6:      	strd	r3, r3, [sp, #8]
 8001aea:      	str	r2, [sp]
 8001aec:      	bl	#0x2
 8001af0:      	trap

08001af2 <core::panicking::panic_fmt::h9d5f60b12161669a>:
 8001af2:      	push	{r7, lr}
 8001af4:      	mov	r7, sp
 8001af6:      	sub	sp, #0x10
 8001af8:      	strd	r0, r1, [sp, #8]
 8001afc:      	movw	r0, #0x3550
 8001b00:      	movt	r0, #0x800
 8001b04:      	str	r0, [sp, #0x4]
 8001b06:      	movw	r0, #0x3540
 8001b0a:      	movt	r0, #0x800
 8001b0e:      	str	r0, [sp]
 8001b10:      	mov	r0, sp
 8001b12:      	bl	#0xb1e
 8001b16:      	trap

08001b18 <core::fmt::write::hf6feac855f1cc27a>:
 8001b18:      	push	{r4, r5, r6, r7, lr}
 8001b1a:      	add	r7, sp, #0xc
 8001b1c:      	push.w	{r8, r9, r10, r11}
 8001b20:      	sub	sp, #0x34
 8001b22:      	movs	r3, #0x3
 8001b24:      	ldr.w	r11, [r2, #0x8]
 8001b28:      	strb.w	r3, [sp, #0x30]
 8001b2c:      	movs	r3, #0x20
 8001b2e:      	str	r3, [sp, #0x14]
 8001b30:      	movs	r3, #0x0
 8001b32:      	cmp.w	r11, #0x0
 8001b36:      	str	r3, [sp, #0x10]
 8001b38:      	str	r1, [sp, #0x2c]
 8001b3a:      	str	r0, [sp, #0x28]
 8001b3c:      	str	r3, [sp, #0x20]
 8001b3e:      	str	r3, [sp, #0x18]
 8001b40:      	beq	#0xde <core::fmt::write::hf6feac855f1cc27a+0x10a>
 8001b42:      	ldr.w	r10, [r2, #0xc]
 8001b46:      	ldrd	r8, r3, [r2]
 8001b4a:      	cmp	r10, r3
 8001b4c:      	it	hi
 8001b4e:      	movhi	r10, r3
 8001b50:      	cmp.w	r10, #0x0
 8001b54:      	beq.w	#0x11a <core::fmt::write::hf6feac855f1cc27a+0x15a>
 8001b58:      	movs	r4, #0x0
 8001b5a:      	mov.w	r9, #0x10
 8001b5e:      	str	r2, [sp, #0xc]
 8001b60:      	str	r3, [sp, #0x4]
 8001b62:      	str.w	r10, [sp, #0x8]
 8001b66:      	add.w	r0, r8, r4
 8001b6a:      	ldr	r2, [r0, #0x4]
 8001b6c:      	cbz	r2, #0x10
 8001b6e:      	ldrd	r0, r3, [sp, #40]
 8001b72:      	ldr.w	r1, [r8, r4]
 8001b76:      	ldr	r3, [r3, #0xc]
 8001b78:      	blx	r3
 8001b7a:      	cmp	r0, #0x0
 8001b7c:      	bne.w	#0x110 <core::fmt::write::hf6feac855f1cc27a+0x178>
 8001b80:      	add.w	r0, r11, r4, lsl #2
 8001b84:      	ldr	r1, [sp, #0xc]
 8001b86:      	ldrd	r6, r5, [r0, #4]
 8001b8a:      	ldrd	r3, r2, [r0, #20]
 8001b8e:      	ldr	r1, [r1, #0x10]
 8001b90:      	strd	r5, r6, [sp, #16]
 8001b94:      	ldrb	r6, [r0, #0x1c]
 8001b96:      	strb.w	r6, [sp, #0x30]
 8001b9a:      	cbz	r3, #0x1e
 8001b9c:      	cmp	r3, #0x1
 8001b9e:      	bne	#0x10 <core::fmt::write::hf6feac855f1cc27a+0x9a>
 8001ba0:      	add.w	r3, r1, r2, lsl #3
 8001ba4:      	movw	r6, #0x19b7
 8001ba8:      	movt	r6, #0x800
 8001bac:      	ldr	r3, [r3, #0x4]
 8001bae:      	cmp	r3, r6
 8001bb0:      	beq	#0x2 <core::fmt::write::hf6feac855f1cc27a+0x9e>
 8001bb2:      	movs	r6, #0x0
 8001bb4:      	b	#0x6 <core::fmt::write::hf6feac855f1cc27a+0xa6>
 8001bb6:      	ldr.w	r2, [r1, r2, lsl #3]
 8001bba:      	ldr	r2, [r2]
 8001bbc:      	movs	r6, #0x1
 8001bbe:      	ldr.w	r3, [r11, r9]
 8001bc2:      	strd	r6, r2, [sp, #24]
 8001bc6:      	ldr	r0, [r0, #0xc]
 8001bc8:      	cbz	r0, #0x1e
 8001bca:      	cmp	r0, #0x1
 8001bcc:      	bne	#0x10 <core::fmt::write::hf6feac855f1cc27a+0xc8>
 8001bce:      	add.w	r0, r1, r3, lsl #3
 8001bd2:      	movw	r2, #0x19b7
 8001bd6:      	movt	r2, #0x800
 8001bda:      	ldr	r0, [r0, #0x4]
 8001bdc:      	cmp	r0, r2
 8001bde:      	beq	#0x2 <core::fmt::write::hf6feac855f1cc27a+0xcc>
 8001be0:      	movs	r2, #0x0
 8001be2:      	b	#0x6 <core::fmt::write::hf6feac855f1cc27a+0xd4>
 8001be4:      	ldr.w	r0, [r1, r3, lsl #3]
 8001be8:      	ldr	r3, [r0]
 8001bea:      	movs	r2, #0x1
 8001bec:      	add.w	r0, r11, r9
 8001bf0:      	ldr	r6, [r0, #-16]
 8001bf4:      	str	r3, [sp, #0x24]
 8001bf6:      	ldr.w	r0, [r1, r6, lsl #3]
 8001bfa:      	add.w	r1, r1, r6, lsl #3
 8001bfe:      	ldr	r3, [r1, #0x4]
 8001c00:      	add	r1, sp, #0x10
 8001c02:      	str	r2, [sp, #0x20]
 8001c04:      	blx	r3
 8001c06:      	cmp	r0, #0x0
 8001c08:      	bne	#0x84 <core::fmt::write::hf6feac855f1cc27a+0x178>
 8001c0a:      	subs.w	r10, r10, #0x1
 8001c0e:      	add.w	r9, r9, #0x20
 8001c12:      	add.w	r4, r4, #0x8
 8001c16:      	bne	#-0xb4 <core::fmt::write::hf6feac855f1cc27a+0x4e>
 8001c18:      	ldrd	r3, r0, [sp, #4]
 8001c1c:      	cmp	r0, r3
 8001c1e:      	blo	#0x56 <core::fmt::write::hf6feac855f1cc27a+0x160>
 8001c20:      	b	#0x76 <core::fmt::write::hf6feac855f1cc27a+0x182>
 8001c22:      	ldr	r0, [r2, #0x14]
 8001c24:      	ldrd	r8, r3, [r2]
 8001c28:      	cmp	r0, r3
 8001c2a:      	it	hi
 8001c2c:      	movhi	r0, r3
 8001c2e:      	cbz	r0, #0x40
 8001c30:      	ldr	r5, [r2, #0x10]
 8001c32:      	add.w	r9, sp, #0x10
 8001c36:      	mov	r10, r3
 8001c38:      	movs	r4, #0x0
 8001c3a:      	mov	r6, r0
 8001c3c:      	add.w	r0, r8, r4, lsl #3
 8001c40:      	ldr	r2, [r0, #0x4]
 8001c42:      	cbz	r2, #0xc
 8001c44:      	ldrd	r0, r3, [sp, #40]
 8001c48:      	ldr.w	r1, [r8, r4, lsl #3]
 8001c4c:      	ldr	r3, [r3, #0xc]
 8001c4e:      	blx	r3
 8001c50:      	cbnz	r0, #0x3c
 8001c52:      	add.w	r1, r5, r4, lsl #3
 8001c56:      	ldr.w	r0, [r5, r4, lsl #3]
 8001c5a:      	ldr	r2, [r1, #0x4]
 8001c5c:      	mov	r1, r9
 8001c5e:      	blx	r2
 8001c60:      	cbnz	r0, #0x2c
 8001c62:      	adds	r4, #0x1
 8001c64:      	mov	r0, r6
 8001c66:      	cmp	r6, r4
 8001c68:      	bne	#-0x32 <core::fmt::write::hf6feac855f1cc27a+0x122>
 8001c6a:      	mov	r3, r10
 8001c6c:      	cmp	r0, r3
 8001c6e:      	bhs	#0x28 <core::fmt::write::hf6feac855f1cc27a+0x182>
 8001c70:      	b	#0x4 <core::fmt::write::hf6feac855f1cc27a+0x160>
 8001c72:      	movs	r0, #0x0
 8001c74:      	cmp	r0, r3
 8001c76:      	bhs	#0x20 <core::fmt::write::hf6feac855f1cc27a+0x182>
 8001c78:      	mov	r1, r0
 8001c7a:      	ldrd	r0, r3, [sp, #40]
 8001c7e:      	mov	r2, r1
 8001c80:      	ldr.w	r1, [r8, r1, lsl #3]
 8001c84:      	add.w	r2, r8, r2, lsl #3
 8001c88:      	ldr	r3, [r3, #0xc]
 8001c8a:      	ldr	r2, [r2, #0x4]
 8001c8c:      	blx	r3
 8001c8e:      	cbz	r0, #0x8
 8001c90:      	movs	r0, #0x1
 8001c92:      	add	sp, #0x34
 8001c94:      	pop.w	{r8, r9, r10, r11}
 8001c98:      	pop	{r4, r5, r6, r7, pc}
 8001c9a:      	movs	r0, #0x0
 8001c9c:      	add	sp, #0x34
 8001c9e:      	pop.w	{r8, r9, r10, r11}
 8001ca2:      	pop	{r4, r5, r6, r7, pc}

08001ca4 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9>:
 8001ca4:      	push	{r4, r5, r6, r7, lr}
 8001ca6:      	add	r7, sp, #0xc
 8001ca8:      	push.w	{r8, r9, r10, r11}
 8001cac:      	sub	sp, #0x14
 8001cae:      	ldr	r4, [r7, #0xc]
 8001cb0:      	mov	r11, r3
 8001cb2:      	mov	r10, r0
 8001cb4:      	cbz	r1, #0x3a
 8001cb6:      	ldr.w	lr, [r10]
 8001cba:      	movs	r1, #0x2b
 8001cbc:      	ands	r0, lr, #0x1
 8001cc0:      	it	eq
 8001cc2:      	moveq.w	r1, #0x110000
 8001cc6:      	add.w	r8, r0, r4
 8001cca:      	ldr	r6, [r7, #0x8]
 8001ccc:      	lsls.w	r0, lr, #0x1d
 8001cd0:      	bpl	#0x30 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x60>
 8001cd2:      	cmp.w	r11, #0x0
 8001cd6:      	beq	#0x48 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x7e>
 8001cd8:      	sub.w	r0, r11, #0x1
 8001cdc:      	and	r12, r11, #0x3
 8001ce0:      	cmp	r0, #0x3
 8001ce2:      	bhs	#0x42 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x84>
 8001ce4:      	mov.w	r9, #0x0
 8001ce8:      	mov	r3, r2
 8001cea:      	cmp.w	r12, #0x0
 8001cee:      	bne	#0x9c <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0xea>
 8001cf0:      	b	#0xd0 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x120>
 8001cf2:      	ldr.w	lr, [r10]
 8001cf6:      	add.w	r8, r4, #0x1
 8001cfa:      	movs	r1, #0x2d
 8001cfc:      	ldr	r6, [r7, #0x8]
 8001cfe:      	lsls.w	r0, lr, #0x1d
 8001d02:      	bmi	#-0x34 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2e>
 8001d04:      	movs	r2, #0x0
 8001d06:      	mov.w	r11, #0x0
 8001d0a:      	ldr.w	r0, [r10, #0x8]
 8001d0e:      	cmp	r0, #0x1
 8001d10:      	beq	#0xba <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x12a>
 8001d12:      	mov	r0, r10
 8001d14:      	mov	r3, r11
 8001d16:      	bl	#0x26e
 8001d1a:      	cmp	r0, #0x0
 8001d1c:      	beq	#0xf0 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x16c>
 8001d1e:      	movs	r5, #0x1
 8001d20:      	b	#0x128 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x1a8>
 8001d22:      	mov.w	r9, #0x0
 8001d26:      	b	#0x9a <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x120>
 8001d28:      	strd	r1, r6, [sp, #8]
 8001d2c:      	bic	r1, r11, #0x3
 8001d30:      	rsbs	r5, r1, #0
 8001d32:      	mov	r3, r2
 8001d34:      	mov.w	r9, #0x0
 8001d38:      	mov	r1, r2
 8001d3a:      	str	r4, [sp, #0x10]
 8001d3c:      	ldrb	r6, [r3], #4
 8001d40:      	ldrb	r4, [r3, #-3]
 8001d44:      	and	r6, r6, #0xc0
 8001d48:      	ldrb	r2, [r3, #-2]
 8001d4c:      	cmp	r6, #0x80
 8001d4e:      	ldrb	r0, [r3, #-1]
 8001d52:      	and	r4, r4, #0xc0
 8001d56:      	it	ne
 8001d58:      	addne.w	r9, r9, #0x1
 8001d5c:      	cmp	r4, #0x80
 8001d5e:      	and	r2, r2, #0xc0
 8001d62:      	it	ne
 8001d64:      	addne.w	r9, r9, #0x1
 8001d68:      	cmp	r2, #0x80
 8001d6a:      	and	r0, r0, #0xc0
 8001d6e:      	it	ne
 8001d70:      	addne.w	r9, r9, #0x1
 8001d74:      	cmp	r0, #0x80
 8001d76:      	it	ne
 8001d78:      	addne.w	r9, r9, #0x1
 8001d7c:      	adds	r5, #0x4
 8001d7e:      	bne	#-0x46 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x98>
 8001d80:      	mov	r2, r1
 8001d82:      	ldrd	r6, r4, [sp, #12]
 8001d86:      	ldr	r1, [sp, #0x8]
 8001d88:      	cmp.w	r12, #0x0
 8001d8c:      	beq	#0x34 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x120>
 8001d8e:      	ldrb	r0, [r3]
 8001d90:      	and	r0, r0, #0xc0
 8001d94:      	cmp	r0, #0x80
 8001d96:      	it	ne
 8001d98:      	addne.w	r9, r9, #0x1
 8001d9c:      	cmp.w	r12, #0x1
 8001da0:      	beq	#0x20 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x120>
 8001da2:      	ldrb	r0, [r3, #0x1]
 8001da4:      	and	r0, r0, #0xc0
 8001da8:      	cmp	r0, #0x80
 8001daa:      	it	ne
 8001dac:      	addne.w	r9, r9, #0x1
 8001db0:      	cmp.w	r12, #0x2
 8001db4:      	beq	#0xc <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x120>
 8001db6:      	ldrb	r0, [r3, #0x2]
 8001db8:      	and	r0, r0, #0xc0
 8001dbc:      	cmp	r0, #0x80
 8001dbe:      	it	ne
 8001dc0:      	addne.w	r9, r9, #0x1
 8001dc4:      	add	r8, r9
 8001dc6:      	ldr.w	r0, [r10, #0x8]
 8001dca:      	cmp	r0, #0x1
 8001dcc:      	bne	#-0xbe <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x6e>
 8001dce:      	ldr.w	r9, [r10, #0xc]
 8001dd2:      	cmp	r9, r8
 8001dd4:      	bls	#0x2a <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x15e>
 8001dd6:      	lsls.w	r0, lr, #0x1c
 8001dda:      	bmi	#0x4c <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x186>
 8001ddc:      	ldrb.w	r5, [r10, #0x20]
 8001de0:      	sub.w	r0, r9, r8
 8001de4:      	mov	r9, r1
 8001de6:      	cmp	r5, #0x3
 8001de8:      	it	eq
 8001dea:      	moveq	r5, #0x1
 8001dec:      	lsls	r3, r5, #0x1e
 8001dee:      	strd	r6, r4, [sp, #12]
 8001df2:      	str	r2, [sp, #0x4]
 8001df4:      	beq	#0x80 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x1d4>
 8001df6:      	cmp	r5, #0x1
 8001df8:      	bne	#0x80 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x1d8>
 8001dfa:      	movs	r1, #0x0
 8001dfc:      	str	r1, [sp, #0x8]
 8001dfe:      	mov	r1, r0
 8001e00:      	b	#0x80 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x1e0>
 8001e02:      	mov	r0, r10
 8001e04:      	mov	r3, r11
 8001e06:      	bl	#0x17e
 8001e0a:      	cmp	r0, #0x0
 8001e0c:      	bne.w	#0x140 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2ac>
 8001e10:      	ldr.w	r1, [r10, #0x1c]
 8001e14:      	mov	r2, r4
 8001e16:      	ldr.w	r0, [r10, #0x18]
 8001e1a:      	ldr	r3, [r1, #0xc]
 8001e1c:      	mov	r1, r6
 8001e1e:      	add	sp, #0x14
 8001e20:      	pop.w	{r8, r9, r10, r11}
 8001e24:      	pop.w	{r4, r5, r6, r7, lr}
 8001e28:      	bx	r3
 8001e2a:      	ldr.w	r0, [r10, #0x4]
 8001e2e:      	movs	r5, #0x1
 8001e30:      	str	r0, [sp, #0x8]
 8001e32:      	movs	r0, #0x30
 8001e34:      	ldrb.w	r3, [r10, #0x20]
 8001e38:      	str	r3, [sp]
 8001e3a:      	mov	r3, r11
 8001e3c:      	str.w	r0, [r10, #0x4]
 8001e40:      	mov	r0, r10
 8001e42:      	strb.w	r5, [r10, #0x20]
 8001e46:      	bl	#0x13e
 8001e4a:      	cbz	r0, #0x8
 8001e4c:      	mov	r0, r5
 8001e4e:      	add	sp, #0x14
 8001e50:      	pop.w	{r8, r9, r10, r11}
 8001e54:      	pop	{r4, r5, r6, r7, pc}
 8001e56:      	ldrb.w	r0, [r10, #0x20]
 8001e5a:      	sub.w	r1, r9, r8
 8001e5e:      	cmp	r0, #0x3
 8001e60:      	it	eq
 8001e62:      	moveq	r0, #0x1
 8001e64:      	lsls	r2, r0, #0x1e
 8001e66:      	strd	r6, r4, [sp, #12]
 8001e6a:      	beq	#0x7e <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x248>
 8001e6c:      	cmp	r0, #0x1
 8001e6e:      	bne	#0x80 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x24e>
 8001e70:      	mov.w	r8, #0x0
 8001e74:      	mov	r0, r1
 8001e76:      	b	#0x80 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x256>
 8001e78:      	movs	r1, #0x0
 8001e7a:      	b	#0x4 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x1de>
 8001e7c:      	lsrs	r1, r0, #0x1
 8001e7e:      	adds	r0, #0x1
 8001e80:      	lsrs	r0, r0, #0x1
 8001e82:      	str	r0, [sp, #0x8]
 8001e84:      	ldr.w	r5, [r10, #0x4]
 8001e88:      	adds	r4, r1, #0x1
 8001e8a:      	ldrd	r8, r6, [r10, #24]
 8001e8e:      	subs	r4, #0x1
 8001e90:      	beq	#0xc <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x1fc>
 8001e92:      	ldr	r2, [r6, #0x10]
 8001e94:      	mov	r0, r8
 8001e96:      	mov	r1, r5
 8001e98:      	blx	r2
 8001e9a:      	cmp	r0, #0x0
 8001e9c:      	beq	#-0x12 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x1ea>
 8001e9e:      	b	#0xae <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2ac>
 8001ea0:      	subs.w	r8, r5, #0x110000
 8001ea4:      	ldr	r0, [sp, #0x8]
 8001ea6:      	it	ne
 8001ea8:      	movne	r8, r0
 8001eaa:      	cmp.w	r5, #0x110000
 8001eae:      	beq	#0x9e <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2ac>
 8001eb0:      	ldr	r2, [sp, #0x4]
 8001eb2:      	mov	r0, r10
 8001eb4:      	mov	r1, r9
 8001eb6:      	mov	r3, r11
 8001eb8:      	bl	#0xcc
 8001ebc:      	cmp	r0, #0x0
 8001ebe:      	bne	#0x8e <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2ac>
 8001ec0:      	ldrd	r0, r1, [r10, #24]
 8001ec4:      	ldr	r3, [r1, #0xc]
 8001ec6:      	ldrd	r1, r2, [sp, #12]
 8001eca:      	blx	r3
 8001ecc:      	cmp	r0, #0x0
 8001ece:      	bne	#0x7e <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2ac>
 8001ed0:      	ldrd	r9, r6, [r10, #24]
 8001ed4:      	movs	r4, #0x0
 8001ed6:      	cmp	r8, r4
 8001ed8:      	beq	#0x98 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2d0>
 8001eda:      	ldr	r2, [r6, #0x10]
 8001edc:      	mov	r0, r9
 8001ede:      	mov	r1, r5
 8001ee0:      	blx	r2
 8001ee2:      	adds	r4, #0x1
 8001ee4:      	cmp	r0, #0x0
 8001ee6:      	beq	#-0x14 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x232>
 8001ee8:      	subs	r0, r4, #0x1
 8001eea:      	b	#0x88 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2d2>
 8001eec:      	movs	r0, #0x0
 8001eee:      	mov	r8, r1
 8001ef0:      	b	#0x6 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x256>
 8001ef2:      	lsrs	r0, r1, #0x1
 8001ef4:      	adds	r1, #0x1
 8001ef6:      	lsr.w	r8, r1, #0x1
 8001efa:      	ldr.w	r11, [r10, #0x4]
 8001efe:      	adds	r4, r0, #0x1
 8001f00:      	ldrd	r6, r5, [r10, #24]
 8001f04:      	subs	r4, #0x1
 8001f06:      	beq	#0xc <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x272>
 8001f08:      	ldr	r2, [r5, #0x10]
 8001f0a:      	mov	r0, r6
 8001f0c:      	mov	r1, r11
 8001f0e:      	blx	r2
 8001f10:      	cmp	r0, #0x0
 8001f12:      	beq	#-0x12 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x260>
 8001f14:      	b	#0x38 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2ac>
 8001f16:      	subs.w	r9, r11, #0x110000
 8001f1a:      	it	ne
 8001f1c:      	movne	r9, r8
 8001f1e:      	cmp.w	r11, #0x110000
 8001f22:      	beq	#0x2a <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2ac>
 8001f24:      	ldrd	r0, r1, [r10, #24]
 8001f28:      	ldr	r3, [r1, #0xc]
 8001f2a:      	ldrd	r1, r2, [sp, #12]
 8001f2e:      	blx	r3
 8001f30:      	cbnz	r0, #0x1c
 8001f32:      	ldrd	r8, r4, [r10, #24]
 8001f36:      	movs	r6, #0x0
 8001f38:      	cmp	r9, r6
 8001f3a:      	beq	#0x1e <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2b8>
 8001f3c:      	ldr	r2, [r4, #0x10]
 8001f3e:      	mov	r0, r8
 8001f40:      	mov	r1, r11
 8001f42:      	blx	r2
 8001f44:      	adds	r6, #0x1
 8001f46:      	cmp	r0, #0x0
 8001f48:      	beq	#-0x14 <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x294>
 8001f4a:      	subs	r0, r6, #0x1
 8001f4c:      	cmp	r0, r9
 8001f4e:      	bhs	#0xa <core::fmt::Formatter::pad_integral::ha1c4dd03b4bdb0d9+0x2b8>
 8001f50:      	movs	r5, #0x1
 8001f52:      	mov	r0, r5
 8001f54:      	add	sp, #0x14
 8001f56:      	pop.w	{r8, r9, r10, r11}
 8001f5a:      	pop	{r4, r5, r6, r7, pc}
 8001f5c:      	ldr	r0, [sp]
 8001f5e:      	movs	r5, #0x0
 8001f60:      	strb.w	r0, [r10, #0x20]
 8001f64:      	ldr	r0, [sp, #0x8]
 8001f66:      	str.w	r0, [r10, #0x4]
 8001f6a:      	mov	r0, r5
 8001f6c:      	add	sp, #0x14
 8001f6e:      	pop.w	{r8, r9, r10, r11}
 8001f72:      	pop	{r4, r5, r6, r7, pc}
 8001f74:      	mov	r0, r8
 8001f76:      	movs	r5, #0x0
 8001f78:      	cmp	r0, r8
 8001f7a:      	it	lo
 8001f7c:      	movlo	r5, #0x1
 8001f7e:      	mov	r0, r5
 8001f80:      	add	sp, #0x14
 8001f82:      	pop.w	{r8, r9, r10, r11}
 8001f86:      	pop	{r4, r5, r6, r7, pc}

08001f88 <core::fmt::Formatter::pad_integral::write_prefix::h68123beb31973f81>:
 8001f88:      	push	{r4, r5, r6, r7, lr}
 8001f8a:      	add	r7, sp, #0xc
 8001f8c:      	str	r11, [sp, #-4]!
 8001f90:      	mov	r4, r3
 8001f92:      	mov	r5, r2
 8001f94:      	mov	r6, r0
 8001f96:      	cmp.w	r1, #0x110000
 8001f9a:      	beq	#0x10 <core::fmt::Formatter::pad_integral::write_prefix::h68123beb31973f81+0x26>
 8001f9c:      	ldrd	r0, r2, [r6, #24]
 8001fa0:      	ldr	r2, [r2, #0x10]
 8001fa2:      	blx	r2
 8001fa4:      	cbz	r0, #0x6
 8001fa6:      	movs	r0, #0x1
 8001fa8:      	ldr	r11, [sp], #4
 8001fac:      	pop	{r4, r5, r6, r7, pc}
 8001fae:      	cbz	r5, #0x12
 8001fb0:      	ldrd	r0, r1, [r6, #24]
 8001fb4:      	mov	r2, r4
 8001fb6:      	ldr	r3, [r1, #0xc]
 8001fb8:      	mov	r1, r5
 8001fba:      	ldr	r11, [sp], #4
 8001fbe:      	pop.w	{r4, r5, r6, r7, lr}
 8001fc2:      	bx	r3
 8001fc4:      	movs	r0, #0x0
 8001fc6:      	ldr	r11, [sp], #4
 8001fca:      	pop	{r4, r5, r6, r7, pc}

08001fcc <core::fmt::Formatter::pad::h5f277c03c05ffc94>:
 8001fcc:      	push	{r4, r5, r6, r7, lr}
 8001fce:      	add	r7, sp, #0xc
 8001fd0:      	push.w	{r8, r9, r10, r11}
 8001fd4:      	sub	sp, #0xc
 8001fd6:      	mov	r4, r1
 8001fd8:      	ldr.w	lr, [r0, #0x8]
 8001fdc:      	ldr	r1, [r0, #0x10]
 8001fde:      	mov	r9, r2
 8001fe0:      	cmp.w	lr, #0x1
 8001fe4:      	bne	#0x26 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x42>
 8001fe6:      	cmp	r1, #0x1
 8001fe8:      	beq	#0x28 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x48>
 8001fea:      	cmp.w	r9, #0x0
 8001fee:      	beq.w	#0x25e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x284>
 8001ff2:      	sub.w	lr, r9, #0x1
 8001ff6:      	and	r12, r9, #0x3
 8001ffa:      	cmp.w	lr, #0x3
 8001ffe:      	bhs	#0xf6 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x12c>
 8002000:      	movs	r6, #0x0
 8002002:      	mov	r2, r4
 8002004:      	cmp.w	r12, #0x0
 8002008:      	bne.w	#0x13c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x17c>
 800200c:      	b	#0x168 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x1ac>
 800200e:      	cmp	r1, #0x1
 8002010:      	bne.w	#0x268 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2b0>
 8002014:      	ldr	r6, [r0, #0x14]
 8002016:      	add.w	r11, r4, r9
 800201a:      	movs	r2, #0x0
 800201c:      	str	r4, [sp, #0x8]
 800201e:      	cmp	r6, #0x0
 8002020:      	beq	#0x96 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xee>
 8002022:      	str	r0, [sp, #0x4]
 8002024:      	cmp	r4, r11
 8002026:      	beq	#0xc0 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x11e>
 8002028:      	mov	r5, r4
 800202a:      	mov	r3, r4
 800202c:      	ldrsb	r1, [r5], #1
 8002030:      	cmp.w	r1, #0xffffffff
 8002034:      	ble	#0xc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x78>
 8002036:      	mov	r4, r5
 8002038:      	subs	r1, r2, r3
 800203a:      	subs	r6, #0x1
 800203c:      	add.w	r2, r1, r4
 8002040:      	bne	#-0x20 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x58>
 8002042:      	b	#0x76 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xf0>
 8002044:      	cmp	r5, r11
 8002046:      	beq	#0xe <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x8c>
 8002048:      	ldrb	r4, [r3, #0x1]
 800204a:      	adds	r5, r3, #0x2
 800204c:      	and	r10, r4, #0x3f
 8002050:      	uxtb	r1, r1
 8002052:      	cmp	r1, #0xe0
 8002054:      	blo	#-0x22 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x6a>
 8002056:      	b	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x98>
 8002058:      	mov.w	r10, #0x0
 800205c:      	mov	r5, r11
 800205e:      	uxtb	r1, r1
 8002060:      	cmp	r1, #0xe0
 8002062:      	blo	#-0x30 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x6a>
 8002064:      	cmp	r5, r11
 8002066:      	beq	#0xc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xaa>
 8002068:      	ldrb	r4, [r5], #1
 800206c:      	and	r12, r4, #0x3f
 8002070:      	cmp	r1, #0xf0
 8002072:      	blo	#-0x40 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x6a>
 8002074:      	b	#0x8 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xb4>
 8002076:      	mov.w	r12, #0x0
 800207a:      	mov	r5, r11
 800207c:      	cmp	r1, #0xf0
 800207e:      	blo	#-0x4c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x6a>
 8002080:      	mov	r0, lr
 8002082:      	mov	lr, r9
 8002084:      	cmp	r5, r11
 8002086:      	beq	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xc8>
 8002088:      	ldrb	r4, [r5], #1
 800208c:      	and	r8, r4, #0x3f
 8002090:      	mov	r4, r5
 8002092:      	b	#0x4 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0xce>
 8002094:      	mov.w	r8, #0x0
 8002098:      	mov	r4, r11
 800209a:      	mov.w	r9, #0x1c0000
 800209e:      	and.w	r1, r9, r1, lsl #18
 80020a2:      	orr.w	r1, r1, r10, lsl #12
 80020a6:      	mov	r9, lr
 80020a8:      	orr.w	r1, r1, r12, lsl #6
 80020ac:      	mov	lr, r0
 80020ae:      	ldr	r0, [sp, #0x4]
 80020b0:      	add	r1, r8
 80020b2:      	cmp.w	r1, #0x110000
 80020b6:      	bne	#-0x82 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x6c>
 80020b8:      	b	#0x2e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x11e>
 80020ba:      	mov	r5, r4
 80020bc:      	cmp	r5, r11
 80020be:      	beq	#0x28 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x11e>
 80020c0:      	mov	r1, r5
 80020c2:      	ldr	r4, [sp, #0x8]
 80020c4:      	ldrsb	r3, [r1], #1
 80020c8:      	cmp.w	r3, #0xffffffff
 80020cc:      	ble	#0xc2 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x1c6>
 80020ce:      	cmp	r2, #0x0
 80020d0:      	beq.w	#0x160 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x268>
 80020d4:      	cmp	r2, r9
 80020d6:      	bhs.w	#0x154 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x262>
 80020da:      	ldrsb	r1, [r4, r2]
 80020dc:      	cmn.w	r1, #0x40
 80020e0:      	bge.w	#0x150 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x268>
 80020e4:      	movs	r1, #0x0
 80020e6:      	movs	r2, #0x0
 80020e8:      	b	#0x14a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x26a>
 80020ea:      	mov	r2, r9
 80020ec:      	ldr	r4, [sp, #0x8]
 80020ee:      	cmp.w	lr, #0x1
 80020f2:      	bne.w	#0x258 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x382>
 80020f6:      	b	#0x14c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x27a>
 80020f8:      	bic	r2, r9, #0x3
 80020fc:      	movs	r6, #0x0
 80020fe:      	rsbs	r5, r2, #0
 8002100:      	mov	r10, r4
 8002102:      	mov	r2, r4
 8002104:      	ldrb	r4, [r2], #4
 8002108:      	ldrb	r1, [r2, #-3]
 800210c:      	and	r4, r4, #0xc0
 8002110:      	ldrb	r3, [r2, #-2]
 8002114:      	cmp	r4, #0x80
 8002116:      	ldrb	r8, [r2, #-1]
 800211a:      	and	r1, r1, #0xc0
 800211e:      	it	ne
 8002120:      	addne	r6, #0x1
 8002122:      	cmp	r1, #0x80
 8002124:      	and	r1, r3, #0xc0
 8002128:      	it	ne
 800212a:      	addne	r6, #0x1
 800212c:      	cmp	r1, #0x80
 800212e:      	and	r1, r8, #0xc0
 8002132:      	it	ne
 8002134:      	addne	r6, #0x1
 8002136:      	cmp	r1, #0x80
 8002138:      	it	ne
 800213a:      	addne	r6, #0x1
 800213c:      	adds	r5, #0x4
 800213e:      	bne	#-0x3e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x138>
 8002140:      	mov	r4, r10
 8002142:      	cmp.w	r12, #0x0
 8002146:      	beq	#0x2e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x1ac>
 8002148:      	ldrb	r1, [r2]
 800214a:      	and	r1, r1, #0xc0
 800214e:      	cmp	r1, #0x80
 8002150:      	it	ne
 8002152:      	addne	r6, #0x1
 8002154:      	cmp.w	r12, #0x1
 8002158:      	beq	#0x1c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x1ac>
 800215a:      	ldrb	r1, [r2, #0x1]
 800215c:      	and	r1, r1, #0xc0
 8002160:      	cmp	r1, #0x80
 8002162:      	it	ne
 8002164:      	addne	r6, #0x1
 8002166:      	cmp.w	r12, #0x2
 800216a:      	beq	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x1ac>
 800216c:      	ldrb	r1, [r2, #0x2]
 800216e:      	and	r1, r1, #0xc0
 8002172:      	cmp	r1, #0x80
 8002174:      	it	ne
 8002176:      	addne	r6, #0x1
 8002178:      	ldr.w	r8, [r0, #0xc]
 800217c:      	cmp	r6, r8
 800217e:      	bhs	#0xfa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2b0>
 8002180:      	cmp.w	lr, #0x3
 8002184:      	bhs	#0x24 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x1e0>
 8002186:      	movs	r3, #0x0
 8002188:      	mov	r6, r4
 800218a:      	cmp.w	r12, #0x0
 800218e:      	bne	#0x6a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x230>
 8002190:      	b	#0xc8 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x290>
 8002192:      	uxtb	r3, r3
 8002194:      	cmp	r1, r11
 8002196:      	beq.w	#0x14e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x31c>
 800219a:      	ldrb	r1, [r5, #0x1]
 800219c:      	adds	r6, r5, #0x2
 800219e:      	and	r1, r1, #0x3f
 80021a2:      	lsls	r1, r1, #0xc
 80021a4:      	cmp	r3, #0xe0
 80021a6:      	bhs.w	#0x148 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x326>
 80021aa:      	b	#-0xe0 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x102>
 80021ac:      	bic	r1, r9, #0x3
 80021b0:      	movs	r3, #0x0
 80021b2:      	rsbs	r5, r1, #0
 80021b4:      	mov	r10, r4
 80021b6:      	mov	r6, r4
 80021b8:      	ldrb	r1, [r6], #4
 80021bc:      	ldrb	r4, [r6, #-3]
 80021c0:      	and	r1, r1, #0xc0
 80021c4:      	ldrb	r2, [r6, #-2]
 80021c8:      	cmp	r1, #0x80
 80021ca:      	ldrb	lr, [r6, #-1]
 80021ce:      	and	r1, r4, #0xc0
 80021d2:      	it	ne
 80021d4:      	addne	r3, #0x1
 80021d6:      	cmp	r1, #0x80
 80021d8:      	and	r1, r2, #0xc0
 80021dc:      	it	ne
 80021de:      	addne	r3, #0x1
 80021e0:      	cmp	r1, #0x80
 80021e2:      	and	r1, lr, #0xc0
 80021e6:      	it	ne
 80021e8:      	addne	r3, #0x1
 80021ea:      	cmp	r1, #0x80
 80021ec:      	it	ne
 80021ee:      	addne	r3, #0x1
 80021f0:      	adds	r5, #0x4
 80021f2:      	bne	#-0x3e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x1ec>
 80021f4:      	mov	r4, r10
 80021f6:      	cmp.w	r12, #0x0
 80021fa:      	beq	#0x5e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x290>
 80021fc:      	ldrb	r1, [r6]
 80021fe:      	and	r1, r1, #0xc0
 8002202:      	cmp	r1, #0x80
 8002204:      	it	ne
 8002206:      	addne	r3, #0x1
 8002208:      	cmp.w	r12, #0x1
 800220c:      	beq	#0x4c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x290>
 800220e:      	ldrb	r1, [r6, #0x1]
 8002210:      	and	r1, r1, #0xc0
 8002214:      	cmp	r1, #0x80
 8002216:      	it	ne
 8002218:      	addne	r3, #0x1
 800221a:      	cmp.w	r12, #0x2
 800221e:      	beq	#0x3a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x290>
 8002220:      	ldrb	r1, [r6, #0x2]
 8002222:      	and	r1, r1, #0xc0
 8002226:      	cmp	r1, #0x80
 8002228:      	it	ne
 800222a:      	addne	r3, #0x1
 800222c:      	b	#0x2c <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x290>
 800222e:      	cmp	r2, r9
 8002230:      	bne.w	#-0x150 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x118>
 8002234:      	mov	r1, r4
 8002236:      	cmp	r1, #0x0
 8002238:      	ite	eq
 800223a:      	moveq	r2, r9
 800223c:      	movne	r4, r1
 800223e:      	cmp.w	lr, #0x1
 8002242:      	bne.w	#0x108 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x382>
 8002246:      	mov	r9, r2
 8002248:      	cmp.w	r9, #0x0
 800224c:      	bne.w	#-0x25e <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x26>
 8002250:      	ldr.w	r8, [r0, #0xc]
 8002254:      	cmp.w	r8, #0x0
 8002258:      	beq	#0x20 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2b0>
 800225a:      	movs	r3, #0x0
 800225c:      	ldrb.w	r2, [r0, #0x20]
 8002260:      	subs	r1, r2, #0x3
 8002262:      	it	ne
 8002264:      	movne	r1, r2
 8002266:      	lsls	r2, r1, #0x1e
 8002268:      	sub.w	r2, r8, r3
 800226c:      	str	r4, [sp, #0x8]
 800226e:      	beq	#0x12 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2b8>
 8002270:      	cmp	r1, #0x1
 8002272:      	bne	#0x14 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2be>
 8002274:      	mov.w	r11, #0x0
 8002278:      	mov	r1, r2
 800227a:      	b	#0x14 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2c6>
 800227c:      	ldr	r1, [r0, #0x18]
 800227e:      	mov	r2, r9
 8002280:      	ldr	r0, [r0, #0x1c]
 8002282:      	b	#0xcc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x386>
 8002284:      	movs	r1, #0x0
 8002286:      	mov	r11, r2
 8002288:      	b	#0x6 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2c6>
 800228a:      	lsrs	r1, r2, #0x1
 800228c:      	adds	r2, #0x1
 800228e:      	lsr.w	r11, r2, #0x1
 8002292:      	ldr	r6, [r0, #0x4]
 8002294:      	adds	r4, r1, #0x1
 8002296:      	ldrd	r8, r5, [r0, #24]
 800229a:      	subs	r4, #0x1
 800229c:      	beq	#0xc <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2e0>
 800229e:      	ldr	r2, [r5, #0x10]
 80022a0:      	mov	r0, r8
 80022a2:      	mov	r1, r6
 80022a4:      	blx	r2
 80022a6:      	cmp	r0, #0x0
 80022a8:      	beq	#-0x12 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2ce>
 80022aa:      	b	#0x18 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2fa>
 80022ac:      	subs.w	r10, r6, #0x110000
 80022b0:      	it	ne
 80022b2:      	movne	r10, r11
 80022b4:      	cmp.w	r6, #0x110000
 80022b8:      	beq	#0xa <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x2fa>
 80022ba:      	ldr	r3, [r5, #0xc]
 80022bc:      	mov	r0, r8
 80022be:      	ldr	r1, [sp, #0x8]
 80022c0:      	mov	r2, r9
 80022c2:      	blx	r3
 80022c4:      	cbz	r0, #0x8
 80022c6:      	movs	r0, #0x1
 80022c8:      	add	sp, #0xc
 80022ca:      	pop.w	{r8, r9, r10, r11}
 80022ce:      	pop	{r4, r5, r6, r7, pc}
 80022d0:      	movs	r4, #0x0
 80022d2:      	cmp	r10, r4
 80022d4:      	beq	#0x30 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x33c>
 80022d6:      	ldr	r2, [r5, #0x10]
 80022d8:      	mov	r0, r8
 80022da:      	mov	r1, r6
 80022dc:      	blx	r2
 80022de:      	adds	r4, #0x1
 80022e0:      	cmp	r0, #0x0
 80022e2:      	beq	#-0x14 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x306>
 80022e4:      	subs	r1, r4, #0x1
 80022e6:      	b	#0x20 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x33e>
 80022e8:      	movs	r1, #0x0
 80022ea:      	mov	r6, r11
 80022ec:      	cmp	r3, #0xe0
 80022ee:      	blo.w	#-0x224 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x102>
 80022f2:      	cmp	r6, r11
 80022f4:      	beq	#0x22 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x34e>
 80022f6:      	ldrb	r5, [r6], #1
 80022fa:      	and	r5, r5, #0x3f
 80022fe:      	lsls	r5, r5, #0x6
 8002300:      	cmp	r3, #0xf0
 8002302:      	blo.w	#-0x238 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x102>
 8002306:      	b	#0x1a <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x358>
 8002308:      	mov	r1, r10
 800230a:      	movs	r0, #0x0
 800230c:      	cmp	r1, r10
 800230e:      	it	lo
 8002310:      	movlo	r0, #0x1
 8002312:      	add	sp, #0xc
 8002314:      	pop.w	{r8, r9, r10, r11}
 8002318:      	pop	{r4, r5, r6, r7, pc}
 800231a:      	movs	r5, #0x0
 800231c:      	mov	r6, r11
 800231e:      	cmp	r3, #0xf0
 8002320:      	blo.w	#-0x256 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x102>
 8002324:      	and	r3, r3, #0x7
 8002328:      	cmp	r6, r11
 800232a:      	itte	ne
 800232c:      	ldrbne	r6, [r6]
 800232e:      	andne	r6, r6, #0x3f
 8002332:      	moveq	r6, #0x0
 8002334:      	orr.w	r1, r1, r3, lsl #18
 8002338:      	orrs	r1, r5
 800233a:      	orrs	r1, r6
 800233c:      	cmp.w	r1, #0x110000
 8002340:      	bne.w	#-0x276 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x102>
 8002344:      	mov	r2, r9
 8002346:      	cmp.w	lr, #0x1
 800234a:      	beq.w	#-0x108 <core::fmt::Formatter::pad::h5f277c03c05ffc94+0x27a>
 800234e:      	ldrd	r1, r0, [r0, #24]
 8002352:      	ldr	r3, [r0, #0xc]
 8002354:      	mov	r0, r1
 8002356:      	mov	r1, r4
 8002358:      	add	sp, #0xc
 800235a:      	pop.w	{r8, r9, r10, r11}
 800235e:      	pop.w	{r4, r5, r6, r7, lr}
 8002362:      	bx	r3

08002364 <core::slice::index::slice_start_index_len_fail::h363bb3ce2d1c3c3d>:
 8002364:      	push	{r7, lr}
 8002366:      	mov	r7, sp
 8002368:      	sub	sp, #0x30
 800236a:      	strd	r0, r1, [sp]
 800236e:      	add	r1, sp, #0x20
 8002370:      	movs	r0, #0x2
 8002372:      	str	r1, [sp, #0x18]
 8002374:      	movs	r1, #0x0
 8002376:      	str	r0, [sp, #0x1c]
 8002378:      	strd	r0, r1, [sp, #12]
 800237c:      	movw	r0, #0x36c8
 8002380:      	movt	r0, #0x800
 8002384:      	str	r1, [sp, #0x14]
 8002386:      	str	r0, [sp, #0x8]
 8002388:      	movw	r0, #0x24fd
 800238c:      	add	r1, sp, #0x4
 800238e:      	movt	r0, #0x800
 8002392:      	str	r0, [sp, #0x2c]
 8002394:      	strd	r0, r1, [sp, #36]
 8002398:      	mov	r0, sp
 800239a:      	str	r0, [sp, #0x20]
 800239c:      	add	r0, sp, #0x8
 800239e:      	mov	r1, r2
 80023a0:      	bl	#-0x8b2
 80023a4:      	trap

080023a6 <core::slice::index::slice_end_index_len_fail::he5288c85efe40f89>:
 80023a6:      	push	{r7, lr}
 80023a8:      	mov	r7, sp
 80023aa:      	sub	sp, #0x30
 80023ac:      	strd	r0, r1, [sp]
 80023b0:      	add	r1, sp, #0x20
 80023b2:      	movs	r0, #0x2
 80023b4:      	str	r1, [sp, #0x18]
 80023b6:      	movs	r1, #0x0
 80023b8:      	str	r0, [sp, #0x1c]
 80023ba:      	strd	r0, r1, [sp, #12]
 80023be:      	movw	r0, #0x36d8
 80023c2:      	movt	r0, #0x800
 80023c6:      	str	r1, [sp, #0x14]
 80023c8:      	str	r0, [sp, #0x8]
 80023ca:      	movw	r0, #0x24fd
 80023ce:      	add	r1, sp, #0x4
 80023d0:      	movt	r0, #0x800
 80023d4:      	str	r0, [sp, #0x2c]
 80023d6:      	strd	r0, r1, [sp, #36]
 80023da:      	mov	r0, sp
 80023dc:      	str	r0, [sp, #0x20]
 80023de:      	add	r0, sp, #0x8
 80023e0:      	mov	r1, r2
 80023e2:      	bl	#-0x8f4
 80023e6:      	trap

080023e8 <core::slice::index::slice_index_order_fail::h9b6327bd328340ec>:
 80023e8:      	push	{r7, lr}
 80023ea:      	mov	r7, sp
 80023ec:      	sub	sp, #0x30
 80023ee:      	strd	r0, r1, [sp]
 80023f2:      	add	r1, sp, #0x20
 80023f4:      	movs	r0, #0x2
 80023f6:      	str	r1, [sp, #0x18]
 80023f8:      	movs	r1, #0x0
 80023fa:      	str	r0, [sp, #0x1c]
 80023fc:      	strd	r0, r1, [sp, #12]
 8002400:      	movw	r0, #0x370c
 8002404:      	movt	r0, #0x800
 8002408:      	str	r1, [sp, #0x14]
 800240a:      	str	r0, [sp, #0x8]
 800240c:      	movw	r0, #0x24fd
 8002410:      	add	r1, sp, #0x4
 8002412:      	movt	r0, #0x800
 8002416:      	str	r0, [sp, #0x2c]
 8002418:      	strd	r0, r1, [sp, #36]
 800241c:      	mov	r0, sp
 800241e:      	str	r0, [sp, #0x20]
 8002420:      	add	r0, sp, #0x8
 8002422:      	mov	r1, r2
 8002424:      	bl	#-0x936
 8002428:      	trap

0800242a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941>:
 800242a:      	push	{r4, r5, r7, lr}
 800242c:      	add	r7, sp, #0x8
 800242e:      	sub	sp, #0x88
 8002430:      	ldr	r0, [r0]
 8002432:      	add.w	r12, sp, #0x8
 8002436:      	movs	r2, #0x81
 8002438:      	mov.w	lr, #0x0
 800243c:      	and	r3, r0, #0xf
 8002440:      	add.w	r4, r3, #0x37
 8002444:      	cmp	r3, #0xa
 8002446:      	it	lo
 8002448:      	addlo.w	r4, r3, #0x30
 800244c:      	add.w	r3, r12, r2
 8002450:      	cmp.w	lr, r0, lsr #4
 8002454:      	strb	r4, [r3, #-2]
 8002458:      	beq	#0x5c <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0x8e>
 800245a:      	lsrs	r4, r0, #0x4
 800245c:      	and	r4, r4, #0xf
 8002460:      	add.w	r5, r4, #0x37
 8002464:      	cmp	r4, #0xa
 8002466:      	it	lo
 8002468:      	addlo.w	r5, r4, #0x30
 800246c:      	cmp.w	lr, r0, lsr #8
 8002470:      	strb	r5, [r3, #-3]
 8002474:      	beq	#0x46 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0x94>
 8002476:      	lsrs	r4, r0, #0x8
 8002478:      	and	r4, r4, #0xf
 800247c:      	add.w	r5, r4, #0x37
 8002480:      	cmp	r4, #0xa
 8002482:      	it	lo
 8002484:      	addlo.w	r5, r4, #0x30
 8002488:      	cmp.w	lr, r0, lsr #12
 800248c:      	strb	r5, [r3, #-4]
 8002490:      	beq	#0x30 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0x9a>
 8002492:      	lsrs	r4, r0, #0xc
 8002494:      	subs	r2, #0x4
 8002496:      	and	r4, r4, #0xf
 800249a:      	add.w	r5, r4, #0x37
 800249e:      	cmp	r4, #0xa
 80024a0:      	it	lo
 80024a2:      	addlo.w	r5, r4, #0x30
 80024a6:      	strb	r5, [r3, #-5]
 80024aa:      	lsrs	r3, r0, #0x10
 80024ac:      	cmp.w	lr, r0, lsr #16
 80024b0:      	mov	r0, r3
 80024b2:      	bne	#-0x7a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0x12>
 80024b4:      	subs	r0, r2, #0x1
 80024b6:      	b	#0xe <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0x9e>
 80024b8:      	subs	r0, r2, #0x2
 80024ba:      	subs	r2, #0x1
 80024bc:      	b	#0x8 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0x9e>
 80024be:      	subs	r0, r2, #0x3
 80024c0:      	subs	r2, #0x2
 80024c2:      	b	#0x2 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0x9e>
 80024c4:      	subs	r0, r2, #0x4
 80024c6:      	subs	r2, #0x3
 80024c8:      	cmp	r0, #0x81
 80024ca:      	bhs	#0x1e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::hd5c5b218d96f6941+0xc2>
 80024cc:      	rsb.w	r2, r2, #0x81
 80024d0:      	add	r0, r12
 80024d2:      	movs	r3, #0x2
 80024d4:      	strd	r0, r2, [sp]
 80024d8:      	movw	r2, #0x35c8
 80024dc:      	mov	r0, r1
 80024de:      	movt	r2, #0x800
 80024e2:      	movs	r1, #0x1
 80024e4:      	bl	#-0x844
 80024e8:      	add	sp, #0x88
 80024ea:      	pop	{r4, r5, r7, pc}
 80024ec:      	movw	r2, #0x35b8
 80024f0:      	movs	r1, #0x80
 80024f2:      	movt	r2, #0x800
 80024f6:      	bl	#-0x196
 80024fa:      	trap

080024fc <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434>:
 80024fc:      	push	{r4, r5, r6, r7, lr}
 80024fe:      	add	r7, sp, #0xc
 8002500:      	push.w	{r8, r9, r10, r11}
 8002504:      	sub	sp, #0x34
 8002506:      	ldr	r4, [r0]
 8002508:      	movw	r0, #0x851f
 800250c:      	movw	r8, #0x35ca
 8002510:      	mov	r5, r1
 8002512:      	movw	r1, #0x2710
 8002516:      	cmp	r4, r1
 8002518:      	movt	r0, #0x51eb
 800251c:      	movt	r8, #0x800
 8002520:      	blo	#0x76 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434+0x9e>
 8002522:      	movw	r9, #0x1759
 8002526:      	movw	lr, #0xe0ff
 800252a:      	add.w	r11, sp, #0xc
 800252e:      	movs	r3, #0x0
 8002530:      	movt	r9, #0xd1b7
 8002534:      	mov.w	r10, #0x64
 8002538:      	movt	lr, #0x5f5
 800253c:      	str	r5, [sp, #0x8]
 800253e:      	umull	r2, r5, r4, r9
 8002542:      	cmp	r4, lr
 8002544:      	lsr.w	r2, r5, #0xd
 8002548:      	mls	r5, r2, r1, r4
 800254c:      	add.w	r1, r11, r3
 8002550:      	sub.w	r3, r3, #0x4
 8002554:      	mov	r4, r2
 8002556:      	uxth	r6, r5
 8002558:      	umull	r6, r12, r6, r0
 800255c:      	lsr.w	r6, r12, #0x5
 8002560:      	mls	r5, r6, r10, r5
 8002564:      	ldrh.w	r6, [r8, r6, lsl #1]
 8002568:      	strh.w	r6, [r1, #0x23]
 800256c:      	uxth	r5, r5
 800256e:      	ldrh.w	r5, [r8, r5, lsl #1]
 8002572:      	strh.w	r5, [r1, #0x25]
 8002576:      	movw	r1, #0x2710
 800257a:      	bhi	#-0x40 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434+0x42>
 800257c:      	ldr	r5, [sp, #0x8]
 800257e:      	add.w	r1, r3, #0x27
 8002582:      	mov	r4, r2
 8002584:      	cmp	r4, #0x63
 8002586:      	bgt	#0x16 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434+0xa4>
 8002588:      	mov	r3, r4
 800258a:      	cmp	r3, #0xa
 800258c:      	blt	#0x2e <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434+0xc2>
 800258e:      	subs	r1, #0x2
 8002590:      	ldrh.w	r0, [r8, r3, lsl #1]
 8002594:      	add	r2, sp, #0xc
 8002596:      	strh	r0, [r2, r1]
 8002598:      	b	#0x2c <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434+0xcc>
 800259a:      	movs	r1, #0x27
 800259c:      	cmp	r4, #0x63
 800259e:      	ble	#-0x1a <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434+0x8c>
 80025a0:      	uxth	r2, r4
 80025a2:      	subs	r1, #0x2
 80025a4:      	umull	r2, r3, r2, r0
 80025a8:      	add	r6, sp, #0xc
 80025aa:      	movs	r2, #0x64
 80025ac:      	lsrs	r3, r3, #0x5
 80025ae:      	mls	r2, r3, r2, r4
 80025b2:      	uxth	r2, r2
 80025b4:      	ldrh.w	r2, [r8, r2, lsl #1]
 80025b8:      	strh	r2, [r6, r1]
 80025ba:      	cmp	r3, #0xa
 80025bc:      	bge	#-0x32 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hfba4a3fa8d143434+0x92>
 80025be:      	subs	r1, #0x1
 80025c0:      	add	r2, sp, #0xc
 80025c2:      	add.w	r0, r3, #0x30
 80025c6:      	strb	r0, [r2, r1]
 80025c8:      	rsb.w	r0, r1, #0x27
 80025cc:      	add	r2, sp, #0xc
 80025ce:      	add	r1, r2
 80025d0:      	movw	r2, #0x3540
 80025d4:      	strd	r1, r0, [sp]
 80025d8:      	movt	r2, #0x800
 80025dc:      	mov	r0, r5
 80025de:      	movs	r1, #0x1
 80025e0:      	movs	r3, #0x0
 80025e2:      	bl	#-0x942
 80025e6:      	add	sp, #0x34
 80025e8:      	pop.w	{r8, r9, r10, r11}
 80025ec:      	pop	{r4, r5, r6, r7, pc}

080025ee <<&T as core::fmt::Display>::fmt::h8c100d326d3e7dcc>:
 80025ee:      	mov	r3, r1
 80025f0:      	ldrd	r1, r2, [r0]
 80025f4:      	mov	r0, r3
 80025f6:      	b.w	#-0x62e <core::fmt::Formatter::pad::h5f277c03c05ffc94>

080025fa <<&T as core::fmt::Display>::fmt::hd61d75bec2aa40a2>:
 80025fa:      	push	{r4, r5, r6, r7, lr}
 80025fc:      	add	r7, sp, #0xc
 80025fe:      	push.w	{r8, r9, r11}
 8002602:      	sub	sp, #0x18
 8002604:      	ldr.w	lr, [r0]
 8002608:      	mov	r2, sp
 800260a:      	ldrd	r12, r1, [r1, #24]
 800260e:      	mov	r3, r2
 8002610:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 8002614:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 8002618:      	mov	r0, r12
 800261a:      	bl	#-0xb06
 800261e:      	add	sp, #0x18
 8002620:      	pop.w	{r8, r9, r11}
 8002624:      	pop	{r4, r5, r6, r7, pc}

08002626 <<&T as core::fmt::Display>::fmt::hd9cdbae69889b66a>:
 8002626:      	ldr	r0, [r0]
 8002628:      	mov	r3, r1
 800262a:      	ldrd	r1, r2, [r0]
 800262e:      	mov	r0, r3
 8002630:      	b.w	#-0x668 <core::fmt::Formatter::pad::h5f277c03c05ffc94>

08002634 <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 8002634:      	push	{r7, lr}
 8002636:      	mov	r7, sp
 8002638:      	sub	sp, #0x48
 800263a:      	str	r0, [sp, #0x10]
;     interrupt::disable();
 800263c:      	bl	#0xaea
 8002640:      	b	#-0x2 <rust_begin_unwind+0xe>
;     let itm = unsafe { &mut *ITM::ptr() };
 8002642:      	b	#-0x2 <rust_begin_unwind+0x10>
 8002644:      	mov.w	r0, #0xe0000000
;     let itm = unsafe { &mut *ITM::ptr() };
 8002648:      	str	r0, [sp, #0x3c]
;     let stim = &mut itm.stim[0];
 800264a:      	mov	r1, r0
 800264c:      	str	r1, [sp, #0x4]
 800264e:      	str	r0, [sp, #0x40]
 8002650:      	add	r0, sp, #0x10
;     iprintln!(stim, "{}", info);
 8002652:      	str	r0, [sp, #0x34]
 8002654:      	ldr	r0, [sp, #0x34]
 8002656:      	str	r0, [sp, #0x44]
 8002658:      	movw	r1, #0x26a9
 800265c:      	movt	r1, #0x800
 8002660:      	bl	#0x62
 8002664:      	str	r0, [sp, #0x8]
 8002666:      	str	r1, [sp, #0xc]
 8002668:      	b	#-0x2 <rust_begin_unwind+0x36>
 800266a:      	ldr	r0, [sp, #0xc]
 800266c:      	ldr	r1, [sp, #0x8]
 800266e:      	str	r1, [sp, #0x2c]
 8002670:      	str	r0, [sp, #0x30]
 8002672:      	mov	r1, sp
 8002674:      	movs	r0, #0x1
 8002676:      	str	r0, [r1]
 8002678:      	movw	r1, #0x3720
 800267c:      	movt	r1, #0x800
 8002680:      	add	r0, sp, #0x14
 8002682:      	movs	r2, #0x2
 8002684:      	add	r3, sp, #0x2c
 8002686:      	bl	#0xba
 800268a:      	b	#-0x2 <rust_begin_unwind+0x58>
 800268c:      	ldr	r0, [sp, #0x4]
 800268e:      	add	r1, sp, #0x14
 8002690:      	bl	#0x252
 8002694:      	b	#-0x2 <rust_begin_unwind+0x62>
 8002696:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8002698:      	strb	r0, [r7, #-13]
 800269c:      	ldrb	r0, [r7, #-13]
 80026a0:      	bl	#0xe0
 80026a4:      	b	#-0x2 <rust_begin_unwind+0x72>
;     loop {
 80026a6:      	b	#-0x14 <rust_begin_unwind+0x62>

080026a8 <<&T as core::fmt::Display>::fmt::hbef5f8ea3925b7ed>:
 80026a8:      	push	{r7, lr}
 80026aa:      	mov	r7, sp
 80026ac:      	sub	sp, #0x10
 80026ae:      	str	r0, [sp, #0x8]
 80026b0:      	str	r1, [sp, #0xc]
 80026b2:      	ldr	r0, [r0]
 80026b4:      	bl	#-0xcea
 80026b8:      	str	r0, [sp, #0x4]
 80026ba:      	b	#-0x2 <<&T as core::fmt::Display>::fmt::hbef5f8ea3925b7ed+0x14>
 80026bc:      	ldr	r0, [sp, #0x4]
 80026be:      	and	r0, r0, #0x1
 80026c2:      	add	sp, #0x10
 80026c4:      	pop	{r7, pc}

080026c6 <core::fmt::ArgumentV1::new::h0acb9c2e4d5e796f>:
 80026c6:      	sub	sp, #0x24
 80026c8:      	str	r0, [sp, #0x4]
 80026ca:      	str	r0, [sp, #0x14]
 80026cc:      	str	r1, [sp, #0x18]
 80026ce:      	str	r1, [sp, #0x1c]
 80026d0:      	ldr	r0, [sp, #0x1c]
 80026d2:      	str	r0, [sp, #0x8]
 80026d4:      	b	#-0x2 <core::fmt::ArgumentV1::new::h0acb9c2e4d5e796f+0x10>
 80026d6:      	ldr	r0, [sp, #0x4]
 80026d8:      	str	r0, [sp, #0x20]
 80026da:      	ldr	r0, [sp, #0x20]
 80026dc:      	str	r0, [sp]
 80026de:      	b	#-0x2 <core::fmt::ArgumentV1::new::h0acb9c2e4d5e796f+0x1a>
 80026e0:      	ldr	r0, [sp, #0x8]
 80026e2:      	ldr	r1, [sp]
 80026e4:      	str	r1, [sp, #0xc]
 80026e6:      	str	r0, [sp, #0x10]
 80026e8:      	ldr	r0, [sp, #0xc]
 80026ea:      	ldr	r1, [sp, #0x10]
 80026ec:      	add	sp, #0x24
 80026ee:      	bx	lr

080026f0 <core::fmt::ArgumentV1::new::h2562de1c556c29dc>:
 80026f0:      	sub	sp, #0x24
 80026f2:      	str	r0, [sp, #0x4]
 80026f4:      	str	r0, [sp, #0x14]
 80026f6:      	str	r1, [sp, #0x18]
 80026f8:      	str	r1, [sp, #0x1c]
 80026fa:      	ldr	r0, [sp, #0x1c]
 80026fc:      	str	r0, [sp, #0x8]
 80026fe:      	b	#-0x2 <core::fmt::ArgumentV1::new::h2562de1c556c29dc+0x10>
 8002700:      	ldr	r0, [sp, #0x4]
 8002702:      	str	r0, [sp, #0x20]
 8002704:      	ldr	r0, [sp, #0x20]
 8002706:      	str	r0, [sp]
 8002708:      	b	#-0x2 <core::fmt::ArgumentV1::new::h2562de1c556c29dc+0x1a>
 800270a:      	ldr	r0, [sp, #0x8]
 800270c:      	ldr	r1, [sp]
 800270e:      	str	r1, [sp, #0xc]
 8002710:      	str	r0, [sp, #0x10]
 8002712:      	ldr	r0, [sp, #0xc]
 8002714:      	ldr	r1, [sp, #0x10]
 8002716:      	add	sp, #0x24
 8002718:      	bx	lr

0800271a <core::fmt::ArgumentV1::new::hb98c61e3b036a881>:
 800271a:      	sub	sp, #0x24
 800271c:      	str	r0, [sp, #0x4]
 800271e:      	str	r0, [sp, #0x14]
 8002720:      	str	r1, [sp, #0x18]
 8002722:      	str	r1, [sp, #0x1c]
 8002724:      	ldr	r0, [sp, #0x1c]
 8002726:      	str	r0, [sp, #0x8]
 8002728:      	b	#-0x2 <core::fmt::ArgumentV1::new::hb98c61e3b036a881+0x10>
 800272a:      	ldr	r0, [sp, #0x4]
 800272c:      	str	r0, [sp, #0x20]
 800272e:      	ldr	r0, [sp, #0x20]
 8002730:      	str	r0, [sp]
 8002732:      	b	#-0x2 <core::fmt::ArgumentV1::new::hb98c61e3b036a881+0x1a>
 8002734:      	ldr	r0, [sp, #0x8]
 8002736:      	ldr	r1, [sp]
 8002738:      	str	r1, [sp, #0xc]
 800273a:      	str	r0, [sp, #0x10]
 800273c:      	ldr	r0, [sp, #0xc]
 800273e:      	ldr	r1, [sp, #0x10]
 8002740:      	add	sp, #0x24
 8002742:      	bx	lr

08002744 <core::fmt::Arguments::new_v1::hce4be011d78e2569>:
 8002744:      	push	{r7, lr}
 8002746:      	mov	r7, sp
 8002748:      	sub	sp, #0x18
 800274a:      	mov	r12, r1
 800274c:      	mov	r1, r0
 800274e:      	ldr	r0, [r7, #0x8]
 8002750:      	str.w	r12, [sp, #0x8]
 8002754:      	str	r2, [sp, #0xc]
 8002756:      	str	r3, [sp, #0x10]
 8002758:      	str	r0, [sp, #0x14]
 800275a:      	mov.w	lr, #0x0
 800275e:      	str.w	lr, [sp, #0x4]
 8002762:      	str.w	lr, [sp]
 8002766:      	str.w	lr, [sp]
 800276a:      	str.w	r12, [r1]
 800276e:      	str	r2, [r1, #0x4]
 8002770:      	ldr.w	r12, [sp]
 8002774:      	ldr	r2, [sp, #0x4]
 8002776:      	str.w	r12, [r1, #0x8]
 800277a:      	str	r2, [r1, #0xc]
 800277c:      	str	r3, [r1, #0x10]
 800277e:      	str	r0, [r1, #0x14]
 8002780:      	add	sp, #0x18
 8002782:      	pop	{r7, pc}

08002784 <core::sync::atomic::compiler_fence::h63ca49f532b9bc67>:
 8002784:      	push	{r7, lr}
 8002786:      	mov	r7, sp
 8002788:      	sub	sp, #0x8
 800278a:      	strb	r0, [r7, #-1]
 800278e:      	ldrb	r0, [r7, #-1]
 8002792:      	str	r0, [sp]
 8002794:      	ldr	r1, [sp]
 8002796:      	tbb	[pc, r1]

0800279a <$d.1>:
 800279a:	04 10 11 12	.word	0x12111004
 800279e:	13 00		.short	0x0013

080027a0 <$t.2>:
 80027a0:      	trap
 80027a2:      	movw	r0, #0x3730
 80027a6:      	movt	r0, #0x800
 80027aa:      	movw	r2, #0x37b4
 80027ae:      	movt	r2, #0x800
 80027b2:      	movs	r1, #0x32
 80027b4:      	bl	#-0xcf6
 80027b8:      	trap
 80027ba:      	b	#0x4 <$t.2+0x22>
 80027bc:      	b	#0x2 <$t.2+0x22>
 80027be:      	b	#0x0 <$t.2+0x22>
 80027c0:      	b	#-0x2 <$t.2+0x22>
 80027c2:      	add	sp, #0x8
 80027c4:      	pop	{r7, pc}

080027c6 <core::fmt::Write::write_char::he9e9bc24fb8c57b7>:
 80027c6:      	push	{r7, lr}
 80027c8:      	mov	r7, sp
 80027ca:      	sub	sp, #0x20
 80027cc:      	str	r1, [sp, #0x4]
 80027ce:      	mov	r1, r0
 80027d0:      	ldr	r0, [sp, #0x4]
 80027d2:      	str	r1, [sp, #0x8]
 80027d4:      	str	r1, [sp, #0x18]
 80027d6:      	str	r0, [sp, #0x1c]
 80027d8:      	movs	r1, #0x0
 80027da:      	str	r1, [sp, #0x14]
 80027dc:      	add	r1, sp, #0x14
 80027de:      	movs	r2, #0x4
 80027e0:      	bl	#0x330
 80027e4:      	str	r0, [sp, #0xc]
 80027e6:      	str	r1, [sp, #0x10]
 80027e8:      	b	#-0x2 <core::fmt::Write::write_char::he9e9bc24fb8c57b7+0x24>
 80027ea:      	ldr	r2, [sp, #0x10]
 80027ec:      	ldr	r1, [sp, #0xc]
 80027ee:      	ldr	r0, [sp, #0x8]
 80027f0:      	bl	#0xb6
 80027f4:      	str	r0, [sp]
 80027f6:      	b	#-0x2 <core::fmt::Write::write_char::he9e9bc24fb8c57b7+0x32>
 80027f8:      	ldr	r0, [sp]
 80027fa:      	and	r0, r0, #0x1
 80027fe:      	add	sp, #0x20
 8002800:      	pop	{r7, pc}

08002802 <core::fmt::Write::write_fmt::h60a86e58ef794d60>:
 8002802:      	push	{r4, r5, r6, r7, lr}
 8002804:      	add	r7, sp, #0xc
 8002806:      	str	r11, [sp, #-4]!
 800280a:      	sub	sp, #0x20
 800280c:      	str	r0, [sp, #0x4]
 800280e:      	add	r2, sp, #0x8
 8002810:      	mov	r0, r2
 8002812:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8002816:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 800281a:      	movw	r1, #0x37c4
 800281e:      	movt	r1, #0x800
 8002822:      	add	r0, sp, #0x4
 8002824:      	bl	#-0xd10
 8002828:      	str	r0, [sp]
 800282a:      	b	#-0x2 <core::fmt::Write::write_fmt::h60a86e58ef794d60+0x2a>
 800282c:      	ldr	r0, [sp]
 800282e:      	and	r0, r0, #0x1
 8002832:      	add	sp, #0x20
 8002834:      	ldr	r11, [sp], #4
 8002838:      	pop	{r4, r5, r6, r7, pc}

0800283a <<&mut W as core::fmt::Write>::write_char::haca781873333ccad>:
 800283a:      	push	{r7, lr}
 800283c:      	mov	r7, sp
 800283e:      	sub	sp, #0x10
 8002840:      	str	r0, [sp, #0x8]
 8002842:      	str	r1, [sp, #0xc]
 8002844:      	ldr	r0, [r0]
 8002846:      	bl	#-0x84
 800284a:      	str	r0, [sp, #0x4]
 800284c:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_char::haca781873333ccad+0x14>
 800284e:      	ldr	r0, [sp, #0x4]
 8002850:      	and	r0, r0, #0x1
 8002854:      	add	sp, #0x10
 8002856:      	pop	{r7, pc}

08002858 <<&mut W as core::fmt::Write>::write_fmt::ha823e3a34e782eb3>:
 8002858:      	push	{r4, r5, r6, r7, lr}
 800285a:      	add	r7, sp, #0xc
 800285c:      	str	r8, [sp, #-4]!
 8002860:      	sub	sp, #0x20
 8002862:      	mov	r3, r1
 8002864:      	str	r0, [sp, #0x1c]
 8002866:      	ldr	r0, [r0]
 8002868:      	add	r1, sp, #0x4
 800286a:      	mov	r2, r1
 800286c:      	ldm.w	r3, {r4, r5, r6, r8, r12, lr}
 8002870:      	stm.w	r2, {r4, r5, r6, r8, r12, lr}
 8002874:      	bl	#-0x76
 8002878:      	str	r0, [sp]
 800287a:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_fmt::ha823e3a34e782eb3+0x24>
 800287c:      	ldr	r0, [sp]
 800287e:      	and	r0, r0, #0x1
 8002882:      	add	sp, #0x20
 8002884:      	ldr	r8, [sp], #4
 8002888:      	pop	{r4, r5, r6, r7, pc}

0800288a <<&mut W as core::fmt::Write>::write_str::h1ef7f41f784db882>:
 800288a:      	push	{r7, lr}
 800288c:      	mov	r7, sp
 800288e:      	sub	sp, #0x10
 8002890:      	str	r0, [sp, #0x4]
 8002892:      	str	r1, [sp, #0x8]
 8002894:      	str	r2, [sp, #0xc]
 8002896:      	ldr	r0, [r0]
 8002898:      	bl	#0xe
 800289c:      	str	r0, [sp]
 800289e:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_str::h1ef7f41f784db882+0x16>
 80028a0:      	ldr	r0, [sp]
 80028a2:      	and	r0, r0, #0x1
 80028a6:      	add	sp, #0x10
 80028a8:      	pop	{r7, pc}

080028aa <<cortex_m::itm::Port as core::fmt::Write>::write_str::h120f2f78a5e2195a>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 80028aa:      	push	{r7, lr}
 80028ac:      	mov	r7, sp
 80028ae:      	sub	sp, #0x30
 80028b0:      	str	r0, [sp, #0x14]
 80028b2:      	str	r1, [sp, #0x18]
 80028b4:      	str	r2, [sp, #0x1c]
;         write_all(self.0, s.as_bytes());
 80028b6:      	ldr	r0, [r0]
 80028b8:      	str	r0, [sp, #0x4]
 80028ba:      	str	r1, [sp, #0x20]
 80028bc:      	str	r2, [sp, #0x24]
 80028be:      	str	r1, [sp, #0x28]
 80028c0:      	str	r2, [sp, #0x2c]
 80028c2:      	ldr	r0, [sp, #0x28]
 80028c4:      	str	r0, [sp, #0x8]
 80028c6:      	ldr	r0, [sp, #0x2c]
;         write_all(self.0, s.as_bytes());
 80028c8:      	str	r0, [sp, #0xc]
 80028ca:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::h120f2f78a5e2195a+0x22>
 80028cc:      	ldr	r2, [sp, #0xc]
 80028ce:      	ldr	r1, [sp, #0x8]
 80028d0:      	ldr	r0, [sp, #0x4]
 80028d2:      	bl	#0x61e
 80028d6:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::h120f2f78a5e2195a+0x2e>
 80028d8:      	movs	r0, #0x0
;         Ok(())
 80028da:      	strb	r0, [r7, #-29]
;     }
 80028de:      	ldrb	r0, [r7, #-29]
 80028e2:      	add	sp, #0x30
 80028e4:      	pop	{r7, pc}

080028e6 <cortex_m::itm::write_fmt::h8d66a43a54fdad45>:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 80028e6:      	push	{r4, r5, r6, r7, lr}
 80028e8:      	add	r7, sp, #0xc
 80028ea:      	str	r11, [sp, #-4]!
 80028ee:      	sub	sp, #0x28
 80028f0:      	mov	r2, r1
 80028f2:      	str	r0, [sp, #0x24]
;     Port(port).write_fmt(args).ok();
 80028f4:      	str	r0, [sp, #0x8]
 80028f6:      	add	r1, sp, #0xc
 80028f8:      	mov	r0, r1
 80028fa:      	ldm.w	r2, {r3, r4, r5, r6, r12, lr}
 80028fe:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8002902:      	add	r0, sp, #0x8
 8002904:      	bl	#-0x106
 8002908:      	str	r0, [sp, #0x4]
 800290a:      	b	#-0x2 <cortex_m::itm::write_fmt::h8d66a43a54fdad45+0x26>
 800290c:      	ldr	r0, [sp, #0x4]
 800290e:      	and	r0, r0, #0x1
 8002912:      	bl	#0x3e2
 8002916:      	b	#-0x2 <cortex_m::itm::write_fmt::h8d66a43a54fdad45+0x32>
; }
 8002918:      	add	sp, #0x28
 800291a:      	ldr	r11, [sp], #4
 800291e:      	pop	{r4, r5, r6, r7, pc}

08002920 <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::h002525a40f473171>:
 8002920:      	sub	sp, #0x4
 8002922:      	str	r0, [sp]
 8002924:      	add	sp, #0x4
 8002926:      	bx	lr

08002928 <core::char::methods::encode_utf8_raw::hbf75d1c17db0367e>:
 8002928:      	push	{r7, lr}
 800292a:      	mov	r7, sp
 800292c:      	sub	sp, #0xd8
 800292e:      	str	r2, [sp, #0x3c]
 8002930:      	str	r1, [sp, #0x40]
 8002932:      	str	r0, [sp, #0x44]
 8002934:      	str	r1, [sp, #0x9c]
 8002936:      	str	r2, [sp, #0xa0]
 8002938:      	ldr	r0, [sp, #0x44]
 800293a:      	bl	#0x202
 800293e:      	str	r0, [sp, #0x48]
 8002940:      	b	#-0x2 <core::char::methods::encode_utf8_raw::hbf75d1c17db0367e+0x1a>
 8002942:      	ldr	r1, [sp, #0x3c]
 8002944:      	ldr	r0, [sp, #0x40]
 8002946:      	ldr	r2, [sp, #0x48]
 8002948:      	str	r2, [sp, #0x30]
 800294a:      	movw	r2, #0x382c
 800294e:      	movt	r2, #0x800
 8002952:      	bl	#0x236
 8002956:      	str	r0, [sp, #0x34]
 8002958:      	str	r1, [sp, #0x38]
 800295a:      	b	#-0x2 <core::char::methods::encode_utf8_raw::hbf75d1c17db0367e+0x34>
 800295c:      	ldr	r0, [sp, #0x38]
 800295e:      	ldr	r1, [sp, #0x34]
 8002960:      	ldr	r2, [sp, #0x30]
 8002962:      	str	r2, [sp, #0x4c]
 8002964:      	str	r1, [sp, #0x50]
 8002966:      	str	r0, [sp, #0x54]
 8002968:      	ldr	r0, [sp, #0x4c]
 800296a:      	subs	r0, #0x1
 800296c:      	mov	r1, r0
 800296e:      	str	r1, [sp, #0x2c]
 8002970:      	cmp	r0, #0x3
 8002972:      	bhi	#0x8 <$t.2>
 8002974:      	ldr	r1, [sp, #0x2c]
 8002976:      	tbb	[pc, r1]

0800297a <$d.1>:
 800297a:	1b 1f 23 27	.word	0x27231f1b

0800297e <$t.2>:
 800297e:      	ldr	r0, [sp, #0x3c]
 8002980:      	str	r0, [sp, #0x94]
 8002982:      	add	r0, sp, #0x48
 8002984:      	str	r0, [sp, #0x88]
 8002986:      	add	r0, sp, #0x44
 8002988:      	str	r0, [sp, #0x8c]
 800298a:      	add	r0, sp, #0x94
 800298c:      	str	r0, [sp, #0x90]
 800298e:      	ldr	r0, [sp, #0x88]
 8002990:      	str	r0, [sp, #0xcc]
 8002992:      	ldr	r1, [sp, #0x8c]
 8002994:      	str	r1, [sp, #0x1c]
 8002996:      	str	r1, [sp, #0xd0]
 8002998:      	ldr	r1, [sp, #0x90]
 800299a:      	str	r1, [sp, #0x20]
 800299c:      	str	r1, [sp, #0xd4]
 800299e:      	movw	r1, #0x24fd
 80029a2:      	movt	r1, #0x800
 80029a6:      	bl	#-0x290
 80029aa:      	str	r0, [sp, #0x24]
 80029ac:      	str	r1, [sp, #0x28]
 80029ae:      	b	#0xf2 <$t.2+0x126>
 80029b0:      	ldr	r0, [sp, #0x54]
 80029b2:      	cmp	r0, #0x0
 80029b4:      	bne	#0xda <$t.2+0x114>
 80029b6:      	b	#-0x3c <$t.2>
 80029b8:      	ldr	r0, [sp, #0x54]
 80029ba:      	cmp	r0, #0x1
 80029bc:      	bhi	#0xae <$t.2+0xf0>
 80029be:      	b	#-0x44 <$t.2>
 80029c0:      	ldr	r0, [sp, #0x54]
 80029c2:      	cmp	r0, #0x2
 80029c4:      	bhi	#0x70 <$t.2+0xba>
 80029c6:      	b	#-0x4c <$t.2>
 80029c8:      	ldr	r0, [sp, #0x54]
 80029ca:      	cmp	r0, #0x4
 80029cc:      	blo	#-0x52 <$t.2>
 80029ce:      	b	#-0x2 <$t.2+0x52>
 80029d0:      	ldr	r2, [sp, #0x50]
 80029d2:      	str	r2, [sp, #0xa4]
 80029d4:      	ldr.w	r12, [sp, #0x50]
 80029d8:      	add.w	r0, r12, #0x1
 80029dc:      	str	r0, [sp, #0xa8]
 80029de:      	ldr	r3, [sp, #0x50]
 80029e0:      	adds	r0, r3, #0x2
 80029e2:      	str	r0, [sp, #0xac]
 80029e4:      	ldr	r1, [sp, #0x50]
 80029e6:      	adds	r0, r1, #0x3
 80029e8:      	str	r0, [sp, #0xb0]
 80029ea:      	ldr	r0, [sp, #0x44]
 80029ec:      	lsrs	r0, r0, #0x12
 80029ee:      	mov.w	lr, #0x1e
 80029f2:      	bfi	r0, lr, #3, #29
 80029f6:      	strb	r0, [r2]
 80029f8:      	ldr	r0, [sp, #0x44]
 80029fa:      	lsrs	r0, r0, #0xc
 80029fc:      	movs	r2, #0x2
 80029fe:      	bfi	r0, r2, #6, #26
 8002a02:      	strb.w	r0, [r12, #0x1]
 8002a06:      	ldr	r0, [sp, #0x44]
 8002a08:      	lsrs	r0, r0, #0x6
 8002a0a:      	bfi	r0, r2, #6, #26
 8002a0e:      	strb	r0, [r3, #0x2]
 8002a10:      	ldrb.w	r0, [sp, #0x44]
 8002a14:      	bfi	r0, r2, #6, #26
 8002a18:      	strb	r0, [r1, #0x3]
 8002a1a:      	b	#-0x2 <$t.2+0x9e>
 8002a1c:      	ldr	r1, [sp, #0x3c]
 8002a1e:      	ldr	r0, [sp, #0x40]
 8002a20:      	ldr	r2, [sp, #0x48]
 8002a22:      	str	r2, [sp, #0x98]
 8002a24:      	ldr	r2, [sp, #0x98]
 8002a26:      	movw	r3, #0x383c
 8002a2a:      	movt	r3, #0x800
 8002a2e:      	bl	#0x176
 8002a32:      	str	r0, [sp, #0x14]
 8002a34:      	str	r1, [sp, #0x18]
 8002a36:      	b	#0x62 <$t.2+0x11e>
 8002a38:      	ldr	r2, [sp, #0x50]
 8002a3a:      	str	r2, [sp, #0xb4]
 8002a3c:      	ldr	r3, [sp, #0x50]
 8002a3e:      	adds	r0, r3, #0x1
 8002a40:      	str	r0, [sp, #0xb8]
 8002a42:      	ldr	r1, [sp, #0x50]
 8002a44:      	adds	r0, r1, #0x2
 8002a46:      	str	r0, [sp, #0xbc]
 8002a48:      	ldr	r0, [sp, #0x44]
 8002a4a:      	lsrs	r0, r0, #0xc
 8002a4c:      	mov.w	r12, #0xe
 8002a50:      	bfi	r0, r12, #4, #28
 8002a54:      	strb	r0, [r2]
 8002a56:      	ldr	r0, [sp, #0x44]
 8002a58:      	lsrs	r0, r0, #0x6
 8002a5a:      	movs	r2, #0x2
 8002a5c:      	bfi	r0, r2, #6, #26
 8002a60:      	strb	r0, [r3, #0x1]
 8002a62:      	ldrb.w	r0, [sp, #0x44]
 8002a66:      	bfi	r0, r2, #6, #26
 8002a6a:      	strb	r0, [r1, #0x2]
 8002a6c:      	b	#-0x54 <$t.2+0x9e>
 8002a6e:      	ldr	r2, [sp, #0x50]
 8002a70:      	str	r2, [sp, #0xc0]
 8002a72:      	ldr	r1, [sp, #0x50]
 8002a74:      	adds	r0, r1, #0x1
 8002a76:      	str	r0, [sp, #0xc4]
 8002a78:      	ldr	r0, [sp, #0x44]
 8002a7a:      	lsrs	r0, r0, #0x6
 8002a7c:      	movs	r3, #0x6
 8002a7e:      	bfi	r0, r3, #5, #27
 8002a82:      	strb	r0, [r2]
 8002a84:      	ldrb.w	r0, [sp, #0x44]
 8002a88:      	movs	r2, #0x2
 8002a8a:      	bfi	r0, r2, #6, #26
 8002a8e:      	strb	r0, [r1, #0x1]
 8002a90:      	b	#-0x78 <$t.2+0x9e>
 8002a92:      	ldr	r1, [sp, #0x50]
 8002a94:      	str	r1, [sp, #0xc8]
 8002a96:      	ldr	r0, [sp, #0x44]
 8002a98:      	strb	r0, [r1]
 8002a9a:      	b	#-0x82 <$t.2+0x9e>
 8002a9c:      	ldr	r1, [sp, #0x18]
 8002a9e:      	ldr	r0, [sp, #0x14]
 8002aa0:      	add	sp, #0xd8
 8002aa2:      	pop	{r7, pc}
 8002aa4:      	ldr	r0, [sp, #0x1c]
 8002aa6:      	movw	r1, #0x242b
 8002aaa:      	movt	r1, #0x800
 8002aae:      	bl	#-0x3c2
 8002ab2:      	str	r0, [sp, #0xc]
 8002ab4:      	str	r1, [sp, #0x10]
 8002ab6:      	b	#-0x2 <$t.2+0x13a>
 8002ab8:      	ldr	r0, [sp, #0x20]
 8002aba:      	movw	r1, #0x24fd
 8002abe:      	movt	r1, #0x800
 8002ac2:      	bl	#-0x3ac
 8002ac6:      	str	r0, [sp, #0x4]
 8002ac8:      	str	r1, [sp, #0x8]
 8002aca:      	b	#-0x2 <$t.2+0x14e>
 8002acc:      	ldr	r0, [sp, #0x8]
 8002ace:      	ldr	r1, [sp, #0x4]
 8002ad0:      	ldr	r2, [sp, #0x10]
 8002ad2:      	ldr	r3, [sp, #0xc]
 8002ad4:      	ldr.w	r12, [sp, #0x28]
 8002ad8:      	ldr.w	lr, [sp, #0x24]
 8002adc:      	str.w	lr, [sp, #0x70]
 8002ae0:      	str.w	r12, [sp, #0x74]
 8002ae4:      	str	r3, [sp, #0x78]
 8002ae6:      	str	r2, [sp, #0x7c]
 8002ae8:      	str	r1, [sp, #0x80]
 8002aea:      	str	r0, [sp, #0x84]
 8002aec:      	mov	r0, sp
 8002aee:      	movs	r2, #0x3
 8002af0:      	str	r2, [r0]
 8002af2:      	movw	r1, #0x3888
 8002af6:      	movt	r1, #0x800
 8002afa:      	add	r0, sp, #0x58
 8002afc:      	add	r3, sp, #0x70
 8002afe:      	bl	#-0x3be
 8002b02:      	b	#-0x2 <$t.2+0x186>
 8002b04:      	movw	r1, #0x38a0
 8002b08:      	movt	r1, #0x800
 8002b0c:      	add	r0, sp, #0x58
 8002b0e:      	bl	#-0x1020
 8002b12:      	trap

08002b14 <core::char::methods::<impl char>::encode_utf8::hf5531e8a709d48fb>:
 8002b14:      	push	{r7, lr}
 8002b16:      	mov	r7, sp
 8002b18:      	sub	sp, #0x20
 8002b1a:      	str	r0, [sp, #0x14]
 8002b1c:      	str	r1, [sp, #0x18]
 8002b1e:      	str	r2, [sp, #0x1c]
 8002b20:      	bl	#-0x1fc
 8002b24:      	str	r0, [sp, #0xc]
 8002b26:      	str	r1, [sp, #0x10]
 8002b28:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::hf5531e8a709d48fb+0x16>
 8002b2a:      	ldr	r1, [sp, #0x10]
 8002b2c:      	ldr	r0, [sp, #0xc]
 8002b2e:      	bl	#0x50
 8002b32:      	str	r0, [sp, #0x4]
 8002b34:      	str	r1, [sp, #0x8]
 8002b36:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::hf5531e8a709d48fb+0x24>
 8002b38:      	ldr	r1, [sp, #0x8]
 8002b3a:      	ldr	r0, [sp, #0x4]
 8002b3c:      	add	sp, #0x20
 8002b3e:      	pop	{r7, pc}

08002b40 <core::char::methods::len_utf8::h7166ad5d61a1756b>:
 8002b40:      	sub	sp, #0xc
 8002b42:      	str	r0, [sp]
 8002b44:      	str	r0, [sp, #0x8]
 8002b46:      	cmp	r0, #0x80
 8002b48:      	blo	#0xa <core::char::methods::len_utf8::h7166ad5d61a1756b+0x16>
 8002b4a:      	b	#-0x2 <core::char::methods::len_utf8::h7166ad5d61a1756b+0xc>
 8002b4c:      	ldr	r0, [sp]
 8002b4e:      	cmp.w	r0, #0x800
 8002b52:      	blo	#0x16 <core::char::methods::len_utf8::h7166ad5d61a1756b+0x2c>
 8002b54:      	b	#0xa <core::char::methods::len_utf8::h7166ad5d61a1756b+0x22>
 8002b56:      	movs	r0, #0x1
 8002b58:      	str	r0, [sp, #0x4]
 8002b5a:      	b	#-0x2 <core::char::methods::len_utf8::h7166ad5d61a1756b+0x1c>
 8002b5c:      	ldr	r0, [sp, #0x4]
 8002b5e:      	add	sp, #0xc
 8002b60:      	bx	lr
 8002b62:      	ldr	r0, [sp]
 8002b64:      	cmp.w	r0, #0x10000
 8002b68:      	blo	#0xe <core::char::methods::len_utf8::h7166ad5d61a1756b+0x3a>
 8002b6a:      	b	#0x6 <core::char::methods::len_utf8::h7166ad5d61a1756b+0x34>
 8002b6c:      	movs	r0, #0x2
 8002b6e:      	str	r0, [sp, #0x4]
 8002b70:      	b	#-0x2 <core::char::methods::len_utf8::h7166ad5d61a1756b+0x32>
 8002b72:      	b	#-0x1a <core::char::methods::len_utf8::h7166ad5d61a1756b+0x1c>
 8002b74:      	movs	r0, #0x4
 8002b76:      	str	r0, [sp, #0x4]
 8002b78:      	b	#0x4 <core::char::methods::len_utf8::h7166ad5d61a1756b+0x40>
 8002b7a:      	movs	r0, #0x3
 8002b7c:      	str	r0, [sp, #0x4]
 8002b7e:      	b	#-0x2 <core::char::methods::len_utf8::h7166ad5d61a1756b+0x40>
 8002b80:      	b	#-0x12 <core::char::methods::len_utf8::h7166ad5d61a1756b+0x32>

08002b82 <core::str::converts::from_utf8_unchecked_mut::h143183b60a13ea1a>:
 8002b82:      	sub	sp, #0x8
 8002b84:      	str	r0, [sp]
 8002b86:      	str	r1, [sp, #0x4]
 8002b88:      	add	sp, #0x8
 8002b8a:      	bx	lr

08002b8c <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h6b8ea4c552080b73>:
 8002b8c:      	push	{r7, lr}
 8002b8e:      	mov	r7, sp
 8002b90:      	sub	sp, #0x18
 8002b92:      	str	r0, [sp, #0xc]
 8002b94:      	str	r1, [sp, #0x10]
 8002b96:      	bl	#0x112
 8002b9a:      	str	r0, [sp, #0x4]
 8002b9c:      	str	r1, [sp, #0x8]
 8002b9e:      	b	#-0x2 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h6b8ea4c552080b73+0x14>
 8002ba0:      	ldr	r1, [sp, #0x8]
 8002ba2:      	ldr	r0, [sp, #0x4]
 8002ba4:      	add	sp, #0x18
 8002ba6:      	pop	{r7, pc}

08002ba8 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::he0065a969a2a0ee4>:
 8002ba8:      	push	{r7, lr}
 8002baa:      	mov	r7, sp
 8002bac:      	sub	sp, #0x18
 8002bae:      	str	r2, [sp]
 8002bb0:      	mov	r2, r1
 8002bb2:      	mov	r1, r0
 8002bb4:      	ldr	r0, [sp]
 8002bb6:      	str	r1, [sp, #0xc]
 8002bb8:      	str	r2, [sp, #0x10]
 8002bba:      	str	r0, [sp, #0x14]
 8002bbc:      	bl	#0xb8
 8002bc0:      	str	r0, [sp, #0x4]
 8002bc2:      	str	r1, [sp, #0x8]
 8002bc4:      	b	#-0x2 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::he0065a969a2a0ee4+0x1e>
 8002bc6:      	ldr	r1, [sp, #0x8]
 8002bc8:      	ldr	r0, [sp, #0x4]
 8002bca:      	add	sp, #0x18
 8002bcc:      	pop	{r7, pc}

08002bce <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hdd3c197325e510ba>:
 8002bce:      	push	{r7, lr}
 8002bd0:      	mov	r7, sp
 8002bd2:      	sub	sp, #0x48
 8002bd4:      	str	r1, [sp, #0x10]
 8002bd6:      	str	r0, [sp, #0x14]
 8002bd8:      	str	r0, [sp, #0x1c]
 8002bda:      	str	r1, [sp, #0x20]
 8002bdc:      	str	r2, [sp, #0x24]
 8002bde:      	str	r3, [sp, #0x28]
 8002be0:      	str	r2, [sp, #0x2c]
 8002be2:      	str	r3, [sp, #0x30]
 8002be4:      	str	r2, [sp, #0x18]
 8002be6:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hdd3c197325e510ba+0x1a>
 8002be8:      	ldr	r0, [sp, #0x18]
 8002bea:      	ldr	r1, [sp, #0x14]
 8002bec:      	str	r0, [sp, #0x34]
 8002bee:      	str	r1, [sp, #0x38]
 8002bf0:      	str	r0, [sp, #0x3c]
 8002bf2:      	str	r1, [sp, #0x40]
 8002bf4:      	add	r0, r1
 8002bf6:      	str	r0, [sp, #0x44]
 8002bf8:      	ldr	r0, [sp, #0x44]
 8002bfa:      	str	r0, [sp, #0xc]
 8002bfc:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hdd3c197325e510ba+0x30>
 8002bfe:      	ldr	r0, [sp, #0xc]
 8002c00:      	ldr	r1, [sp, #0x10]
 8002c02:      	ldr	r2, [sp, #0x14]
 8002c04:      	subs	r1, r1, r2
 8002c06:      	bl	#0xac
 8002c0a:      	str	r0, [sp, #0x4]
 8002c0c:      	str	r1, [sp, #0x8]
 8002c0e:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hdd3c197325e510ba+0x42>
 8002c10:      	ldr	r1, [sp, #0x8]
 8002c12:      	ldr	r0, [sp, #0x4]
 8002c14:      	add	sp, #0x48
 8002c16:      	pop	{r7, pc}

08002c18 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h2e81c8018e376fee>:
 8002c18:      	push	{r7, lr}
 8002c1a:      	mov	r7, sp
 8002c1c:      	sub	sp, #0x30
 8002c1e:      	str	r3, [sp, #0xc]
 8002c20:      	str	r2, [sp, #0x10]
 8002c22:      	str	r1, [sp, #0x14]
 8002c24:      	str	r0, [sp, #0x18]
 8002c26:      	ldr.w	r12, [r7, #0x8]
 8002c2a:      	str.w	r12, [sp, #0x1c]
 8002c2e:      	str	r0, [sp, #0x20]
 8002c30:      	str	r1, [sp, #0x24]
 8002c32:      	str	r2, [sp, #0x28]
 8002c34:      	str	r3, [sp, #0x2c]
 8002c36:      	cmp	r0, r1
 8002c38:      	bhi	#0xa <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h2e81c8018e376fee+0x2e>
 8002c3a:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h2e81c8018e376fee+0x24>
 8002c3c:      	ldr	r0, [sp, #0x14]
 8002c3e:      	ldr	r1, [sp, #0xc]
 8002c40:      	cmp	r0, r1
 8002c42:      	bhi	#0x1e <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h2e81c8018e376fee+0x4c>
 8002c44:      	b	#0xa <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h2e81c8018e376fee+0x3a>
 8002c46:      	ldr	r2, [sp, #0x1c]
 8002c48:      	ldr	r1, [sp, #0x14]
 8002c4a:      	ldr	r0, [sp, #0x18]
 8002c4c:      	bl	#-0x868
 8002c50:      	trap
 8002c52:      	ldr	r3, [sp, #0xc]
 8002c54:      	ldr	r2, [sp, #0x10]
 8002c56:      	ldr	r1, [sp, #0x14]
 8002c58:      	ldr	r0, [sp, #0x18]
 8002c5a:      	bl	#-0x90
 8002c5e:      	str	r0, [sp, #0x4]
 8002c60:      	str	r1, [sp, #0x8]
 8002c62:      	b	#0xa <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h2e81c8018e376fee+0x58>
 8002c64:      	ldr	r2, [sp, #0x1c]
 8002c66:      	ldr	r1, [sp, #0xc]
 8002c68:      	ldr	r0, [sp, #0x14]
 8002c6a:      	bl	#-0x8c8
 8002c6e:      	trap
 8002c70:      	ldr	r1, [sp, #0x8]
 8002c72:      	ldr	r0, [sp, #0x4]
 8002c74:      	add	sp, #0x30
 8002c76:      	pop	{r7, pc}

08002c78 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h6d73643b4bf6bfec>:
 8002c78:      	push	{r7, lr}
 8002c7a:      	mov	r7, sp
 8002c7c:      	sub	sp, #0x20
 8002c7e:      	mov	r12, r3
 8002c80:      	mov	r3, r2
 8002c82:      	mov	r2, r1
 8002c84:      	str	r0, [sp, #0x14]
 8002c86:      	str	r2, [sp, #0x18]
 8002c88:      	str	r3, [sp, #0x1c]
 8002c8a:      	movs	r1, #0x0
 8002c8c:      	str	r1, [sp, #0xc]
 8002c8e:      	str	r0, [sp, #0x10]
 8002c90:      	ldr	r0, [sp, #0xc]
 8002c92:      	ldr	r1, [sp, #0x10]
 8002c94:      	mov	lr, sp
 8002c96:      	str.w	r12, [lr]
 8002c9a:      	bl	#-0x86
 8002c9e:      	str	r0, [sp, #0x4]
 8002ca0:      	str	r1, [sp, #0x8]
 8002ca2:      	b	#-0x2 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h6d73643b4bf6bfec+0x2c>
 8002ca4:      	ldr	r1, [sp, #0x8]
 8002ca6:      	ldr	r0, [sp, #0x4]
 8002ca8:      	add	sp, #0x20
 8002caa:      	pop	{r7, pc}

08002cac <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::h751560d85168f76d>:
 8002cac:      	sub	sp, #0xc
 8002cae:      	str	r0, [sp, #0x4]
 8002cb0:      	str	r1, [sp, #0x8]
 8002cb2:      	add	sp, #0xc
 8002cb4:      	bx	lr

08002cb6 <core::ptr::slice_from_raw_parts_mut::h88140b42c058469f>:
 8002cb6:      	push	{r7, lr}
 8002cb8:      	mov	r7, sp
 8002cba:      	sub	sp, #0x20
 8002cbc:      	str	r1, [sp, #0xc]
 8002cbe:      	str	r0, [sp, #0x14]
 8002cc0:      	str	r1, [sp, #0x18]
 8002cc2:      	str	r0, [sp, #0x1c]
 8002cc4:      	str	r0, [sp, #0x10]
 8002cc6:      	b	#-0x2 <core::ptr::slice_from_raw_parts_mut::h88140b42c058469f+0x12>
 8002cc8:      	ldr	r1, [sp, #0xc]
 8002cca:      	ldr	r0, [sp, #0x10]
 8002ccc:      	bl	#0xe
 8002cd0:      	str	r0, [sp, #0x4]
 8002cd2:      	str	r1, [sp, #0x8]
 8002cd4:      	b	#-0x2 <core::ptr::slice_from_raw_parts_mut::h88140b42c058469f+0x20>
 8002cd6:      	ldr	r1, [sp, #0x8]
 8002cd8:      	ldr	r0, [sp, #0x4]
 8002cda:      	add	sp, #0x20
 8002cdc:      	pop	{r7, pc}

08002cde <core::ptr::metadata::from_raw_parts_mut::h77906084835843ba>:
 8002cde:      	sub	sp, #0x18
 8002ce0:      	str	r0, [sp, #0x10]
 8002ce2:      	str	r1, [sp, #0x14]
 8002ce4:      	str	r0, [sp, #0x8]
 8002ce6:      	str	r1, [sp, #0xc]
 8002ce8:      	ldr	r1, [sp, #0x8]
 8002cea:      	ldr	r0, [sp, #0xc]
 8002cec:      	str	r1, [sp]
 8002cee:      	str	r0, [sp, #0x4]
 8002cf0:      	ldr	r0, [sp]
 8002cf2:      	ldr	r1, [sp, #0x4]
 8002cf4:      	add	sp, #0x18
 8002cf6:      	bx	lr

08002cf8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hbc868f3558a23d8eE>:
 8002cf8:      	sub	sp, #0x8
 8002cfa:      	strb.w	r0, [sp, #0x2]
 8002cfe:      	ldrb.w	r1, [sp, #0x2]
 8002d02:      	lsls	r0, r1, #0x1f
 8002d04:      	cbz	r0, #0x4
 8002d06:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hbc868f3558a23d8eE+0x10>
 8002d08:      	b	#0x8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hbc868f3558a23d8eE+0x1c>
 8002d0a:      	trap
 8002d0c:      	movs	r0, #0x1
 8002d0e:      	strb.w	r0, [sp, #0x3]
 8002d12:      	b	#0x6 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hbc868f3558a23d8eE+0x24>
 8002d14:      	movs	r0, #0x0
 8002d16:      	strb.w	r0, [sp, #0x3]
 8002d1a:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hbc868f3558a23d8eE+0x24>
 8002d1c:      	ldrb.w	r0, [sp, #0x2]
 8002d20:      	lsls	r0, r0, #0x1f
 8002d22:      	cbnz	r0, #0x8
 8002d24:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hbc868f3558a23d8eE+0x2e>
 8002d26:      	ldrb.w	r0, [sp, #0x3]
 8002d2a:      	add	sp, #0x8
 8002d2c:      	bx	lr
 8002d2e:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hbc868f3558a23d8eE+0x2e>

08002d30 <cortex_m::itm::write_words::hd63890536b2aeefc>:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8002d30:      	push	{r7, lr}
 8002d32:      	mov	r7, sp
 8002d34:      	sub	sp, #0x60
 8002d36:      	str	r2, [sp, #0x18]
 8002d38:      	mov	r2, r1
 8002d3a:      	ldr	r1, [sp, #0x18]
 8002d3c:      	str	r2, [sp, #0x1c]
 8002d3e:      	mov	r2, r0
 8002d40:      	ldr	r0, [sp, #0x1c]
 8002d42:      	str	r2, [sp, #0x20]
 8002d44:      	str	r2, [sp, #0x40]
 8002d46:      	str	r0, [sp, #0x44]
 8002d48:      	str	r1, [sp, #0x48]
;     let mut p = bytes.as_ptr();
 8002d4a:      	bl	#0x3c8
 8002d4e:      	str	r0, [sp, #0x24]
 8002d50:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x22>
 8002d52:      	ldr	r0, [sp, #0x18]
 8002d54:      	movs	r1, #0x0
;     for _ in 0..bytes.len() {
 8002d56:      	str	r1, [sp, #0x28]
 8002d58:      	str	r0, [sp, #0x2c]
 8002d5a:      	ldr	r0, [sp, #0x28]
 8002d5c:      	ldr	r1, [sp, #0x2c]
 8002d5e:      	bl	#0x310
 8002d62:      	str	r0, [sp, #0x10]
 8002d64:      	str	r1, [sp, #0x14]
 8002d66:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x38>
 8002d68:      	ldr	r0, [sp, #0x14]
 8002d6a:      	ldr	r1, [sp, #0x10]
 8002d6c:      	str	r1, [sp, #0x30]
 8002d6e:      	str	r0, [sp, #0x34]
 8002d70:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x42>
 8002d72:      	add	r0, sp, #0x30
;     for _ in 0..bytes.len() {
 8002d74:      	bl	#0x2e0
 8002d78:      	str	r1, [sp, #0x3c]
 8002d7a:      	str	r0, [sp, #0x38]
 8002d7c:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x4e>
 8002d7e:      	ldr	r0, [sp, #0x38]
 8002d80:      	cbz	r0, #0x4
 8002d82:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x54>
 8002d84:      	b	#0x4 <cortex_m::itm::write_words::hd63890536b2aeefc+0x5c>
 8002d86:      	trap
; }
 8002d88:      	add	sp, #0x60
 8002d8a:      	pop	{r7, pc}
;     for _ in 0..bytes.len() {
 8002d8c:      	ldr	r0, [sp, #0x3c]
 8002d8e:      	str	r0, [sp, #0x4c]
 8002d90:      	str	r0, [sp, #0x50]
;         while !stim.is_fifo_ready() {}
 8002d92:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x64>
 8002d94:      	ldr	r0, [sp, #0x20]
 8002d96:      	bl	#-0x14b6
 8002d9a:      	str	r0, [sp, #0xc]
 8002d9c:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x6e>
 8002d9e:      	ldr	r0, [sp, #0xc]
 8002da0:      	lsls	r0, r0, #0x1f
 8002da2:      	cbz	r0, #0xa
 8002da4:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x76>
;         stim.write_u32(ptr::read(p));
 8002da6:      	ldr	r0, [sp, #0x24]
 8002da8:      	bl	#-0x15dc
 8002dac:      	str	r0, [sp, #0x8]
 8002dae:      	b	#0x0 <cortex_m::itm::write_words::hd63890536b2aeefc+0x82>
;         while !stim.is_fifo_ready() {}
 8002db0:      	b	#-0x20 <cortex_m::itm::write_words::hd63890536b2aeefc+0x64>
;         stim.write_u32(ptr::read(p));
 8002db2:      	ldr	r1, [sp, #0x8]
 8002db4:      	ldr	r0, [sp, #0x20]
 8002db6:      	bl	#-0x14f6
 8002dba:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x8c>
;         p = p.offset(1);
 8002dbc:      	ldr	r0, [sp, #0x24]
 8002dbe:      	str	r0, [sp, #0x54]
 8002dc0:      	movs	r1, #0x1
 8002dc2:      	str	r1, [sp, #0x58]
 8002dc4:      	adds	r0, #0x4
 8002dc6:      	str	r0, [sp, #0x5c]
 8002dc8:      	ldr	r0, [sp, #0x5c]
;         p = p.offset(1);
 8002dca:      	str	r0, [sp, #0x4]
 8002dcc:      	b	#-0x2 <cortex_m::itm::write_words::hd63890536b2aeefc+0x9e>
 8002dce:      	ldr	r0, [sp, #0x4]
 8002dd0:      	str	r0, [sp, #0x24]
;     for _ in 0..bytes.len() {
 8002dd2:      	b	#-0x64 <cortex_m::itm::write_words::hd63890536b2aeefc+0x42>

08002dd4 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1>:
; unsafe fn write_aligned_impl(port: &mut Stim, buffer: &[u8]) {
 8002dd4:      	push	{r7, lr}
 8002dd6:      	mov	r7, sp
 8002dd8:      	sub	sp, #0x78
 8002dda:      	str	r2, [sp, #0x30]
 8002ddc:      	str	r1, [sp, #0x34]
 8002dde:      	str	r0, [sp, #0x38]
 8002de0:      	str	r0, [sp, #0x44]
 8002de2:      	str	r1, [sp, #0x48]
 8002de4:      	str	r2, [sp, #0x4c]
;     let len = buffer.len();
 8002de6:      	str	r2, [sp, #0x50]
;     if len == 0 {
 8002de8:      	cbnz	r2, #0x2
 8002dea:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x18>
; }
 8002dec:      	b	#0xe8 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x104>
;     let split = len & !0b11;
 8002dee:      	ldr	r1, [sp, #0x30]
 8002df0:      	ldr	r0, [sp, #0x34]
 8002df2:      	bic	r2, r1, #0x3
 8002df6:      	mov	r3, r2
 8002df8:      	str	r3, [sp, #0x28]
 8002dfa:      	str	r2, [sp, #0x54]
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 8002dfc:      	bl	#0x320
 8002e00:      	str	r0, [sp, #0x2c]
 8002e02:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x30>
 8002e04:      	ldr	r0, [sp, #0x28]
 8002e06:      	ldr	r1, [sp, #0x2c]
 8002e08:      	str	r1, [sp, #0x20]
 8002e0a:      	lsrs	r0, r0, #0x2
 8002e0c:      	str	r0, [sp, #0x24]
 8002e0e:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x3c>
 8002e10:      	ldr	r1, [sp, #0x24]
 8002e12:      	ldr	r0, [sp, #0x20]
 8002e14:      	bl	#-0x1492
 8002e18:      	str	r0, [sp, #0x18]
 8002e1a:      	str	r1, [sp, #0x1c]
 8002e1c:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x4a>
;     write_words(
 8002e1e:      	ldr	r2, [sp, #0x1c]
 8002e20:      	ldr	r1, [sp, #0x18]
 8002e22:      	ldr	r0, [sp, #0x38]
 8002e24:      	bl	#-0xf8
 8002e28:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x56>
;     let mut left = len & 0b11;
 8002e2a:      	ldr	r1, [sp, #0x30]
 8002e2c:      	ldr	r0, [sp, #0x34]
 8002e2e:      	and	r2, r1, #0x3
 8002e32:      	str	r2, [sp, #0x3c]
;     let mut ptr = buffer.as_ptr().add(split);
 8002e34:      	bl	#0x2e8
 8002e38:      	str	r0, [sp, #0x14]
 8002e3a:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x68>
 8002e3c:      	ldr	r0, [sp, #0x14]
 8002e3e:      	ldr	r1, [sp, #0x28]
 8002e40:      	str	r0, [sp, #0x58]
 8002e42:      	str	r1, [sp, #0x5c]
 8002e44:      	str	r0, [sp, #0x60]
 8002e46:      	str	r1, [sp, #0x64]
 8002e48:      	add	r0, r1
 8002e4a:      	str	r0, [sp, #0x68]
 8002e4c:      	ldr	r0, [sp, #0x68]
;     let mut ptr = buffer.as_ptr().add(split);
 8002e4e:      	str	r0, [sp, #0x40]
 8002e50:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x7e>
;     if left > 1 {
 8002e52:      	ldr	r0, [sp, #0x3c]
 8002e54:      	cmp	r0, #0x1
 8002e56:      	bhi	#0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x88>
 8002e58:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x86>
 8002e5a:      	b	#0x66 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xf0>
;         while !port.is_fifo_ready() {}
 8002e5c:      	ldr	r0, [sp, #0x38]
 8002e5e:      	bl	#-0x157e
 8002e62:      	str	r0, [sp, #0x10]
 8002e64:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x92>
 8002e66:      	ldr	r0, [sp, #0x10]
 8002e68:      	lsls	r0, r0, #0x1f
 8002e6a:      	cbz	r0, #0xa
 8002e6c:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x9a>
;         port.write_u16(ptr::read(ptr as *const u16));
 8002e6e:      	ldr	r0, [sp, #0x40]
 8002e70:      	bl	#-0x16e6
 8002e74:      	str	r0, [sp, #0xc]
 8002e76:      	b	#0x0 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xa6>
;         while !port.is_fifo_ready() {}
 8002e78:      	b	#-0x20 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x88>
;         port.write_u16(ptr::read(ptr as *const u16));
 8002e7a:      	ldr	r1, [sp, #0xc]
 8002e7c:      	ldr	r0, [sp, #0x38]
 8002e7e:      	bl	#-0x15e2
 8002e82:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xb0>
;         ptr = ptr.offset(2);
 8002e84:      	ldr	r0, [sp, #0x40]
 8002e86:      	str	r0, [sp, #0x6c]
 8002e88:      	movs	r1, #0x2
 8002e8a:      	str	r1, [sp, #0x70]
 8002e8c:      	adds	r0, #0x2
 8002e8e:      	str	r0, [sp, #0x74]
 8002e90:      	ldr	r0, [sp, #0x74]
;         ptr = ptr.offset(2);
 8002e92:      	str	r0, [sp, #0x8]
 8002e94:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xc2>
 8002e96:      	ldr	r0, [sp, #0x8]
 8002e98:      	str	r0, [sp, #0x40]
;         left -= 2;
 8002e9a:      	ldr	r0, [sp, #0x3c]
 8002e9c:      	subs	r1, r0, #0x2
 8002e9e:      	str	r1, [sp, #0x4]
 8002ea0:      	cmp	r0, #0x2
 8002ea2:      	blo	#0x6 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xd8>
 8002ea4:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xd2>
 8002ea6:      	ldr	r0, [sp, #0x4]
 8002ea8:      	str	r0, [sp, #0x3c]
;     if left > 1 {
 8002eaa:      	b	#0x16 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xf0>
;         left -= 2;
 8002eac:      	movw	r0, #0x3920
 8002eb0:      	movt	r0, #0x800
 8002eb4:      	movw	r2, #0x3910
 8002eb8:      	movt	r2, #0x800
 8002ebc:      	movs	r1, #0x21
 8002ebe:      	bl	#-0x1400
 8002ec2:      	trap
;     if left == 1 {
 8002ec4:      	ldr	r0, [sp, #0x3c]
 8002ec6:      	cmp	r0, #0x1
 8002ec8:      	bne	#0xa <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x102>
 8002eca:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xf8>
;         while !port.is_fifo_ready() {}
 8002ecc:      	ldr	r0, [sp, #0x38]
 8002ece:      	bl	#-0x15ee
 8002ed2:      	str	r0, [sp]
 8002ed4:      	b	#0x4 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x108>
;     if left == 1 {
 8002ed6:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x104>
; }
 8002ed8:      	add	sp, #0x78
 8002eda:      	pop	{r7, pc}
;         while !port.is_fifo_ready() {}
 8002edc:      	ldr	r0, [sp]
 8002ede:      	lsls	r0, r0, #0x1f
 8002ee0:      	cbz	r0, #0xc
 8002ee2:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x110>
;         port.write_u8(*ptr);
 8002ee4:      	ldr	r0, [sp, #0x38]
 8002ee6:      	ldr	r1, [sp, #0x40]
 8002ee8:      	ldrb	r1, [r1]
 8002eea:      	bl	#-0x1672
 8002eee:      	b	#0x0 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x11e>
;         while !port.is_fifo_ready() {}
 8002ef0:      	b	#-0x28 <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0xf8>
;     if left == 1 {
 8002ef2:      	b	#-0x1e <cortex_m::itm::write_aligned_impl::he622ec1d9cbf21a1+0x104>

08002ef4 <cortex_m::itm::write_all::hf76eede6422bef61>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 8002ef4:      	push	{r7, lr}
 8002ef6:      	mov	r7, sp
 8002ef8:      	sub	sp, #0x60
 8002efa:      	str	r2, [sp, #0x28]
 8002efc:      	mov	r2, r1
 8002efe:      	ldr	r1, [sp, #0x28]
 8002f00:      	str	r2, [sp, #0x2c]
 8002f02:      	mov	r2, r0
 8002f04:      	ldr	r0, [sp, #0x2c]
 8002f06:      	str	r2, [sp, #0x30]
 8002f08:      	str	r2, [sp, #0x3c]
 8002f0a:      	str	r0, [sp, #0x40]
 8002f0c:      	str	r1, [sp, #0x44]
;         let mut len = buffer.len();
 8002f0e:      	str	r1, [sp, #0x34]
;         let mut ptr = buffer.as_ptr();
 8002f10:      	bl	#0x20c
 8002f14:      	str	r0, [sp, #0x38]
 8002f16:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x24>
;         if len == 0 {
 8002f18:      	ldr	r0, [sp, #0x34]
 8002f1a:      	cbnz	r0, #0x2
 8002f1c:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x2a>
; //! Low level access to Cortex-M processors
 8002f1e:      	b	#0x10c <cortex_m::itm::write_all::hf76eede6422bef61+0x13a>
;         if ptr as usize % 2 == 1 {
 8002f20:      	ldrb.w	r0, [sp, #0x38]
 8002f24:      	lsls	r0, r0, #0x1f
 8002f26:      	cbz	r0, #0xa
 8002f28:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x36>
;             while !port.is_fifo_ready() {}
 8002f2a:      	ldr	r0, [sp, #0x30]
 8002f2c:      	bl	#-0x164c
 8002f30:      	str	r0, [sp, #0x24]
 8002f32:      	b	#0xc <cortex_m::itm::write_all::hf76eede6422bef61+0x4e>
;         if ptr as usize % 2 == 1 {
 8002f34:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x42>
;         if ptr as usize % 4 == 2 {
 8002f36:      	ldr	r0, [sp, #0x38]
 8002f38:      	and	r0, r0, #0x3
 8002f3c:      	cmp	r0, #0x2
 8002f3e:      	beq	#0x56 <cortex_m::itm::write_all::hf76eede6422bef61+0xa4>
 8002f40:      	b	#0x5c <cortex_m::itm::write_all::hf76eede6422bef61+0xac>
;             while !port.is_fifo_ready() {}
 8002f42:      	ldr	r0, [sp, #0x24]
 8002f44:      	lsls	r0, r0, #0x1f
 8002f46:      	cbz	r0, #0xc
 8002f48:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x56>
;             port.write_u8(*ptr);
 8002f4a:      	ldr	r0, [sp, #0x30]
 8002f4c:      	ldr	r1, [sp, #0x38]
 8002f4e:      	ldrb	r1, [r1]
 8002f50:      	bl	#-0x16d8
 8002f54:      	b	#0x0 <cortex_m::itm::write_all::hf76eede6422bef61+0x64>
;             while !port.is_fifo_ready() {}
 8002f56:      	b	#-0x30 <cortex_m::itm::write_all::hf76eede6422bef61+0x36>
;             ptr = ptr.offset(1);
 8002f58:      	ldr	r0, [sp, #0x38]
 8002f5a:      	str	r0, [sp, #0x48]
 8002f5c:      	movs	r1, #0x1
 8002f5e:      	str	r1, [sp, #0x4c]
 8002f60:      	adds	r0, #0x1
 8002f62:      	str	r0, [sp, #0x50]
 8002f64:      	ldr	r0, [sp, #0x50]
;             ptr = ptr.offset(1);
 8002f66:      	str	r0, [sp, #0x20]
 8002f68:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x76>
 8002f6a:      	ldr	r0, [sp, #0x20]
 8002f6c:      	str	r0, [sp, #0x38]
;             len -= 1;
 8002f6e:      	ldr	r0, [sp, #0x34]
 8002f70:      	subs	r1, r0, #0x1
 8002f72:      	str	r1, [sp, #0x1c]
 8002f74:      	cmp	r0, #0x1
 8002f76:      	blo	#0x6 <cortex_m::itm::write_all::hf76eede6422bef61+0x8c>
 8002f78:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x86>
 8002f7a:      	ldr	r0, [sp, #0x1c]
 8002f7c:      	str	r0, [sp, #0x34]
;         if ptr as usize % 2 == 1 {
 8002f7e:      	b	#-0x4c <cortex_m::itm::write_all::hf76eede6422bef61+0x42>
;             len -= 1;
 8002f80:      	movw	r0, #0x3920
 8002f84:      	movt	r0, #0x800
 8002f88:      	movw	r2, #0x3944
 8002f8c:      	movt	r2, #0x800
 8002f90:      	movs	r1, #0x21
 8002f92:      	bl	#-0x14d4
 8002f96:      	trap
;             if len > 1 {
 8002f98:      	ldr	r0, [sp, #0x34]
 8002f9a:      	cmp	r0, #0x1
 8002f9c:      	bhi	#0x18 <cortex_m::itm::write_all::hf76eede6422bef61+0xc4>
 8002f9e:      	b	#0xe <cortex_m::itm::write_all::hf76eede6422bef61+0xbc>
;         if ptr as usize % 4 == 2 {
 8002fa0:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0xae>
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 8002fa2:      	ldr	r0, [sp, #0x38]
 8002fa4:      	ldr	r1, [sp, #0x34]
 8002fa6:      	bl	#-0x1640
 8002faa:      	str	r0, [sp, #0x14]
 8002fac:      	str	r1, [sp, #0x18]
 8002fae:      	b	#0x6e <cortex_m::itm::write_all::hf76eede6422bef61+0x12c>
;                 if len == 1 {
 8002fb0:      	ldr	r0, [sp, #0x34]
 8002fb2:      	cmp	r0, #0x1
 8002fb4:      	beq	#0x7a <cortex_m::itm::write_all::hf76eede6422bef61+0x13e>
 8002fb6:      	b	#0x82 <cortex_m::itm::write_all::hf76eede6422bef61+0x148>
;                 while !port.is_fifo_ready() {}
 8002fb8:      	ldr	r0, [sp, #0x30]
 8002fba:      	bl	#-0x16da
 8002fbe:      	str	r0, [sp, #0x10]
 8002fc0:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0xce>
 8002fc2:      	ldr	r0, [sp, #0x10]
 8002fc4:      	lsls	r0, r0, #0x1f
 8002fc6:      	cbz	r0, #0xa
 8002fc8:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0xd6>
;                 port.write_u16(ptr::read(ptr as *const u16));
 8002fca:      	ldr	r0, [sp, #0x38]
 8002fcc:      	bl	#-0x1842
 8002fd0:      	str	r0, [sp, #0xc]
 8002fd2:      	b	#0x0 <cortex_m::itm::write_all::hf76eede6422bef61+0xe2>
;                 while !port.is_fifo_ready() {}
 8002fd4:      	b	#-0x20 <cortex_m::itm::write_all::hf76eede6422bef61+0xc4>
;                 port.write_u16(ptr::read(ptr as *const u16));
 8002fd6:      	ldr	r1, [sp, #0xc]
 8002fd8:      	ldr	r0, [sp, #0x30]
 8002fda:      	bl	#-0x173e
 8002fde:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0xec>
;                 ptr = ptr.offset(2);
 8002fe0:      	ldr	r0, [sp, #0x38]
 8002fe2:      	str	r0, [sp, #0x54]
 8002fe4:      	movs	r1, #0x2
 8002fe6:      	str	r1, [sp, #0x58]
 8002fe8:      	adds	r0, #0x2
 8002fea:      	str	r0, [sp, #0x5c]
 8002fec:      	ldr	r0, [sp, #0x5c]
;                 ptr = ptr.offset(2);
 8002fee:      	str	r0, [sp, #0x8]
 8002ff0:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0xfe>
 8002ff2:      	ldr	r0, [sp, #0x8]
 8002ff4:      	str	r0, [sp, #0x38]
;                 len -= 2;
 8002ff6:      	ldr	r0, [sp, #0x34]
 8002ff8:      	subs	r1, r0, #0x2
 8002ffa:      	str	r1, [sp, #0x4]
 8002ffc:      	cmp	r0, #0x2
 8002ffe:      	blo	#0x6 <cortex_m::itm::write_all::hf76eede6422bef61+0x114>
 8003000:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x10e>
 8003002:      	ldr	r0, [sp, #0x4]
 8003004:      	str	r0, [sp, #0x34]
;         if ptr as usize % 4 == 2 {
 8003006:      	b	#-0x68 <cortex_m::itm::write_all::hf76eede6422bef61+0xae>
;                 len -= 2;
 8003008:      	movw	r0, #0x3920
 800300c:      	movt	r0, #0x800
 8003010:      	movw	r2, #0x3954
 8003014:      	movt	r2, #0x800
 8003018:      	movs	r1, #0x21
 800301a:      	bl	#-0x155c
 800301e:      	trap
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 8003020:      	ldr	r2, [sp, #0x18]
 8003022:      	ldr	r1, [sp, #0x14]
 8003024:      	ldr	r0, [sp, #0x30]
 8003026:      	bl	#-0x256
 800302a:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x138>
; }
 800302c:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x13a>
 800302e:      	add	sp, #0x60
 8003030:      	pop	{r7, pc}
;                     while !port.is_fifo_ready() {}
 8003032:      	ldr	r0, [sp, #0x30]
 8003034:      	bl	#-0x1754
 8003038:      	str	r0, [sp]
 800303a:      	b	#0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x14c>
;                 if len == 1 {
 800303c:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x14a>
; //! Low level access to Cortex-M processors
 800303e:      	b	#-0x14 <cortex_m::itm::write_all::hf76eede6422bef61+0x13a>
;                     while !port.is_fifo_ready() {}
 8003040:      	ldr	r0, [sp]
 8003042:      	lsls	r0, r0, #0x1f
 8003044:      	cbz	r0, #0xc
 8003046:      	b	#-0x2 <cortex_m::itm::write_all::hf76eede6422bef61+0x154>
;                     port.write_u8(*ptr);
 8003048:      	ldr	r0, [sp, #0x30]
 800304a:      	ldr	r1, [sp, #0x38]
 800304c:      	ldrb	r1, [r1]
 800304e:      	bl	#-0x17d6
 8003052:      	b	#0x0 <cortex_m::itm::write_all::hf76eede6422bef61+0x162>
;                     while !port.is_fifo_ready() {}
 8003054:      	b	#-0x26 <cortex_m::itm::write_all::hf76eede6422bef61+0x13e>
;                 if len == 1 {
 8003056:      	b	#-0x1c <cortex_m::itm::write_all::hf76eede6422bef61+0x14a>

08003058 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::hba700b44f4938ad8>:
 8003058:      	push	{r7, lr}
 800305a:      	mov	r7, sp
 800305c:      	sub	sp, #0x10
 800305e:      	str	r0, [sp, #0xc]
 8003060:      	bl	#0x18
 8003064:      	str	r0, [sp, #0x4]
 8003066:      	str	r1, [sp, #0x8]
 8003068:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::hba700b44f4938ad8+0x12>
 800306a:      	ldr	r1, [sp, #0x8]
 800306c:      	ldr	r0, [sp, #0x4]
 800306e:      	add	sp, #0x10
 8003070:      	pop	{r7, pc}

08003072 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h69054a6c4b01dc2f>:
 8003072:      	sub	sp, #0x8
 8003074:      	str	r0, [sp]
 8003076:      	str	r1, [sp, #0x4]
 8003078:      	add	sp, #0x8
 800307a:      	bx	lr

0800307c <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c>:
 800307c:      	push	{r7, lr}
 800307e:      	mov	r7, sp
 8003080:      	sub	sp, #0x28
 8003082:      	str	r0, [sp, #0x10]
 8003084:      	str	r0, [sp, #0x20]
 8003086:      	adds	r1, r0, #0x4
 8003088:      	bl	#0x64
 800308c:      	str	r0, [sp, #0x14]
 800308e:      	b	#-0x2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c+0x14>
 8003090:      	ldr	r0, [sp, #0x14]
 8003092:      	lsls	r0, r0, #0x1f
 8003094:      	cbnz	r0, #0x6
 8003096:      	b	#-0x2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c+0x1c>
 8003098:      	movs	r0, #0x0
 800309a:      	str	r0, [sp, #0x18]
 800309c:      	b	#0x2e <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c+0x52>
 800309e:      	ldr	r0, [sp, #0x10]
 80030a0:      	bl	#0x68
 80030a4:      	str	r0, [sp, #0xc]
 80030a6:      	b	#-0x2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c+0x2c>
 80030a8:      	ldr	r0, [sp, #0xc]
 80030aa:      	movs	r1, #0x1
 80030ac:      	bl	#0x26
 80030b0:      	mov	r1, r0
 80030b2:      	str	r1, [sp, #0x8]
 80030b4:      	str	r0, [sp, #0x24]
 80030b6:      	b	#-0x2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c+0x3c>
 80030b8:      	ldr	r1, [sp, #0x8]
 80030ba:      	ldr	r0, [sp, #0x10]
 80030bc:      	bl	#-0x19f2
 80030c0:      	str	r0, [sp, #0x4]
 80030c2:      	b	#-0x2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c+0x48>
 80030c4:      	ldr	r0, [sp, #0x4]
 80030c6:      	str	r0, [sp, #0x1c]
 80030c8:      	movs	r0, #0x1
 80030ca:      	str	r0, [sp, #0x18]
 80030cc:      	b	#-0x2 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::hb31a2280390e193c+0x52>
 80030ce:      	ldr	r0, [sp, #0x18]
 80030d0:      	ldr	r1, [sp, #0x1c]
 80030d2:      	add	sp, #0x28
 80030d4:      	pop	{r7, pc}

080030d6 <<usize as core::iter::range::Step>::forward_unchecked::hdf62db6508d4f71c>:
 80030d6:      	sub	sp, #0x18
 80030d8:      	str	r0, [sp, #0x4]
 80030da:      	str	r1, [sp, #0x8]
 80030dc:      	str	r0, [sp, #0xc]
 80030de:      	str	r1, [sp, #0x10]
 80030e0:      	add	r0, r1
 80030e2:      	str	r0, [sp, #0x14]
 80030e4:      	ldr	r0, [sp, #0x14]
 80030e6:      	str	r0, [sp]
 80030e8:      	b	#-0x2 <<usize as core::iter::range::Step>::forward_unchecked::hdf62db6508d4f71c+0x14>
 80030ea:      	ldr	r0, [sp]
 80030ec:      	add	sp, #0x18
 80030ee:      	bx	lr

080030f0 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::h86023602b187ff0d>:
 80030f0:      	sub	sp, #0xc
 80030f2:      	str	r1, [sp]
 80030f4:      	mov	r1, r0
 80030f6:      	ldr	r0, [sp]
 80030f8:      	str	r1, [sp, #0x4]
 80030fa:      	str	r0, [sp, #0x8]
 80030fc:      	ldr	r1, [r1]
 80030fe:      	ldr	r2, [r0]
 8003100:      	movs	r0, #0x0
 8003102:      	cmp	r1, r2
 8003104:      	it	lo
 8003106:      	movlo	r0, #0x1
 8003108:      	add	sp, #0xc
 800310a:      	bx	lr

0800310c <core::clone::impls::<impl core::clone::Clone for usize>::clone::hb659083845f0a8f0>:
 800310c:      	sub	sp, #0x4
 800310e:      	str	r0, [sp]
 8003110:      	ldr	r0, [r0]
 8003112:      	add	sp, #0x4
 8003114:      	bx	lr

08003116 <core::slice::<impl [T]>::as_ptr::hb891e4c05b97d848>:
 8003116:      	sub	sp, #0x8
 8003118:      	str	r0, [sp]
 800311a:      	str	r1, [sp, #0x4]
 800311c:      	add	sp, #0x8
 800311e:      	bx	lr

08003120 <core::slice::<impl [T]>::as_ptr::h1a4e618549b142e9>:
 8003120:      	sub	sp, #0x8
 8003122:      	str	r0, [sp]
 8003124:      	str	r1, [sp, #0x4]
 8003126:      	add	sp, #0x8
 8003128:      	bx	lr

0800312a <cortex_m::interrupt::disable::hada935681f39ff30>:
; pub fn disable() {
 800312a:      	push	{r7, lr}
 800312c:      	mov	r7, sp
;     call_asm!(__cpsid());
 800312e:      	bl	#-0x1790
 8003132:      	b	#-0x2 <cortex_m::interrupt::disable::hada935681f39ff30+0xa>
; }
 8003134:      	pop	{r7, pc}

08003136 <__aeabi_memcpy>:
 8003136:      	b.w	#0x11c <memcpy>

0800313a <__aeabi_memcpy4>:
 800313a:      	push	{r4, r5, r7, lr}
 800313c:      	add	r7, sp, #0x8
 800313e:      	cmp	r2, #0x4
 8003140:      	blo	#0x62 <__aeabi_memcpy4+0x6c>
 8003142:      	sub.w	r12, r2, #0x4
 8003146:      	movs	r3, #0x1
 8003148:      	add.w	r3, r3, r12, lsr #2
 800314c:      	ands	lr, r3, #0x3
 8003150:      	beq	#0x2e <__aeabi_memcpy4+0x48>
 8003152:      	mov	r3, r1
 8003154:      	mov	r4, r0
 8003156:      	ldr	r5, [r3], #4
 800315a:      	cmp.w	lr, #0x1
 800315e:      	str	r5, [r4], #4
 8003162:      	bne	#0xc <__aeabi_memcpy4+0x38>
 8003164:      	mov	r2, r12
 8003166:      	mov	r0, r4
 8003168:      	mov	r1, r3
 800316a:      	cmp.w	r12, #0xc
 800316e:      	bhs	#0x16 <__aeabi_memcpy4+0x4e>
 8003170:      	b	#0x32 <__aeabi_memcpy4+0x6c>
 8003172:      	ldr	r3, [r1, #0x4]
 8003174:      	cmp.w	lr, #0x2
 8003178:      	str	r3, [r0, #0x4]
 800317a:      	bne	#0x30 <__aeabi_memcpy4+0x74>
 800317c:      	subs	r2, #0x8
 800317e:      	adds	r1, #0x8
 8003180:      	adds	r0, #0x8
 8003182:      	cmp.w	r12, #0xc
 8003186:      	blo	#0x1c <__aeabi_memcpy4+0x6c>
 8003188:      	ldr	r3, [r1]
 800318a:      	subs	r2, #0x10
 800318c:      	str	r3, [r0]
 800318e:      	cmp	r2, #0x3
 8003190:      	ldr	r3, [r1, #0x4]
 8003192:      	str	r3, [r0, #0x4]
 8003194:      	ldr	r3, [r1, #0x8]
 8003196:      	str	r3, [r0, #0x8]
 8003198:      	ldr	r3, [r1, #0xc]
 800319a:      	add.w	r1, r1, #0x10
 800319e:      	str	r3, [r0, #0xc]
 80031a0:      	add.w	r0, r0, #0x10
 80031a4:      	bhi	#-0x20 <__aeabi_memcpy4+0x4e>
 80031a6:      	pop.w	{r4, r5, r7, lr}
 80031aa:      	b.w	#-0x78 <__aeabi_memcpy>
 80031ae:      	ldr	r3, [r1, #0x8]
 80031b0:      	subs	r2, #0xc
 80031b2:      	str	r3, [r0, #0x8]
 80031b4:      	adds	r1, #0xc
 80031b6:      	adds	r0, #0xc
 80031b8:      	cmp.w	r12, #0xc
 80031bc:      	bhs	#-0x38 <__aeabi_memcpy4+0x4e>
 80031be:      	b	#-0x1c <__aeabi_memcpy4+0x6c>

080031c0 <__aeabi_memset>:
 80031c0:      	mov	r3, r1
 80031c2:      	mov	r1, r2
 80031c4:      	mov	r2, r3
 80031c6:      	b.w	#0x10a <memset>

080031ca <__aeabi_memset4>:
 80031ca:      	push	{r4, r6, r7, lr}
 80031cc:      	add	r7, sp, #0x8
 80031ce:      	mov	r3, r2
 80031d0:      	uxtb	r2, r2
 80031d2:      	cmp	r1, #0x4
 80031d4:      	blo	#0x72 <__aeabi_memset4+0x80>
 80031d6:      	sub.w	lr, r1, #0x4
 80031da:      	orr.w	r3, r2, r3, lsl #24
 80031de:      	movs	r4, #0x1
 80031e0:      	orr.w	r3, r3, r2, lsl #16
 80031e4:      	add.w	r4, r4, lr, lsr #2
 80031e8:      	orr.w	r3, r3, r2, lsl #8
 80031ec:      	ands	r4, r4, #0x3
 80031f0:      	beq	#0x14 <__aeabi_memset4+0x3e>
 80031f2:      	mov	r12, r0
 80031f4:      	cmp	r4, #0x1
 80031f6:      	str	r3, [r12], #4
 80031fa:      	bne	#0x12 <__aeabi_memset4+0x46>
 80031fc:      	mov	r1, lr
 80031fe:      	mov	r0, r12
 8003200:      	cmp.w	lr, #0xc
 8003204:      	bhs	#0x32 <__aeabi_memset4+0x70>
 8003206:      	b	#0x18 <__aeabi_memset4+0x58>
 8003208:      	cmp.w	lr, #0xc
 800320c:      	bhs	#0x2a <__aeabi_memset4+0x70>
 800320e:      	b	#0x10 <__aeabi_memset4+0x58>
 8003210:      	cmp	r4, #0x2
 8003212:      	str	r3, [r0, #0x4]
 8003214:      	bne	#0x14 <__aeabi_memset4+0x62>
 8003216:      	adds	r0, #0x8
 8003218:      	subs	r1, #0x8
 800321a:      	mov	r12, r0
 800321c:      	cmp.w	lr, #0xc
 8003220:      	bhs	#0x16 <__aeabi_memset4+0x70>
 8003222:      	mov	r0, r12
 8003224:      	pop.w	{r4, r6, r7, lr}
 8003228:      	b.w	#-0x6c <__aeabi_memset>
 800322c:      	str	r3, [r0, #0x8]
 800322e:      	adds	r0, #0xc
 8003230:      	subs	r1, #0xc
 8003232:      	mov	r12, r0
 8003234:      	cmp.w	lr, #0xc
 8003238:      	blo	#-0x1a <__aeabi_memset4+0x58>
 800323a:      	subs	r1, #0x10
 800323c:      	strd	r3, r3, [r0]
 8003240:      	strd	r3, r3, [r0, #8]
 8003244:      	adds	r0, #0x10
 8003246:      	cmp	r1, #0x3
 8003248:      	bhi	#-0x12 <__aeabi_memset4+0x70>
 800324a:      	mov	r12, r0
 800324c:      	mov	r0, r12
 800324e:      	pop.w	{r4, r6, r7, lr}
 8003252:      	b.w	#-0x96 <__aeabi_memset>

08003256 <memcpy>:
 8003256:      	push	{r4, r5, r6, r7, lr}
 8003258:      	add	r7, sp, #0xc
 800325a:      	str	r8, [sp, #-4]!
 800325e:      	cbz	r2, #0x10
 8003260:      	subs	r3, r2, #0x1
 8003262:      	and	r12, r2, #0x3
 8003266:      	cmp	r3, #0x3
 8003268:      	bhs	#0xc <memcpy+0x22>
 800326a:      	movs	r2, #0x0
 800326c:      	cmp.w	r12, #0x0
 8003270:      	bne	#0x3e <memcpy+0x5c>
 8003272:      	ldr	r8, [sp], #4
 8003276:      	pop	{r4, r5, r6, r7, pc}
 8003278:      	bic	r2, r2, #0x3
 800327c:      	add.w	lr, r0, #0x1
 8003280:      	rsbs	r4, r2, #0
 8003282:      	add.w	r8, r1, #0x1
 8003286:      	mvn	r2, #0x3
 800328a:      	add.w	r5, r8, r2
 800328e:      	add.w	r3, lr, r2
 8003292:      	adds	r2, #0x4
 8003294:      	ldrb	r6, [r5, #0x3]
 8003296:      	strb	r6, [r3, #0x3]
 8003298:      	ldrb	r6, [r5, #0x4]
 800329a:      	strb	r6, [r3, #0x4]
 800329c:      	ldrb	r6, [r5, #0x5]
 800329e:      	strb	r6, [r3, #0x5]
 80032a0:      	ldrb	r5, [r5, #0x6]
 80032a2:      	strb	r5, [r3, #0x6]
 80032a4:      	adds	r3, r4, r2
 80032a6:      	adds	r3, #0x4
 80032a8:      	bne	#-0x22 <memcpy+0x34>
 80032aa:      	adds	r2, #0x4
 80032ac:      	cmp.w	r12, #0x0
 80032b0:      	beq	#-0x42 <memcpy+0x1c>
 80032b2:      	ldrb	r3, [r1, r2]
 80032b4:      	cmp.w	r12, #0x1
 80032b8:      	strb	r3, [r0, r2]
 80032ba:      	beq	#-0x4c <memcpy+0x1c>
 80032bc:      	adds	r3, r2, #0x1
 80032be:      	cmp.w	r12, #0x2
 80032c2:      	ldrb	r6, [r1, r3]
 80032c4:      	strb	r6, [r0, r3]
 80032c6:      	beq	#-0x58 <memcpy+0x1c>
 80032c8:      	adds	r2, #0x2
 80032ca:      	ldrb	r1, [r1, r2]
 80032cc:      	strb	r1, [r0, r2]
 80032ce:      	ldr	r8, [sp], #4
 80032d2:      	pop	{r4, r5, r6, r7, pc}

080032d4 <memset>:
 80032d4:      	push	{r4, r6, r7, lr}
 80032d6:      	add	r7, sp, #0x8
 80032d8:      	cbz	r2, #0x3e
 80032da:      	subs	r3, r2, #0x1
 80032dc:      	and	r12, r2, #0x3
 80032e0:      	cmp	r3, #0x3
 80032e2:      	bhs	#0x2 <memset+0x14>
 80032e4:      	movs	r2, #0x0
 80032e6:      	b	#0x22 <memset+0x38>
 80032e8:      	bic	r2, r2, #0x3
 80032ec:      	add.w	lr, r0, #0x1
 80032f0:      	rsbs	r3, r2, #0
 80032f2:      	mvn	r2, #0x3
 80032f6:      	add.w	r4, lr, r2
 80032fa:      	adds	r2, #0x4
 80032fc:      	strb	r1, [r4, #0x6]
 80032fe:      	strb	r1, [r4, #0x5]
 8003300:      	strb	r1, [r4, #0x4]
 8003302:      	strb	r1, [r4, #0x3]
 8003304:      	adds	r4, r3, r2
 8003306:      	adds	r4, #0x4
 8003308:      	bne	#-0x16 <memset+0x22>
 800330a:      	adds	r2, #0x4
 800330c:      	cmp.w	r12, #0x0
 8003310:      	itt	ne
 8003312:      	strbne	r1, [r0, r2]
 8003314:      	cmpne.w	r12, #0x1
 8003318:      	bne	#0x0 <memset+0x48>
 800331a:      	pop	{r4, r6, r7, pc}
 800331c:      	add	r2, r0
 800331e:      	cmp.w	r12, #0x2
 8003322:      	strb	r1, [r2, #0x1]
 8003324:      	it	ne
 8003326:      	strbne	r1, [r2, #0x2]
 8003328:      	pop	{r4, r6, r7, pc}

0800332a <HardFaultTrampoline>:
 800332a:      	mov	r0, lr
 800332c:      	movs	r1, #0x4
 800332e:      	tst	r0, r1
 8003330:      	bne	#0x4 <HardFaultTrampoline+0xe>
 8003332:      	mrs	r0, msp
 8003336:      	b	#0x4 <HardFault_>
 8003338:      	mrs	r0, psp
 800333c:      	b	#-0x2 <HardFault_>

0800333e <HardFault_>:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 800333e:      	push	{r7, lr}
 8003340:      	mov	r7, sp
 8003342:      	sub	sp, #0x8
 8003344:      	str	r0, [sp, #0x4]
 8003346:      	b	#-0x2 <HardFault_+0xa>
 8003348:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 800334a:      	strb	r0, [r7, #-5]
 800334e:      	ldrb	r0, [r7, #-5]
 8003352:      	bl	#-0x1cca
 8003356:      	b	#-0x2 <HardFault_+0x1a>
;     loop {
 8003358:      	b	#-0x14 <HardFault_+0xa>
 800335a:      	bmi	#-0x58 <memset+0x32>
